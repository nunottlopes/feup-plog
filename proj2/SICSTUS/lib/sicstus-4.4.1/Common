# -*- Mode:makefile -*-
# Copyright (C) 2010 Swedish Institute of Computer Science.
#
#
# Common definitions for SICStus Prolog Makefiles. Contains mostly
# configuration stuff coming from configure.
#

ifneq ($(COMMON_INCLUDED),yes) # entire file
override COMMON_INCLUDED := yes
# [PM] 4.2.0 We need $eval, .SECONDEXPAND etc. GNU make 3.82 is the
# latest available 3.81 ought to suffice.
ifeq ($(strip $(.FEATURES)),)
# .FEATURES variable was introduced in 3.81 and will be non-empty
$(error This makefile requires GNU make 3.81 or later)
endif # .FEATURES empty

### Start of section that is seen both when and when not having SP_SMALL_COMMON
### BEGIN SP_SMALL_COMMON

## Warnings: this section is seen also when SP_SMALL_COMMON

PLATFORM=x86_64-darwin-17.2.0
OLDSICSTUS=
OLDSICSTUSARGS=
WAMFILTER=

## Warnings: this section is seen also when SP_SMALL_COMMON

# numeric value of -DDBG, 'yes' if default 'no' if no debug info.
DBGFLAG=yes
# yes if we are building with extra debugging (-DDBG>0)
DEBUG_BUILD=no
ifeq ($(DEBUG_BUILD), yes)
# [PM] 4.2 sp_local_cflags is used for Android NDK build
# not :=
sp_local_cflags = $(extra_cflags)
sp_local_cflags += -DDBG=$(DBGFLAG)
endif				# DEBUG_BUILD

# Empty, or ends with slash
LLVM_BINDIR=
# yes if we are building with LLVM JIT enabled (implies JIT=no)
LLVM_JIT=no

# yes if we are building with (the ordinary) JIT enabled
JIT=yes
# yes if we are building with the PPC64LE JIT enabled. Implies JIT=yes.
JIT_PPC64LE=no

SP_JIT_ABI=darwinx64
SP_JIT_PRELOAD_FAIL=no

# [PM] POWER
SP_JIT_USE_LQ_STQ=no

# [PM] 4.3 whether invariant/1 et al should be in effect or just no-ops.
ENABLE_PROLOG_INVARIANTS=no
## Warnings: this section is seen also when SP_SMALL_COMMON

PROTOTYPE_CORRECT_SIG_XXX=/NEWLINE//hash/define SP_SIG_IGN ((SP_SigFun*)SIG_IGN)/NEWLINE//hash/define SP_SIG_DFL ((SP_SigFun*)SIG_DFL)/NEWLINE//hash/define SP_SIG_ERR ((SP_SigFun*)SIG_ERR)/NEWLINE//hash/define SP_SIGINT SIGINT/NEWLINE//hash/define SP_SIGQUIT SIGQUIT/NEWLINE//hash/define SP_SIGBREAK SIGBREAK/NEWLINE/

## Warnings: this section is seen also when SP_SMALL_COMMON

# Useful when used with make functions, see
# GNU Make Manual, Section "Functions for Transforming Text"
comma := ,
empty :=
space := $(empty) $(empty)
hash  := \#

## Warnings: this section is seen also when SP_SMALL_COMMON

# [PM] 4.1.3+ hide-trick from Android NDK build system which they stole from Linux build system.
# -----------------------------------------------------------------------------
# Macro    : hide
# Returns  : nothing
# Usage    : $(hide)<make commands>
# Rationale: To be used as a prefix for Make build commands to hide them
#            by default during the build. To show them, set V=1 in your
#            environment or command-line.
#
#            For example:
#
#                foo.o: foo.c
#                -->|$(hide) <build-commands>
#
#            Where '-->|' stands for a single tab character.
#
# -----------------------------------------------------------------------------
ifeq ($(V),1)
hide := $(empty)
else
hide := @
endif

## Warnings: this section is seen also when SP_SMALL_COMMON


ifneq ($(findstring android, $(PLATFORM)),)
CROSS_TARGET := android
# Numeric Android version (6,7,8,...) or empty if not Android
SP_ANDROID_PLATFORM := $(patsubst %, android-%,$(PLATFORM))
ifeq ($(strip $(SP_ANDROID_PLATFORM)),)
$(error SP_ANDROID_PLATFORM empty, PLATFORM=$(PLATFORM))
endif				# !SP_ANDROID_PLATFORM
endif				# PLATFORM ~= android

## Warnings: this section is seen also when SP_SMALL_COMMON
ifneq ($(findstring cygwin,$(OSTYPE)),)
SP_CYGWIN_HOST := yes
endif				# OSTYPE = cygwin

ifeq ($(SP_ANDROID_PLATFORM), yes)
SP_SMALL_COMMON := yes
endif

ifeq ($(SP_SMALL_COMMON),yes)
# Define NATIVEPATH et al manually, instead of relying on configure.

# Do not use CYGPATH explicitly in make files. Instead of,
# e.g., '$(shell $(CYGPATH) "$<")' do '$(call NATIVEPATH, $<)' (note
# the absense of double quotes). This avoids calling the shell on
# non-windows platforms. NATIVEPATH will give a path with forward
# slashes which works for most Win32 cases and avoids quoting
# issues. NATIVEPATHBACKSLASH and CYGPATHBACKSLASH generates the fully
# native paths with backslash
ifeq ($(SP_CYGWIN_HOST),yes)
CYGPATH = cygpath -m
CYGPATHBACKSLASH = cygpath -w
NATIVEPATH = $(shell $(CYGPATH) "$(strip $(1))")
NATIVEPATHBACKSLASH = $(shell $(CYGPATHBACKSLASH) "$(strip $(1))")
else				# native (POSIX)
# identity functions
CYGPATH = echo
CYGPATHBACKSLASH = echo
NATIVEPATH = $(strip $(1))
NATIVEPATHBACKSLASH = $(strip $(1))
endif				# native (POSIX)
endif				# SP_SMALL_COMMON


### END SP_SMALL_COMMON
# [PM] 4.2 Most things should be conditionalized on SP_SMALL_COMMON != yes
#      The only exceptions should go above and are things that is
#      needed when building Android and similar cross-compilation
#      targets.
ifneq ($(SP_SMALL_COMMON),yes) # rest of file

# [PM] 4.1.3+ Make verbose the default, for now
V := 1

# A function for the path of the parent directory, _without_ the terminating slash.
# Use as $(call parentdir, $(FILE))
parentdir = $(patsubst %/,%,$(dir $1))


POSIX_SHELL=/bin/sh

# [PM] 4.2 was but why? Instead consider SHELL=/bin/sh
# SHELL=/bin/sh


prefix=/usr/local

SP_DIRNAME=sicstus-4.4.1
SP_RTSYS_DIRNAME=sp-4.4.1
SP_BINDIST_TOP_LEVEL_DOC=yes
SP_GET_DISPATCH_NAME=SP_get_dispatch_40401

# [PM] 3.11.2 export CYGWIN=nontsec on WinCE, otherwise empty


# Obsolete docs: [PM] 4.0.1. export MACOSX_DEPLOYMENT_TARGET=10.4 on Mac OS X, otherwise empty
export MACOSX_DEPLOYMENT_TARGET=10.13

# [PD] 3.10.2beta1 Once upon a time Jesper thought it would be a good
#           idea to keep this list sorted. Since he left SICS nobody
#           really cared enough to keep it sorted. The comment below
#           has been left untouched so his dream can be alive ...
# Keep this list sorted!
AR=ar
ARFLAGS=
#[PD] 3.8.7 perhaps AS and ASM should be one and same?
AS=/usr/bin/as
ASFLAGS=-arch x86_64
ASM=
ASM_FLAGS=
AUTOCONF=/opt/local/bin/autoconf
BASH=/bin/bash
BDBINC=-I/usr/local/BerkeleyDB.6.2/include
BDBLIB=-L/usr/local/BerkeleyDB.6.2/lib -ldb-6.2
BDB_MODULE=bdb.po
BIPS_VERSION=1040401
BENCH_ITERATIONS_SCALE=100
CANDLE=""
LIGHT=""
CC=cc
CXX=c++
CC_IS_GCC=yes
CC_IS_CLANG=yes
# [PM] 3.11.2+ $(cflags_extra) should always be empty. It is a hook for passing extra flags while debugging
CFLAGS=  -g -O2 -pipe -D_APPLE_C_SOURCE  -m64 -fno-common -dynamic  -fno-strict-aliasing  -Wconversion -Wno-sign-conversion -Werror  -Wdeclaration-after-statement -Wmissing-declarations -Wstrict-prototypes -Wunused  -Wall -Wstrict-aliasing -Wdisabled-optimization -Wmissing-prototypes -Wnested-externs -Wpointer-arith -W -Wno-sign-compare -fno-common  -fvisibility=hidden $(cflags_extra)
CHR_MODULE=chr.po

# [PM] 4.4.0 see Emulator/Makefile
wam.o_cflags_extra=
wam_body.o_cflags_extra=

CC_WERROR=-Werror
# -Wno-conversion on GCC, otherwise may be empty. 
CC_WNO_CONVERSION_OPTION=-Wno-conversion
CC_WNO_IMPLICIT_FALLTHROUGH_OPTION=
CL_LEGACY_FORSCOPE_OPTION=
CHARMAINOBJ=charmain.o intrpt.o 
CHMOD=chmod
CODETYPE=compactcode
COMCLIENTLIB=
CP=cp
#[PD] 4.0.0
CPUCOUNTCOMMAND=:
#[PD] C# compiler (.NET)
CSC=no
#[PD] 3.11.3beta1 Flags for the C# compiler (.NET)
CSCFLAGS=

# e.g. empty, or /Library/Frameworks/Mono.framework/Commands/mono
DOTNET_LAUNCHER=

#[PD] J# compiler (.NET)
VJC=no
#[PD] 4.0.0beta2 Flags for the J# compiler (.NET)
VJCFLAGS=
CYGPATH=echo
CYGPATHBACKSLASH=echo
DISABLE_FOREIGN_RESOURCES=no
# [PM] 3.11.1 Do not use CYGPATH explicitly in make files. Instead of,
# e.g., '$(shell $(CYGPATH) "$<")' do '$(call NATIVEPATH, $<)' (note
# the absense of double quotes). This avoids calling the shell on
# non-windows platforms. NATIVEPATH will give a path with forward
# slashes which works for most Win32 cases and avoids quoting
# issues. NATIVEPATHBACKSLASH and CYGPATHBACKSLASH generates the fully
# native paths with backslash (similar to what CYGPATH did pre 3.11.1)
#
NATIVEPATH=$(strip $(1))
NATIVEPATHBACKSLASH=$(strip $(1))
DS_CAN_LICENSE_DIALOG=
DSMAINOBJ=main.o

DT_CC = 
DT_CC_PATH = 
DT_OUTPUT_OPT = 
DT_CFLAGS = 
DT_CPPFLAGS = 
DT_LIBS = 
DT_ENV_INCLUDE = 
DT_ENV_LIB = 

DVIPS=false
ENABLE_DOTNET=no
ENABLE_DOTNETJSHARP=no
ENABLE_DOTNETCSHARP=no
# [PM] 4.3 where to find vjslib.dll, e.g. $(cygpath -u 'C:/WINDOWS/Microsoft.NET/Framework/v2.0.50727')
DOTNET2DIR=
# [PM] 3.9.1 SP_NO_MULTI_SP_FEATURE is yes on particular platforms where multi-sp is disabled
SP_NO_MULTI_SP_FEATURE=no
# [PM] 4.2.1 If low level memory allocation can _not_ be hookable
SP_NO_MEMORY_HOOKS=

ENABLE_STATLIB=yes
ENABLE_WAM_ASM_PEEP=no

ENABLE_MULTITHREADED_LIBS=yes
ENABLE_CLPFD=yes
# [PM] 4.0.5 one of no,yes,always
ENABLE_CLPFD_MULTI_SP=always
ENABLE_SYSTEM_SINGLE_THREADED=$(ENABLE_MULTITHREADED_LIBS)

# [PM] 3.9b4 the new pthreads based timeout.c (ignored on windows)
ENABLE_PTHREAD_TIMEOUT=no

EXPECT_WARNINGS_MULTI_SP_C=no
EXPFILE_SYMBOL_PREFIX=

DEFAULT_KERNEL_IMPLIB=$(error DEFAULT_KERNEL_IMPLIB should not be used)
ETAGS=/usr/bin/etags
EMACS_ETAGS=yes
EXEEXT=
FLI_FILE=fli_dl.c
# [PM] 4.1.3+ can be empty if DISABLE_FOREIGN_RESOURCES=yes
FLI_APPLY_ASM_FILE=fli_sysv_abi_x86_64.s

GCCLIB=
# [PM] 4.1.3+ gone
KERNEL_SHLD_GENIMPLIB=
GZIP=/usr/bin/gzip
IMPLIB=
INCR_CFLAGS=
INSTALL=/usr/bin/install -c
INSTALL_DATA=${INSTALL} -m 644
INSTALL_RO_DATA=${INSTALL} -m 444
ENABLE_JAVA=yes
ENABLE_JAVA_JNI=yes
HIGH_RESOLUTION_TIME_CP=no
JAR=/Library/Java/JavaVirtualMachines/jdk1.8.0_152.jdk/Contents/Home/bin/jar
JASPER_MODULE=jasper.po
JASPER_SPLFR_FLAGS= --no-rpath 
JAVAC=/Library/Java/JavaVirtualMachines/jdk1.8.0_152.jdk/Contents/Home/bin/javac
JAVACFLAGS=  -encoding ISO-8859-1
# [PM] 3.8.6 autoconf naively looks for AC_ so this can not be JAVAC_DBGFLAGS
JAVACDBGFLAGS=-g 
# [PM] 4.0.2+ consider, e.g. -Xlint:all
JAVACLINTFLAGS=
JAVADOC=/Library/Java/JavaVirtualMachines/jdk1.8.0_152.jdk/Contents/Home/bin/javadoc
JAVADOCFLAGS=-breakiterator -encoding ISO-8859-1
JAVAEXEC=/Library/Java/JavaVirtualMachines/jdk1.8.0_152.jdk/Contents/Home/bin/java
JAVAH=/Library/Java/JavaVirtualMachines/jdk1.8.0_152.jdk/Contents/Home/bin/javah
JAVAINC= -I/Library/Java/JavaVirtualMachines/jdk1.8.0_152.jdk/Contents/Home/include -I/Library/Java/JavaVirtualMachines/jdk1.8.0_152.jdk/Contents/Home/include/darwin
JAVALIB=-L/Library/Java/JavaVirtualMachines/jdk1.8.0_152.jdk/Contents/Home/jre/lib/server -ljvm
JAVA_CLASSPATH=
JAVA_EXECOPTS= -d64
# [PM] 3.12.8 subsumed by JASPER_ENV_ARG
JASPER_ENV_ARGS=DYLD_LIBRARY_PATH=/Library/Java/JavaVirtualMachines/jdk1.8.0_152.jdk/Contents/Home/jre/lib/server 
ifneq ($(strip $(JASPER_ENV_ARGS)), )
# [PM] 3.12.8 set environment variables necessary for loading java into sicstus
#             Subsumes JAVA_PRELOAD
JASPER_ENV := env $(JASPER_ENV_ARGS)
endif

JAVAEXEC_ENV_ARGS=
ifneq ($(strip $(JAVAEXEC_ENV_ARGS)), )
# [PM] 4.0.3 set environment variables necessary for loading sicstus into java
JAVAEXEC_ENV := env $(JAVAEXEC_ENV_ARGS)
endif

LINK_OPT_NOWIN98=
LD=ld
# [PM] 4.0 malloc debug environment vars.
# On RH set to, e.g. env MALLOC_PERTURB_=47
# Mac OS X also has similar things, others?
MALLOC_ENV=

# [PM] 4.0 on MacOS X we need to limit MALLOC_ENV for some OS tools
MACOSX_MALLOC_SCRIBBLE_KLUDGE := 


# [PM] 3.11.2 PrologBeans server module is always built (does not require Java)
PROLOGBEANS_MODULE := prologbeans.po

# [PM] 3.9.1 LDFLAGS is obsolete, no longer used. LDFLAGS used to
# contain what is now in SPLD_EXE_LIBS, SPLD_EXE_LDFLAGS and
# SPLM_LIBS.

LDFLAGS=surely_this_is_an_illegal_arg_if_ever_used_by_mistake
SPAUXOBJ=spaux.o
SPLM_LIBS=
SPLD_EXE_LDFLAGS=
SPLD_EXE_LIBS=-framework CoreFoundation
WIN32_SPLD_CC_SPECIAL=
WIN32_EMBED_MANIFESTS=
SPLD_CONFIG_FILE_BASENAME=spconfig-4.4.1
LD_R=ld -r
CC_ROPT=
SHLD_ROPT=

SPLFR_LD_r_FLAGS=-d
# [PM] 3.9.1 renamed from LINK_OUTPUT_OPT
# [PM] 4.3 Follow immediately by comment to make visible the space following "-o" on POSIX.
SHLD_OUTPUT_OPT=-o #
LN=ln -s
# [PM] 4.1.3 Locale-name corresponding to en_US.utf8.
LC_ALL_UTF8_LOCALE_NAME=en_US.UTF-8
BACKQUOTE_UTF8_BUG=
M4=m4
M4_FLAGS=-U builtin -U format --fatal-warnings
MT=mt.exe
MAKEINFO=/opt/local/bin/makeinfo
MV=mv
# [PM] 3.11.3 NOT quoted! Use short path-name or quote at usage
# [PD] 3.11.3 .NET document generator
NDOC=
NDOCHELPDOCUMENTER=
ENABLE_HtmlHelp2=
NMEDIT=
NOLINK_OPT=-c
# [PM] 4.3 Follow immediately by comment to make visible the space following "-o" on POSIX.
NOLINK_OUTPUT_OPT=-o #
NO_UNKNOWN_PRAGMAS=-Wno-unknown-pragmas
OBJEXT=o
ODBC_MODULE=odbc.po
ODBCINC=-I/Library/Frameworks/iODBC.framework/Versions/3.52/Headers
ODBCLIB=-liodbc
OPROFILE_MODULE=
OPAGENT_LIB=
PERF_MODULE=

# [PM] 4.3.3 CAPSTONE for debugging the jitter. Not part of the product.
USE_CAPSTONE=no
# E.g. -I/usr/local/capstone/include
CAPSTONEINC=-I$(CAPSTONE_SRCDIR)/include
# E.g. "-L/usr/local/capstone/lib -lcapstone" (for dynamic linking), or
#       ".../libcapstone.a" (for static linking)
CAPSTONELIB=$(CAPSTONELIBRPATHDIR)/libcapstone.a
CAPSTONELIBRPATHDIR=$(CAPSTONE_SRCDIR)
CAPSTONE_SRCDIR=$(TOP_SRCDIR)/capstone

# [PM] 4.3.2+ OPDIS for debugging the jitter. Not part of the product.
USE_OPDIS=
# E.g. -I/usr/local/opdis/include
OPDISINC=
# E.g. -L/usr/local/opdis/lib -lopdis
OPDISLIB=
OPDISLIBRPATHDIR=


OUTPUT_OPT=-o 
PARMAKE=
## [PM] 3.8.6 Note: When setting PATH you should always use colon
## (:). PATHSEP is for PATH-like arguments to possibly non-UNIX
## programs (i.e., not to cygwin programs, nor sh/bash builtins).
PATHSEP=:
PCACHE=./platform.cache
PDFTEX=/opt/local/bin/pdftex
PERL=/usr/bin/perl
# [PM] 4.1 Ensure perl is run in a sane locale. Mainly an issue in Cygwin 1.7
PERL_LC_ALL=env 'LC_ALL=en_US.UTF-8'
PERLAPP=:
PERLAPP_MODE=
PERLAPP_ENABLED=no

INSTALLER_PLATFORM=x86_64-darwin-17.0.0
LICENSE_PLATFORM=darwin
LICENSE_PRODUCT=sicstus4.4_darwin
PLFLAGS=compactcode
QUOTECHAR="
RANLIB=ranlib
RC=rc.exe
RM=rm
RTKERNEL_BASENAME_SANS_SUFFIX=libsprt4-4-1
RTKERNEL_BASENAME_WITH_DSO_SUFFIX=libsprt4-4-1.dylib
RTKERNEL_BASENAME_WITH_STAT_SUFFIX=libsprt4-4-1.a
RTKERNEL_INSTANCE_TEMPLATE=libsprt4-4-1-instance-XX

KERNEL_STATLIB=$(error KERNEL_STATLIB should not be used, use RTKERNEL_BASENAME_WITH_STAT_SUFFIX instead)
KERNEL_SHLD_FLAGS=-install_name @loader_path/sp-4.4.1/libsprt4-4-1.dylib  
SHLD=cc
# [PM] 4.2.1 $(shldflags_extra) should always be empty. It is a hook for passing extra flags while debugging
SHLDFLAGS=-dynamiclib  -m64 -Wl,-multiply_defined,error  $(shldflags_extra)
# [PM] 4.2.1 $(kernel_shld_libs_extra) should always be empty. It is a hook for passing extra flags while debugging
KERNEL_SHLD_LIBS=-framework CoreFoundation $(kernel_shld_libs_extra)
MAPFILEOPT=
RTKERNEL_EXPFILE=
RELEASE_YEAR=2018

LLVM_KERNEL_LD_FLAGS=
LLVM_KERNEL_LD_LIBFLAGS=
LLVM_KERNEL_CPP_FLAGS=

# Location of the MiniZinc tools.
MZN2FZN=/Applications/MiniZincIDE.app/Contents/Resources/mzn2fzn
SOLNS2OUT=/Applications/MiniZincIDE.app/Contents/Resources/solns2out
MINIZINC_BIN_DIR=/Applications/MiniZincIDE.app/Contents/Resources

SHLD_RTKERNELEXP=-Wl,-exported_symbol,_$(SP_GET_DISPATCH_NAME)
SHPRE=lib
SHSFX=dylib
FLI_SHSFX=bundle
JNI_SHSFX=dylib
SHVER=
SICSTUS_MAJOR_VERSION=4
SICSTUS_MINOR_VERSION=4
SICSTUS_REVISION_VERSION=1
SICSTUS_BETA_VERSION=0
SICSTUS_MICRO_VERSION=1000
SICSTUS_BUILD_VERSION=4.4.1.1000
SICSTUS_VERSION_STRING=4.4.1
SICSTUS_VERSION=40401
SICSTUS_RELEASE_BUILD=yes
SICSTUS_FORCE_BUILD=no
OSX_INSTALLER_SICSTUS_ID=se.sics.sicstus
UNIQUE_BASE_NAME=C9BB725E-1FF3-497C-9E53-F4A5ECC14A49
SPIDER=yes
SP_TRANSLATE_TO_ISO_EXCEPTION_IN_RAISER=yes
SP_CLAUSE_ISO_BODY=yes
SP_CLAUSE_ISO_BODY_NO_META_ARGUMENT_WRAPPING=yes
SP_AVOID_PREFIX_MINUS_ARGUMENT_BRACKETING=no

SLEEP=
SOCKETLIB=
SP_BINAUXDIR=/tmp/octopussy-vm-mac-os-x-10-13-build-20180317-125404/srcdir/Utils/x86_64-darwin-17.2.0/lib/sicstus-4.4.1/bin
SP_BIGENDIAN=no

# yes if 64-bit platform, no if not.
SP_64 = yes

SP_X86_ = no
SP_X64_ = yes
SP_POWER64_ = no

SP_X86 := $(strip $(if $(findstring yes, $(SP_X86_)), yes, no))
SP_X64 := $(strip $(if $(findstring yes, $(SP_X64_)), yes, no))
SP_POWER64 := $(strip $(if $(findstring yes, $(SP_POWER64_)), yes, no))

# CPU architecture aliases
SP_INTEL := $(strip $(if $(findstring yes, $(SP_X86)$(SP_X64)), yes, no))
SP_X86_64 := $(SP_X64)


SPACEOUT_MODULE=
SPLD_CONFIG_FILE=/tmp/octopussy-vm-mac-os-x-10-13-build-20180317-125404/srcdir/Utils/x86_64-darwin-17.2.0/bin/spconfig-4.4.1
SPLD_DSFLAGS=
SPLD_TOOLFLAGS=--moveable
SPLD_OPT_MOVEABLE_NEEDS_WRAPPER=no
SPLD_OPT_WRAPPER_DEFAULT=no
# [PM] 4.0.5 Empty if we do not support embedded runtime licenses.
SPLD_OPT_NO_EMBED_LICENSE=--no-embed-license
USE_RUNTIME_LICENSE_SPRT=no
USE_RUNTIME_LICENSE_SPRE=yes
# [PM] 4.0.5 true if either of the USE_RUNTIME_LICENSE_XXX
USE_RUNTIME_LICENSE=yes


SPVER=$(error [PM] 4.0 SPVER should not be used)
STSFX=s.o
SYSTEMLIB=
# [PD] 3.10.2 TAR is now STDTAR
STDTAR=/usr/bin/tar
# [PD] 3.10.2beta1
GNUTAR=/opt/local/bin/gnutar
# [PM] 4.0.1
POSIX_GREP=/usr/bin/grep
# [PM] 4.0.2 
GNU_GREP=/usr/bin/grep
GNU_FIND=/opt/local/bin/gfind
RMDUMMY=nonexisting_dummy_file
TCLINC=-DMACOSX_TCLTK_FRAMEWORK  -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/System/Library/Frameworks/Tcl.framework/Headers -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/System/Library/Frameworks/Tk.framework/Headers
TCLLIB= -framework Tcl -framework Tk 
TCLTK_MODULE=tcltk.po

# [PM] 4.3.1 texi2dvi is completely broken in its handling of $TEX et
# al. so we need to make them findable on PATH by adding TEXINFODIR.
TEXINFODIR=/opt/local/bin

TEX=/opt/local/bin/tex
TEXI2DVI=/opt/local/bin/texi2dvi
THREADED=yes
TIMEOUT_MODULE=timeout.po

# [PM] 4.4.0 Whether library/timeout.pl needs a foreign resource. In effect "yes" prior to 4.4.0.
TIMEOUT_MODULE_FOREIGN=no

TOP_SRCDIR=/tmp/octopussy-vm-mac-os-x-10-13-build-20180317-125404/srcdir
ULIMIT_DATA=ulimit -d unlimited;
ULIMIT_CMD=ulimit

UNZIP=/usr/bin/unzip

UUIDGEN=/usr/bin/uuidgen
UUIDGENARGS=
MSIVAL2=
MSVC_ML_COMDAT_BUG=
VISUAL_STUDIO_VERSION=
WIN32=no
WIN64=no
WINCE=no
WIN32_EXTRAOBJS=
WINMAINOBJ=

MSSDK_POSIX_PATH=
IEXPRESS=
USE_IEXPRESS=
SEVENZIP=
SEVENZIP_PATH=
USE_SEVENZIP=
WIX_PRODUCTCODE=
WIX_UPGRADECODE=
ISETUPPROPNAME_INSTLOCATION=

# [PM] 4.0.5 whether VALGRIND should be supported (but still not used unless explicitly on)
ENABLE_VALGRIND=no

VALGRIND=/home/perm/bin/valgrind
# [PM] 4.1.3+ valgrind_flags_extra should always be empty. It is for passing extra flags via make command line
VALGRIND_FLAGS=--dsymutil=yes --smc-check=all $(valgrind_flags_extra)
# [PM] 4.2.1 space separated absolute, or relative to root source dir, paths to valgrind suppression files. Used by make test_valgrind
# Should be used as ... --suppressions=F1 --suppressions=F2 ...
VALGRIND_SUPPRESSIONS_FILES=Suite/valgrind_snow_leopard.supp

# [PM] 4.2.1 Tests that should not be run by default on this platform
SUITE_SKIPPED_TESTS=cplus cplus_stat
# [PM] 4.2.1 Tests expected to fail on this platform, often a superset of SUITE_SKIPPED_TESTS
SUITE_EXPECTED_FAILURES=posix_wait_test_wnohang cplus cplus_stat

ifeq ($(CODETYPE),profiledcode)
PLATFORM_BSTRAP=$(PLATFORM)
CODE=pql
endif
ifeq ($(CODETYPE),compactcode)
PLATFORM_BSTRAP=$(PLATFORM)
CODE=cql
endif

# [PM] 3.9.1 the prolog code library directory (.../lib/sicstus-3.9.1beta1/library)
SP_LIBRARY_DIR=/tmp/octopussy-vm-mac-os-x-10-13-build-20180317-125404/srcdir/Utils/x86_64-darwin-17.2.0/lib/sicstus-4.4.1/library

ifeq ($(WIN32),yes)
SP_LIBDIR=$(prefix)
LOCAL_PREFIX=$(TOP_SRCDIR)
LOCAL_BOOTSTRAP_PREFIX=$(TOP_SRCDIR)
else
SP_LIBDIR=$(prefix)/lib/$(SP_DIRNAME)
LOCAL_PREFIX=$(TOP_SRCDIR)/Utils/$(PLATFORM)
LOCAL_BOOTSTRAP_PREFIX=$(TOP_SRCDIR)/Utils/$(PLATFORM_BSTRAP)
endif
SP_BINDIR=$(prefix)/bin


# Executables.

ifeq ($(MAKE_SICSTUS_REFERENCES_ERROR),yes)
# [PM] 4.1.3 cross compiling
SICSTUS=$(error Should not reference SICSTUS)
else
SICSTUS=$(prefix)/bin/sicstus$(EXEEXT)
endif
# [PM] 3.9.2 SPLD_EXEEXT empty except when perlapp is used on Win32 (in which case it is .exe)
SPLD_EXEEXT=
SPLD=$(prefix)/bin/spld$(SPLD_EXEEXT)
SPLFR=$(prefix)/bin/splfr$(SPLD_EXEEXT)

SPLM=$(prefix)/bin/splm$(EXEEXT)
SPDET=$(prefix)/bin/spdet$(EXEEXT)
SPXREF=$(prefix)/bin/spxref$(EXEEXT)
SPFZ=$(prefix)/bin/spfz$(EXEEXT)
MZNSP=$(prefix)/bin/mzn-sicstus$(EXEEXT)

# Misc scripts
MKDIR=mkdir -p


# [PM] WinCE
SP_BIGENDIAN=no

MKDISTR_COMPRESS=gzip
MKDISTR_COMPRESS_ARGS=-9
SP_INSTALL_ZCAT=zcat
SP_MERGE_CRT=
SP_MERGE_CRT_MSM_NAME=
SP_MERGE_CRT_POLICY_MSM_NAME=

ENCRYPTED_INSTALLER=no

# [PD] 3.10.2
USE_PAX=yes

COMP_QL= Compiler
BIPS_QL= Bips

SPIO_USE_LAYER_THREADDEVICE=yes


## [PM] 3.9 Common defines for making sicstus exit with error code if
##          an error or warning occurs (e.g., during compile).
##          Prefix any goal sent to sicstus with $(BARF_ON_ERROR), e.g.,
##          echo "$(BARF_ON_ERROR), fcompile(foo)." | sicstus -f
## [PD] 3.9 FIXME: BARF_ERROR_38 affects SICStus 3.9, so BARF_ERROR below
##          cannot be defined as both BARF_ERROR_38 and BARF_ERROR_39.

# barf if we get error
# [PM] 3.9 OLDSICSTUS may be 3.8 or 3.9

# [PM] 3.9b5 broken: BARF_ERROR := $(BARF_ERROR_38) $(BARF_ERROR_39)
# [PM] 3.9b5 works in 3.8 and 3.9
# [PM] 3.12.2 must be "recursively expanded" variable so we can override CUT_FAIL_FOR_IGNORED_PROLOG_ERRORS
BARF_ERROR = asserta(user:(portray_message(error, _Message) :- $(CUT_FAIL_FOR_IGNORED_PROLOG_ERRORS) abolish(user:portray_message/2), print_message(error, _Message), halt(1))), 

# [PM] 3.12.2 now define FAIL_FOR_IGNORED_PROLOG_WARNINGS only where needed
# # [PM] 3.10 Do not barf at ... is previously loaded into module user now it is reloaded into module dummy
# #           reload(File,OldM,NewM)
# #           Could use \+ but afraid the backslash would confuse the shell
# FAIL_FOR_IGNORED_PROLOG_WARNINGS := ((_Message=reload(_File,_OldM,_NewM), _OldM==user, _NewM==dummy) -> fail; true),

# Barf if we get error or warning
# [PM] 3.9b5 works in 3.8 and 3.9
# [PM] 3.12.2 must be "recursively expanded" variable so we can override FAIL_FOR_IGNORED_PROLOG_WARNINGS
BARF_WARNING = asserta(user:(portray_message(warning, _Message) :- $(FAIL_FOR_IGNORED_PROLOG_WARNINGS) abolish(user:portray_message/2), print_message(warning, _Message), halt(1))), 

BARF_REDEFINED = asserta(user:(portray_message(_, _Message) :- _Message = redefined(_,_,_,_), $(FAIL_FOR_IGNORED_PROLOG_WARNINGS) abolish(user:portray_message/2), print_message(warning, _Message), halt(1))), 


# Barf only on errors
# BARF_ON_ERROR := $(BARF_ERROR)
# Barf on errors and warnings (there should be no warnings).

# [PM] 3.12.2 must be "recursively expanded" variable so we can
#      override CUT_FAIL_FOR_IGNORED_PROLOG_ERRORS and
#      FAIL_FOR_IGNORED_PROLOG_WARNINGS
BARF_ON_ERROR = $(BARF_WARNING) $(BARF_ERROR)

# [PM] 4.1.3+ convert "a b c" into "[ a, b, c ]"
# I do not understand why $(strip $1) is needed, just $(if $1, ...) ought to suffice but does not (GNU Make 3.81)
MAKE_PROLOG_LIST = [ $(strip $(if $(strip $1), $(addsuffix $(comma), $(wordlist 2,$(words $1), x $1)) $(word $(words $1),$1))) ]

# [PM] 4.1.3+ convert "a b c" into "[ 'a', 'b', 'c' ]"
MAKE_PROLOG_LIST_QUOTED_ELEMENTS = $(call MAKE_PROLOG_LIST, $(foreach t,$1,'$(t)'))


# Make sure that nobody runs the clean-targets by mistake
.PHONY: def_internal
def_internal:
	$(error There is no default target in this Makefile. Use explicit target(s) instead.)
	@echo "There is no default target in this Makefile"
	@echo "Use explicit target(s) instead."

# Default values for clean-targets
.PHONY: clean distclean maintainerclean mostlyclean

# [PM] 3.10.2 SPRM 5244 Emulator/Makefile deletes more in clean target than in distclean
# distclean: clean

# [PM] 3.9 delete failed targets (GNU Make specific)
# NO_DELETE_ON_ERROR is set from Suite/Makefile
ifneq ($(NO_DELETE_ON_ERROR),yes)
.DELETE_ON_ERROR:
endif

endif # SP_SMALL_COMMON != yes

endif # COMMON_INCLUDED != yes
