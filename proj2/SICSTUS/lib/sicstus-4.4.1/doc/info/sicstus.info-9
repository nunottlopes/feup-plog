This is sicstus.info, produced by makeinfo version 5.2 from
sicstus.texi.

INFO-DIR-SECTION SICStus Prolog
START-INFO-DIR-ENTRY
* SICStus Prolog Manual: (sicstus).			SICStus Prolog User's Manual.
END-INFO-DIR-ENTRY

Generated March 15, 2018.



File: sicstus.info,  Node: cpg-ref-SP_free,  Next: cpg-ref-SP_get_address,  Prev: cpg-ref-SP_fprintf,  Up: cpg-bif

12.3.23 'SP_free()'
-------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     void
     SP_free(void *ptr);

   Disposees of the block referenced by 'ptr', which must have been
obtained by a call to 'SP_malloc()' or 'SP_realloc()', and must not have
been released by a call to 'SP_free()' or 'SP_realloc()'.

Arguments
---------

PTR
     Block to dispose of.

See Also
--------

*Note OS Memory Management::.


File: sicstus.info,  Node: cpg-ref-SP_get_address,  Next: cpg-ref-SP_get_arg,  Prev: cpg-ref-SP_free,  Up: cpg-bif

12.3.24 'SP_get_address()'
--------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     int
     SP_get_address(SP_term_ref term,
                    void **p);

   Assigns to '*p' the pointer that corresponds to a Prolog integer

Arguments
---------

TERM
     The SP_term_ref holding the value

P
     The location to assign

Return Value
------------

Zero if the conversion fails (as far as failure can be detected), and a
nonzero value otherwise.

See Also
--------

*note Accessing Prolog Terms::.


File: sicstus.info,  Node: cpg-ref-SP_get_arg,  Next: cpg-ref-SP_get_atom,  Prev: cpg-ref-SP_get_address,  Up: cpg-bif

12.3.25 'SP_get_arg()'
----------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     int
     SP_get_arg(int i,
                SP_term_ref term,
                SP_term_ref arg);

   Assigns to 'arg' the 'i':th argument of a compound term.  This is
similar to calling 'arg/3'.

Arguments
---------

I
     The (one-based) argument number

TERM
     The SP_term_ref holding the compound term

ARG
     The SP_term_ref to be assigned

Return Value
------------

Zero if the conversion fails (as far as failure can be detected), and a
nonzero value otherwise.

See Also
--------

*note Accessing Prolog Terms::.


File: sicstus.info,  Node: cpg-ref-SP_get_atom,  Next: cpg-ref-SP_get_byte,  Prev: cpg-ref-SP_get_arg,  Up: cpg-bif

12.3.26 'SP_get_atom()'
-----------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     int
     SP_get_atom(SP_term_ref term,
                 SP_atom *a);

   Assigns to '*a' the canonical representation of a Prolog atom

Arguments
---------

TERM
     The SP_term_ref holding the value

A
     The location to assign

Return Value
------------

Zero if the conversion fails (as far as failure can be detected), and a
nonzero value otherwise.

See Also
--------

*note Accessing Prolog Terms::.


File: sicstus.info,  Node: cpg-ref-SP_get_byte,  Next: cpg-ref-SP_get_code,  Prev: cpg-ref-SP_get_atom,  Up: cpg-bif

12.3.27 'SP_get_byte()'
-----------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     spio_t_error_code
     SP_get_byte(
       SP_stream *stream);

   Read a byte from a binary stream.

Arguments
---------

STREAM
     The stream.  Must be a binary stream open for input.

Return Value
------------

On success, the byte just read will be returned, cast to a
'spio_t_error_code'.  The value returned on successful return will never
be negative.

   On failure, returns an error code, recognizable with 'SPIO_FAILED()'.
Error codes are always negative.

Description
-----------

Note that 'SP_get_byte()' is implemented as a macro and may evaluate the
'stream' argument more than once.

See Also
--------

*note cpg-ref-SP_get_code::.  *note Prolog Streams::.


File: sicstus.info,  Node: cpg-ref-SP_get_code,  Next: cpg-ref-SP_get_current_dir,  Prev: cpg-ref-SP_get_byte,  Up: cpg-bif

12.3.28 'SP_get_code()'
-----------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     spio_t_error_code
     SP_get_code(
       SP_stream *stream);

   Read a character code from a text stream.

Arguments
---------

STREAM
     The stream.  Must be a text stream open for input.

Return Value
------------

On success, the character just read will be returned, cast to a
'spio_t_error_code'.  The value returned on successful return will never
be negative.

   On failure, returns an error code, recognizable with 'SPIO_FAILED()'.
Error codes are always negative.

Description
-----------

Note that 'SP_get_code()' is implemented as a macro and may evaluate the
'stream' argument more than once.

See Also
--------

*note cpg-ref-SP_get_byte::.  *note Prolog Streams::.


File: sicstus.info,  Node: cpg-ref-SP_get_current_dir,  Next: cpg-ref-SP_get_dispatch,  Prev: cpg-ref-SP_get_code,  Up: cpg-bif

12.3.29 'SP_get_current_dir()'
------------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     char *
     SP_get_current_dir(void);

   Obtains an encoded string containing the absolute, slash ('/')
terminated, path to the current working directory.  The return value is
allocated with 'SP_malloc' and should be freed with 'SP_free'.

Return Value
------------

The string on success and 'NULL' on error.

See Also
--------

*note cpg-ref-SP_set_current_dir::.  *note OS File System::.


File: sicstus.info,  Node: cpg-ref-SP_get_dispatch,  Next: cpg-ref-SP_get_float,  Prev: cpg-ref-SP_get_current_dir,  Up: cpg-bif

12.3.30 'SP_get_dispatch()'
---------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     SICSTUS_API_STRUCT_TYPE *
     SP_get_dispatch(void *reserved);


Arguments
---------

RESERVED
     Reserved, should be 'NULL'.

Return Value
------------

Returns the dispatch vector of the SICStus runtime.

Description
-----------

This function can be called from any thread.

   This function is special in that it is not accessed through the
dispatch vector; instead, it is exported in the ordinary manner from the
SICStus runtime dynamic library ('sprt4-4-1.dll' under Windows and,
typically, 'libsprt4-4-1.so' under UNIX).

   The address of this function is typically obtained by linking to the
SICStus runtime library or, when using multiple SICStus runtimes, by a
call to 'SP_load_sicstus_run_time()'.

See Also
--------

*note Multiple SICStus Runtimes::.


File: sicstus.info,  Node: cpg-ref-SP_get_float,  Next: cpg-ref-SP_get_functor,  Prev: cpg-ref-SP_get_dispatch,  Up: cpg-bif

12.3.31 'SP_get_float()'
------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     int
     SP_get_float(SP_term_ref term,
                  double *f);

   Assigns to '*f' the float that corresponds to a Prolog number.

   If the term is an integer that does not fit in a 'double', then the
call will fail.

Arguments
---------

TERM
     The SP_term_ref holding the value

F
     The location to assign

Return Value
------------

Zero if the conversion fails (as far as failure can be detected), and a
nonzero value otherwise.

See Also
--------

*note Accessing Prolog Terms::.


File: sicstus.info,  Node: cpg-ref-SP_get_functor,  Next: cpg-ref-SP_get_integer,  Prev: cpg-ref-SP_get_float,  Up: cpg-bif

12.3.32 'SP_get_functor()'
--------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     int
     SP_get_functor(SP_term_ref term,
                    SP_atom *name,
                    int *arity);

   Assigns to '*name' and '*arity' the canonical representation and
arity of the principal functor of a Prolog compound term.  If the value
of 'term' is an atom, then that atom is assigned to '*name' and 0 is
assigned to '*arity'.  This is similar to calling 'functor/3' with the
first argument bound to a compound term or an atom and the second and
third arguments unbound.

Arguments
---------

TERM
     The SP_term_ref holding the value

NAME
     The location to assign to the functor name

ARITY
     The location to assign to the functor arity

Return Value
------------

Zero if the conversion fails (as far as failure can be detected), and a
nonzero value otherwise.

See Also
--------

*note Accessing Prolog Terms::.


File: sicstus.info,  Node: cpg-ref-SP_get_integer,  Next: cpg-ref-SP_get_integer_bytes,  Prev: cpg-ref-SP_get_functor,  Up: cpg-bif

12.3.33 'SP_get_integer()'
--------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     int
     SP_get_integer(SP_term_ref term,
                    SP_integer *i);

   Assigns to '*i' the integer that corresponds to a Prolog number.  The
value must fit in '*i' for the operation to succeed.

Arguments
---------

TERM
     The SP_term_ref holding the value

I
     The location to assign

Return Value
------------

Zero if the conversion fails (as far as failure can be detected), and a
nonzero value otherwise.

See Also
--------

*note Accessing Prolog Terms::.


File: sicstus.info,  Node: cpg-ref-SP_get_integer_bytes,  Next: cpg-ref-SP_get_list,  Prev: cpg-ref-SP_get_integer,  Up: cpg-bif

12.3.34 'SP_get_integer_bytes()'
--------------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     int
     SP_get_integer_bytes(SP_term_ref term,
                          void *buf,
                          size_t *pbuf_size,
                          int native);

   Extracts from 'term' an an arbitrarily sized integer.

Arguments
---------

TERM
     The SP_term_ref holding the integer

BUF
     The buffer receiving the integer

PBUF_SIZE
     Should point at the size of 'buf'

NATIVE
     See the description below

Return Value
------------

Zero if the conversion fails (as far as failure can be detected), and a
nonzero value otherwise.

Description
-----------

In the following, assume that the integer referred to by 'term' requires
a minimum of SIZE bytes to store (in twos-complement representation).

  1. If 'term' does not refer to a Prolog integer, zero is returned and
     the other arguments are ignored.
  2. If '*pbuf_size' is less than SIZE, then '*pbuf_size' is updated to
     SIZE and zero is returned.  The fact that '*pbuf_size' has changed
     can be used to distinguish insufficient buffer size from other
     possible errors.  By calling 'SP_get_integer_bytes()' with
     '*pbuf_size' set to zero, you can determine the buffer size needed;
     in this case, 'buf' is ignored.
  3. '*pbuf_size' is set to SIZE.
  4. If 'native' is zero, 'buf' is filled with the twos complement
     representation of the integer, with the least significant bytes
     stored at lower indices in 'buf'.  Note that all of 'buf' is
     filled, even though only SIZE bytes was needed.
  5. If 'native' is non-zero, 'buf' is assumed to point at a native
     '*pbuf_size' byte integral type.  On most platforms, native integer
     sizes of two (16-bit), four (32 bit) and eight (64 bytes) bytes are
     supported.  Note that '*pbuf_size == 1', which would correspond to
     'signed char', is _not_ supported with 'native'.
  6. If an unsupported size is used with 'native', zero is returned.

Examples
--------

The following example gets a Prolog integer into a (presumably 64 bit)
'long long' C integer.
     {
       long long x; // C99, GCC supports this
       size_t sz = sizeof x;
       if (!SP_get_integer_bytes(tr, &x, &sz, 1)) // 1 for native
         .. error handling ..
       .. use x .. // sz may have decreased
     }

See Also
--------

*note Accessing Prolog Terms::.


File: sicstus.info,  Node: cpg-ref-SP_get_list,  Next: cpg-ref-SP_get_list_codes,  Prev: cpg-ref-SP_get_integer_bytes,  Up: cpg-bif

12.3.35 'SP_get_list()'
-----------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     int
     SP_get_list(SP_term_ref term,
                 SP_term_ref head,
                 SP_term_ref tail);

   Assigns to 'head' and 'tail' the head and tail of a Prolog list.

Arguments
---------

TERM
     The SP_term_ref holding the list

HEAD
     The SP_term_ref to be assigned the head

TAIL
     The SP_term_ref to be assigned the tail

Return Value
------------

Zero if the conversion fails (as far as failure can be detected), and a
nonzero value otherwise.

See Also
--------

*note Accessing Prolog Terms::.


File: sicstus.info,  Node: cpg-ref-SP_get_list_codes,  Next: cpg-ref-SP_get_list_n_bytes,  Prev: cpg-ref-SP_get_list,  Up: cpg-bif

12.3.36 'SP_get_list_codes()'
-----------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     int
     SP_get_list_codes(SP_term_ref term,
                       char const **s);

   Assigns to '*s' a zero-terminated array containing an encoded string
that corresponds to the given Prolog code-list.  The array is subject to
reuse by other support functions, so if the value is going to be used on
a more than temporary basis, it must be moved elsewhere.

Arguments
---------

TERM
     The SP_term_ref holding the code-list

S
     The location to assign

Return Value
------------

Zero if the conversion fails (as far as failure can be detected), and a
nonzero value otherwise.

See Also
--------

*note Accessing Prolog Terms::.


File: sicstus.info,  Node: cpg-ref-SP_get_list_n_bytes,  Next: cpg-ref-SP_get_list_n_codes,  Prev: cpg-ref-SP_get_list_codes,  Up: cpg-bif

12.3.37 'SP_get_list_n_bytes()'
-------------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     int
     SP_get_list_n_bytes(SP_term_ref term,
                         SP_term_ref tail,
                         size_t n,
                         size_t *w,
                         unsigned char *s);

   Copies into the byte array 's' the initial elements of 'term', which
should hold a list of integers in the range [0,255], so that at most 'n'
bytes are used.  The number of bytes actually written is assigned to
'*w'.  'tail' is set to the remainder of the list.  The array 's' must
have room for at least 'n' bytes.

Arguments
---------

TERM
     The SP_term_ref holding the list

TAIL
     The SP_term_ref to be assigned the remainder of the list

N
     Max number of bytes to use

W
     Location to assign to number of bytes actually used

S
     The location to assign to the encoded string

Return Value
------------

Zero if the conversion fails (as far as failure can be detected), and a
nonzero value otherwise.

See Also
--------

*note Accessing Prolog Terms::.


File: sicstus.info,  Node: cpg-ref-SP_get_list_n_codes,  Next: cpg-ref-SP_get_number_codes,  Prev: cpg-ref-SP_get_list_n_bytes,  Up: cpg-bif

12.3.38 'SP_get_list_n_codes()'
-------------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     int
     SP_get_list_n_codes(SP_term_ref term,
                         SP_term_ref tail,
                         size_t n,
                         size_t *w,
                         char *s);

   Copies into 's' the encoded string representing the character codes
in the initial elements of list 'term', so that at most 'n' bytes are
used.  The number of bytes actually written is assigned to '*w'.  'tail'
is set to the remainder of the list.  The array 's' must have room for
at least 'n' bytes.

   *Please note*: The array 's' is never 'NUL'-terminated.  Any zero
character codes in the list 'term' will be converted to the overlong UTF-8
sequence '0xC0 0x80'.

Arguments
---------

TERM
     The SP_term_ref holding the code-list

TAIL
     The SP_term_ref to be assigned the remainder of the list

N
     Max number of bytes to use

W
     Location to assign to number of bytes actually used

S
     The location to assign to the encoded string

Return Value
------------

Zero if the conversion fails (as far as failure can be detected), and a
nonzero value otherwise.

See Also
--------

*note Accessing Prolog Terms::.


File: sicstus.info,  Node: cpg-ref-SP_get_number_codes,  Next: cpg-ref-SP_get_stream_counts,  Prev: cpg-ref-SP_get_list_n_codes,  Up: cpg-bif

12.3.39 'SP_get_number_codes()'
-------------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     int
     SP_get_number_codes(SP_term_ref term,
                         char const **s);

   Assigns to '*s' a zero-terminated array of characters corresponding
to the printed representation of a Prolog number.  The array is subject
to reuse by other support functions, so if the value is going to be used
on a more than temporary basis, it must be moved elsewhere.

Arguments
---------

TERM
     The SP_term_ref holding the number

S
     The location to assign to the array

Return Value
------------

Zero if the conversion fails (as far as failure can be detected), and a
nonzero value otherwise.

See Also
--------

*note Accessing Prolog Terms::.


File: sicstus.info,  Node: cpg-ref-SP_get_stream_counts,  Next: cpg-ref-SP_get_stream_user_data,  Prev: cpg-ref-SP_get_number_codes,  Up: cpg-bif

12.3.40 'SP_get_stream_counts()'
--------------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     spio_t_error_code
     SP_get_stream_counts(
        SP_stream *stream,
        spio_t_offset *pitem_count,
        spio_t_offset *pnewline_count,
        spio_t_offset *pline_length,
        spio_t_bits options);

   Obtain the stream counters.

Arguments
---------

STREAM
     The stream.

ITEM_COUNT
     If 'pitem_count' is 'NULL' it is not used, otherwise it is used as
     follows.

     On success, '*pitem_count' is assigned to the number of items read
     from an input-only or bidirectional stream or with the number of
     items written to a output-only stream.

     For binary streams, an "item" is a byte, for text streams it is a
     character.

PNEWLINE_COUNT
     If 'pnewline_count' is 'NULL' it is not used, otherwise it is used
     as follows.

     On success '*pnewline_count' is assigned to the number of newlines
     read from an input-only or bidirectional text stream or with the
     number of newlines written to a output-only text stream.

     For binary streams, '*pnewline_count' is set to zero.

PLINE_LENGTH
     If 'pline_length' is 'NULL' it is not used, otherwise it is used as
     follows.

     On success, '*pline_length' is assigned to the number of characters
     read on the current line from an input-only or bidirectional text
     stream or with the characters written on the current line to a
     output-only text stream.

     For binary streams, '*pline_length' is set to zero.

OPTIONS
     The following bits can be set:

     'SP_GET_STREAM_COUNTS_OPTION_READ'
          Return the real input counts of a read-only or bidirectional
          stream.

     'SP_GET_STREAM_COUNTS_OPTION_WRITE'
          Return the real output counts of a write-only stream.

          Currently, the call will fail with 'SPIO_E_NOT_SUPPORTED' if
          the stream is bidirectional and
          'SP_GET_STREAM_COUNTS_OPTION_WRITE' is specified.  This is
          because there is only one set of counters for each stream and
          these are used to count in the input direction of
          bidirectional streams.  This may be changed in a future
          release.

     At most one of 'SP_GET_STREAM_COUNTS_OPTION_READ' and
     'SP_GET_STREAM_COUNTS_OPTION_WRITE' can be specified.  If neither
     is specified then default behavior is as follows
        * If 'stream' is interactive, a common set of counts shared by
          all interactive streams is returned.

        * If 'stream' is write-only, the output counts are returned.

        * Otherwise, the 'stream' is read-only or bidirectional and the
          input counts are returned.

Return Value
------------

On success, 'SPIO_S_NOERR' or some other success code is returned.

   On failure, returns a SPIO error code.  Error codes with special
meaning for 'SP_get_stream_counts()':

'SPIO_E_NOT_READ'
     'SP_GET_STREAM_COUNTS_OPTION_READ' was specified but 'stream' is
     not an input stream.

'SPIO_E_NOT_WRITE'
     'SP_GET_STREAM_COUNTS_OPTION_WRITE' was specified but 'stream' is
     not an output stream.

'SPIO_E_NOT_SUPPORTED'
     'SP_GET_STREAM_COUNTS_OPTION_WRITE' was specified but 'stream' is a
     bidirectional stream.

Description
-----------

There is only one set of counters for each stream.  For a bidirectional
stream, these counters only count in the input direction and the output
direction does not affect the counts.

   There is a common set of stream counters for all interactive streams.
By default, these will be returned if 'stream' is interactive instead of
the real counts.  This behavior can be changed with the 'options'
argument, see above.

See Also
--------

*note Prolog Streams::.


File: sicstus.info,  Node: cpg-ref-SP_get_stream_user_data,  Next: cpg-ref-SP_get_string,  Prev: cpg-ref-SP_get_stream_counts,  Up: cpg-bif

12.3.41 'SP_get_stream_user_data()'
-----------------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     spio_t_error_code
     SP_get_stream_user_data(
        SP_stream *stream,
        void const *user_class,
        void **puser_data);

   Get the user data of a user defined stream of a particular class.

Arguments
---------

STREAM
     An arbitrary stream.  It is legal, and often useful, to call
     'SP_get_stream_user_data()' on a stream even if it is not known
     whether the stream is in fact a user defined stream of a particular
     class.

PUSER_DATA
     On success, '*puser_data' will be set to the 'user_data' value used
     when the stream was created.

Return Value
------------

On success, '*puser_data' is assigned and 'SPIO_S_NOERR' or some other
success code is returned.

   On failure, e.g. if the stream was not created with this
'user_class', an error code is returned.

Description
-----------

This function is used in order to recognize streams of a particular type
(or "class").  At the same time as it verifies the type of stream it
also returns the 'user_data' which gives the caller a handle to the
internal state of the user defined stream.

   The following sample illustrates how all streams of a particular
class can be found and closed.  This function mimics the behavior of the
'SP_FCLOSE_OPTION_USER_STREAMS' option to 'SP_fclose', see *note
cpg-ref-SP_fclose::.

     spio_t_error_code close_streams(void const *user_class, int force)
     {
       spio_t_error_code ecode = SPIO_E_ERROR;
       SP_stream *stream;
       SP_stream *next_stream;
       void *user_data;
       spio_t_bits fclose_options = 0;

       if (force) fclose_options |= SP_FCLOSE_OPTION_FORCE;

       stream = NULL;           /* means start of list of stream */
       do
         {
           /* Note: We need to do this before closing stream */
           ecode = SP_next_stream(stream, &next_stream);
           if (SPIO_FAILED(ecode)) goto barf;

           if (stream != NULL)
             {
               if (SPIO_SUCCEEDED(SP_get_stream_user_data(stream, user_class, &user_data)))
                 {
                   /* This is the right class of stream, close it */
                   ecode = SP_fclose(stream, fclose_options);
                   if (SPIO_FAILED(ecode))
                     {
                       if (!force) goto barf; /* ignore error if force */
                     }
                 }
             }
           stream = next_stream;
         }
       while (stream != NULL);

       return SPIO_S_NOERR;

      barf:
       return ecode;
     }

See Also
--------

*note cpg-ref-SP_create_stream::.  *note Defining a New Stream::.


File: sicstus.info,  Node: cpg-ref-SP_get_string,  Next: cpg-ref-SP_getenv,  Prev: cpg-ref-SP_get_stream_user_data,  Up: cpg-bif

12.3.42 'SP_get_string()'
-------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     int
     SP_get_string(SP_term_ref term,
                   char const **s);

   Assigns to '*s' a pointer to the encoded string representing the name
of a Prolog atom.  This string must _not_ be modified by the calling
function.

Arguments
---------

TERM
     The SP_term_ref holding the value

S
     The location to assign

Return Value
------------

Zero if the conversion fails (as far as failure can be detected), and a
nonzero value otherwise.

See Also
--------

*note Accessing Prolog Terms::.


File: sicstus.info,  Node: cpg-ref-SP_getenv,  Next: cpg-ref-SP_initialize,  Prev: cpg-ref-SP_get_string,  Up: cpg-bif

12.3.43 'SP_getenv()'
---------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     void *
     SP_getenv(const char *name);

   Retrieves the value of the system property, or if no such system
property exists the environment variable, with the given name.

   The memory for the returned value is managed by Prolog and should be
freed with 'SP_free()'.

Arguments
---------

NAME
     The name of the system property or environment variable.

Return Value
------------

The value of the system property or environment variable, if set.
'NULL' if neither a system property nor an environment variable of that
name exists, or if an error occurs.

See Also
--------

*note System Properties and Environment Variables::.


File: sicstus.info,  Node: cpg-ref-SP_initialize,  Next: cpg-ref-SP_is_atom,  Prev: cpg-ref-SP_getenv,  Up: cpg-bif

12.3.44 'SP_initialize()'   macro
---------------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     int
     SP_initialize(int argc,
     	      char **argv,
     	      SP_options *options);

   Initializes the Prolog engine.

Arguments
---------

ARGC
     The number of elements of the 'argv' vector.

ARGV
     A vector of strings that can be accessed by 'prolog_flag(argv,X)'.
     This argument is copied by 'SP_initialize()' so it can be discarded
     by the caller.  May be passed as 'NULL' if 'argc' is zero.

     Each entry should be an encoded string, i.e. encoded using 'UTF-8'.
     This may not be the encoding used by the operating system when
     invoking 'main()'.  A better alternative is to pass zero for
     'argc', NULL for 'argv' and use 'SP_set_argv()' to pass the 'argv'
     entries.

OPTIONS
     A pointer to an option block.  In most cases it suffice to pass
     'NULL'.

     An option block can be initialized with
     'SP_OPTIONS_STATIC_INITIALIZER' and its 'options' field set to
     point to a 'SP_option' array.  Each 'SP_option' is a typed value.
     Currently the only type is 'SP_option_type_system_property', for
     setting initial system properties (*note System Properties and
     Environment Variables::).

     To pass the system properties 'foo' and 'bar', with values 'true'
     and 'hello', respectively, you would do something like this


            ...
            int res;
            SP_options opts = SP_OPTIONS_STATIC_INITIALIZER;
            SP_option props[2];

            opts.noptions = 0;
            opts.options = &props;
            props[opts.noptions].type = SP_option_type_system_property;
            props[opts.noptions].u.prop.key = "foo";
            props[opts.noptions].u.prop.value = "true";
            opts.noptions++;

            props[opts.noptions].type = SP_option_type_system_property;
            props[opts.noptions].u.prop.key = "bar";
            props[opts.noptions].u.prop.value = "hello";
            opts.noptions++;

            res = SP_initialize(argv, argc, &opts);
            if (res != SP_SUCCESS) {
                 ... /* error handling */
            }
            ...


Return Value
------------

'SP_SUCCESS' if initialization was successful.  If initialization was
successful, further calls to 'SP_initialize()' will be no-ops (and
return 'SP_SUCCESS').

Description
-----------

This must be done before any interface functions are called, except
those annotated as "[preinit]".  The function will allocate data areas
used by Prolog, initialize command line arguments so that they can be
accessed by the 'argv' Prolog flag, and load the Runtime Library.

See Also
--------

*note Initializing the Prolog Engine::.


File: sicstus.info,  Node: cpg-ref-SP_is_atom,  Next: cpg-ref-SP_is_atomic,  Prev: cpg-ref-SP_initialize,  Up: cpg-bif

12.3.45 'SP_is_atom()'
----------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     int
     SP_is_atom(SP_term_ref term);

   Determines whether the value of 'term' is a Prolog atom.

Arguments
---------

TERM
     The SP_term_ref to be inspected

Return Value
------------

1 if it is a atom and 0 otherwise.

See Also
--------

*note Testing Prolog Terms::.


File: sicstus.info,  Node: cpg-ref-SP_is_atomic,  Next: cpg-ref-SP_is_compound,  Prev: cpg-ref-SP_is_atom,  Up: cpg-bif

12.3.46 'SP_is_atomic()'
------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     int
     SP_is_atomic(SP_term_ref term);

   Determines whether the value of 'term' is a Prolog atomic term.

Arguments
---------

TERM
     The SP_term_ref to be inspected

Return Value
------------

1 if it is an atomic term and 0 otherwise.

See Also
--------

*note Testing Prolog Terms::.


File: sicstus.info,  Node: cpg-ref-SP_is_compound,  Next: cpg-ref-SP_is_float,  Prev: cpg-ref-SP_is_atomic,  Up: cpg-bif

12.3.47 'SP_is_compound()'
--------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     int
     SP_is_compound(SP_term_ref term);

   Determines whether the value of 'term' is a Prolog compound term.

Arguments
---------

TERM
     The SP_term_ref to be inspected

Return Value
------------

1 if it is a compound term and 0 otherwise.

See Also
--------

*note Testing Prolog Terms::.


File: sicstus.info,  Node: cpg-ref-SP_is_float,  Next: cpg-ref-SP_is_integer,  Prev: cpg-ref-SP_is_compound,  Up: cpg-bif

12.3.48 'SP_is_float()'
-----------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     int
     SP_is_float(SP_term_ref term);

   Determines whether the value of 'term' is a Prolog float.

Arguments
---------

TERM
     The SP_term_ref to be inspected

Return Value
------------

1 if it is a float and 0 otherwise.

See Also
--------

*note Testing Prolog Terms::.


File: sicstus.info,  Node: cpg-ref-SP_is_integer,  Next: cpg-ref-SP_is_list,  Prev: cpg-ref-SP_is_float,  Up: cpg-bif

12.3.49 'SP_is_integer()'
-------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     int
     SP_is_integer(SP_term_ref term);

   Determines whether the value of 'term' is a Prolog integer.

Arguments
---------

TERM
     The SP_term_ref to be inspected

Return Value
------------

1 if it is a integer and 0 otherwise.

   *Please note*: 'SP_is_integer()' will return true also for integers
that are too large to be passed to 'SP_get_integer()'.  In this case you
will need to use 'SP_get_integer_bytes()' to obtain the value.

See Also
--------

*note Testing Prolog Terms::.


File: sicstus.info,  Node: cpg-ref-SP_is_list,  Next: cpg-ref-SP_is_number,  Prev: cpg-ref-SP_is_integer,  Up: cpg-bif

12.3.50 'SP_is_list()'
----------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     int
     SP_is_list(SP_term_ref term);

   Determines whether the value of 'term' is a Prolog list cell, i.e. a
compound term with functor './2'.

Arguments
---------

TERM
     The SP_term_ref to be inspected

Return Value
------------

1 if the argument is a list cell and 0 otherwise.

See Also
--------

*note Testing Prolog Terms::.


File: sicstus.info,  Node: cpg-ref-SP_is_number,  Next: cpg-ref-SP_is_variable,  Prev: cpg-ref-SP_is_list,  Up: cpg-bif

12.3.51 'SP_is_number()'
------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     int
     SP_is_number(SP_term_ref term);

   Determines whether the value of 'term' is a Prolog number.

Arguments
---------

TERM
     The SP_term_ref to be inspected

Return Value
------------

1 if it is a number and 0 otherwise.

See Also
--------

*note Testing Prolog Terms::.


File: sicstus.info,  Node: cpg-ref-SP_is_variable,  Next: cpg-ref-SP_load,  Prev: cpg-ref-SP_is_number,  Up: cpg-bif

12.3.52 'SP_is_variable()'
--------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     int
     SP_is_variable(SP_term_ref term);

   Determines whether the value of 'term' is a Prolog variable.

Arguments
---------

TERM
     The SP_term_ref to be inspected

Return Value
------------

1 if it is a variable and 0 otherwise.

See Also
--------

*note Testing Prolog Terms::.


File: sicstus.info,  Node: cpg-ref-SP_load,  Next: cpg-ref-SP_load_sicstus_run_time,  Prev: cpg-ref-SP_is_variable,  Up: cpg-bif

12.3.53 'SP_load()'
-------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     int
     SP_load(char const *filename);


   Calls 'load_files/1'.

Arguments
---------

FILENAME
     The file name, which is treated as a Prolog atom.

Return Value
------------

See 'SP_query_cut_fail()'.

See Also
--------

*note Loading Prolog Code::.


File: sicstus.info,  Node: cpg-ref-SP_load_sicstus_run_time,  Next: cpg-ref-SP_malloc,  Prev: cpg-ref-SP_load,  Up: cpg-bif

12.3.54 'SP_load_sicstus_run_time()'
------------------------------------

Synopsis
--------

  since release 4.0.3

     #include <sicstus/sicstus.h>

     int
     SP_load_sicstus_run_time(SP_get_dispatch_type **pfuncp,
                              void *reserved);


Arguments
---------

PFUNCP
     On success the address of the 'SP_get_dispatch()' function of the
     newly loaded SICStus runtime is stored at this address.

RESERVED
     Reserved, should be 'NULL'.

Return Value
------------

Positive if a new runtime could be loaded, non-positive on error.
*Please note*: The return value was incorrectly described prior to
SICStus Prolog 4.0.5.  Also note that, for historical reasons, the
meaning of the return value is different from the convention used by
most of the SICStus Prolog C API.

Description
-----------

'SP_load_sicstus_run_time()' loads a new SICStus runtime.

   As a special case, if 'SP_load_sicstus_run_time()' is called from a
SICStus runtime that has not been initialized (with 'SP_initialize()')
and that has not previously been loaded as the result of calling
'SP_load_sicstus_run_time()', no new runtime is loaded.  Instead, the
'SP_get_dispatch()' of the runtime itself is returned.  In particular,
the first time 'SP_load_sicstus_run_time()' is called on the initial
SICStus runtime, and if this happens before the initial SICStus runtime
is initialized, no new runtime is loaded.

   Calling 'SP_load_sicstus_run_time()' from a particular runtime can be
done from any thread.

   An application that links statically with the SICStus runtime should
not call 'SP_load_sicstus_run_time()'.

   You should not use pre-linked foreign resources when using multiple
SICStus runtimes in the same process.

   For an example of loading and using multiple SICStus runtimes, see
'library/jasper/spnative.c' that implements this functionality for the
Java interface Jasper.

See Also
--------

*note Multiple SICStus Runtimes::.


File: sicstus.info,  Node: cpg-ref-SP_malloc,  Next: cpg-ref-SP_mutex_lock,  Prev: cpg-ref-SP_load_sicstus_run_time,  Up: cpg-bif

12.3.55 'SP_malloc()'
---------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     void *
     SP_malloc(size_t size);

   Allocates a block of at least 'size' bytes.

Arguments
---------

SIZE
     Requested number of bytes.

Return Value
------------

'NULL' on failure, the pointer otherwise.

See Also
--------

*Note OS Memory Management::.


File: sicstus.info,  Node: cpg-ref-SP_mutex_lock,  Next: cpg-ref-SP_mutex_unlock,  Prev: cpg-ref-SP_malloc,  Up: cpg-bif

12.3.56 'SP_mutex_lock()'
-------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     static SP_mutex volatile MUTEX = SP_MUTEX_INITIALIZER;

     int
     SP_mutex_lock(SP_mutex *pmx);

   Locks the mutex.

Return Value
------------

Zero on error, non-zero on success.

Examples
--------

     static SP_mutex volatile my_mutex = SP_MUTEX_INITIALIZER;
     // only access this counter with my_mutex locked
     int volatile protected_counter = 0;

     // returns the new value of protected_counter
     int increment_the_counter(void)
     {
       int new_value;

       if(SP_mutex_lock(&my_mutex) == 0) goto error_handling;
       // No other thread can update protected_counter here
       new_value = protected_counter+1;
       protected_counter = new_value;
       if (SP_mutex_unlock(&my_mutex) == 0) goto error_handling;
       return new_value;

     error_handling:
       ...
     }

See Also
--------

*note OS Threads::.


File: sicstus.info,  Node: cpg-ref-SP_mutex_unlock,  Next: cpg-ref-SP_new_term_ref,  Prev: cpg-ref-SP_mutex_lock,  Up: cpg-bif

12.3.57 'SP_mutex_unlock()'
---------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     static SP_mutex volatile MUTEX = SP_MUTEX_INITIALIZER;

     int
     SP_mutex_unlock(SP_mutex *pmx);

   Unlocks the mutex.

Return Value
------------

Zero on error, non-zero on success.

Description
-----------

The number of unlocks must match the number of locks and only the thread
that performed the lock can unlock the mutex.

Examples
--------

See the example of 'SP_mutex_lock()'.

See Also
--------

*note OS Threads::.


File: sicstus.info,  Node: cpg-ref-SP_new_term_ref,  Next: cpg-ref-SP_next_solution,  Prev: cpg-ref-SP_mutex_unlock,  Up: cpg-bif

12.3.58 'SP_new_term_ref()'
---------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     SP_term_ref
     SP_new_term_ref(void);

   Creates a new SP_term_ref, initialized to the empty list '[]'.

Return Value
------------

The new SP_term_ref.

See Also
--------

*note Creating and Manipulating SP_term_refs::.


File: sicstus.info,  Node: cpg-ref-SP_next_solution,  Next: cpg-ref-SP_next_stream,  Prev: cpg-ref-SP_new_term_ref,  Up: cpg-bif

12.3.59 'SP_next_solution()'
----------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     int
     SP_next_solution(SP_qid query);

   Look for the next solution to the given query.

Arguments
---------

QUERY
     The query, created by 'SP_open_query()'.

Return Value
------------

'SP_SUCCESS' for success, 'SP_FAILURE' for failure, 'SP_ERROR' if an
error condition occurred.

Description
-----------

This will cause the Prolog engine to backtrack over any current solution
of an open query and look for a new one.  The given argument must be the
innermost query that is still open, i.e. it must not have been
terminated explicitly by 'SP_close_query()' or 'SP_cut_query()'.  Only
when the return value is 'SP_SUCCESS' are the values in the query
arguments valid, and will remain so until backtracking into this query
or an enclosing one.

See Also
--------

*note Finding Multiple Solutions of a Call::.


File: sicstus.info,  Node: cpg-ref-SP_next_stream,  Next: cpg-ref-SP_open_query,  Prev: cpg-ref-SP_next_solution,  Up: cpg-bif

12.3.60 'SP_next_stream()'
--------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     spio_t_error_code
     SP_next_stream(SP_stream *stream, SP_stream **pnext);

   Iterate through all Prolog streams.

Arguments
---------

STREAM
     If this is 'NULL' then '*pnext' is set to the first stream in the
     list of streams.  If this is non-'NULL' then the stream following
     STREAM in the list of streams is returned in '*pnext'.

PNEXT
     The returned stream is returned in '*pnext'.

Return Value
------------

On success, '*pnext' is assigned, and 'SPIO_S_NOERR' or some other
success code is returned.  You should use the 'SPIO_FAILED()' macro to
determine if the return value signifies failure or success.

   When 'stream' is the last stream '*pnext' is set to 'NULL'.

   This function can be used to iterate over all Prolog streams.  One
way to use this is together with 'SP_get_stream_user_data' to find all
currently open user defined streams of a particular type.

See Also
--------

*note SICStus Streams::.


File: sicstus.info,  Node: cpg-ref-SP_open_query,  Next: cpg-ref-SP_pred,  Prev: cpg-ref-SP_next_stream,  Up: cpg-bif

12.3.61 'SP_open_query()'
-------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     SP_qid
     SP_open_query(SP_pred_ref predicate,
                   SP_term_ref arg1,
                   ...);

   Sets up a query for use by 'SP_next_solution()', 'SP_close_query()',
'SP_cut_query()'.

Arguments
---------

PREDICATE
     The predicate to call.

ARG1...
     The arguments to pass.

Return Value
------------

The query identifier if successful, otherwise 0,

Description
-----------

Note that if a new query is opened while another is already open, the
new query must be terminated before exploring the solutions of the old
one.  That is, queries must be strictly nested.

See Also
--------

*note Finding Multiple Solutions of a Call::.


File: sicstus.info,  Node: cpg-ref-SP_pred,  Next: cpg-ref-SP_predicate,  Prev: cpg-ref-SP_open_query,  Up: cpg-bif

12.3.62 'SP_pred()'
-------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     SP_pred_ref
     SP_pred(SP_atom name_atom,
     	SP_integer arity,
     	SP_atom module_atom);

   Returns a pointer to the predicate definition.

Arguments
---------

NAME_ATOM
     Predicate name.

ARITY
     Arity.

MODULE_ATOM
     Module name.

Return Value
------------

The reference if the predicate is found, 'NULL' otherwise with error
code 'PRED_NOT_FOUND'.

Description
-----------

Faster than 'SP_predicate()'.

See Also
--------

*note Calling Prolog from C::.


File: sicstus.info,  Node: cpg-ref-SP_predicate,  Next: cpg-ref-SP_printf,  Prev: cpg-ref-SP_pred,  Up: cpg-bif

12.3.63 'SP_predicate()'
------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     SP_pred_ref
     SP_predicate(char *name_string,
     	     SP_integer arity,
     	     char *module_string);

   Returns a pointer to the predicate definition.

Arguments
---------

NAME_STRING
     Predicate name.

ARITY
     Arity.

MODULE_STRING
     Module name, optional.  'NULL' and '""' (the empty string) both
     denote the type-in module (*note ref-mod-tyi::).

Return Value
------------

The reference if the predicate is found, 'NULL' otherwise with error
code 'PRED_NOT_FOUND' or, if one of the string arguments are malformed,
'INV_STRING'.

Description
-----------

Slower than 'SP_pred()'.

See Also
--------

*note Calling Prolog from C::.


File: sicstus.info,  Node: cpg-ref-SP_printf,  Next: cpg-ref-SP_put_address,  Prev: cpg-ref-SP_predicate,  Up: cpg-bif

12.3.64 'SP_printf()'
---------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     spio_t_error_code
     SP_printf(
        char const *fmt,
        ...);

   Same as 'SP_fprintf(SP_stdout, fmt, ...)'.

See Also
--------

*note cpg-ref-SP_fprintf::.


File: sicstus.info,  Node: cpg-ref-SP_put_address,  Next: cpg-ref-SP_put_atom,  Prev: cpg-ref-SP_printf,  Up: cpg-bif

12.3.65 'SP_put_address()'
--------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     int
     SP_put_address(SP_term_ref term,
                    void *pointer);

   Assigns to 'term' a reference to a Prolog integer representing a
pointer.

Arguments
---------

TERM
     The SP_term_ref to be assigned

POINTER
     The pointer

Return Value
------------

Zero if the conversion fails (as far as failure can be detected), and a
nonzero value otherwise.

See Also
--------

*note Creating Prolog Terms::.


File: sicstus.info,  Node: cpg-ref-SP_put_atom,  Next: cpg-ref-SP_put_byte,  Prev: cpg-ref-SP_put_address,  Up: cpg-bif

12.3.66 'SP_put_atom()'
-----------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     int
     SP_put_atom(SP_term_ref term,
                 SP_atom atom);

   Assigns to 'term' a reference to a Prolog atom.

Arguments
---------

TERM
     The SP_term_ref to be assigned

ATOM
     The atom

Return Value
------------

Zero if the conversion fails (as far as failure can be detected), and a
nonzero value otherwise.

See Also
--------

*note Creating Prolog Terms::.


File: sicstus.info,  Node: cpg-ref-SP_put_byte,  Next: cpg-ref-SP_put_bytes,  Prev: cpg-ref-SP_put_atom,  Up: cpg-bif

12.3.67 'SP_put_byte()'
-----------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     spio_t_error_code
     SP_put_byte(
       SP_stream *stream,
       int item);

   Write a byte to a binary stream.

Arguments
---------

STREAM
     The stream.  Must be a binary stream open for output.

Return Value
------------

On success, the written byte will be returned, cast to a
'spio_t_error_code'.  The value returned on successful return will never
be negative.

   On failure, returns an error code, recognizable with 'SPIO_FAILED()'.
Error codes are always negative.

Description
-----------

Note that 'SP_put_byte()' is implemented as a macro and may evaluate the
arguments more than once.  For the same reason, no error checking is
performed on the arguments.

See Also
--------

*note cpg-ref-SP_put_code::.  *note Prolog Streams::.


File: sicstus.info,  Node: cpg-ref-SP_put_bytes,  Next: cpg-ref-SP_put_code,  Prev: cpg-ref-SP_put_byte,  Up: cpg-bif

12.3.68 'SP_put_bytes()'
------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     spio_t_error_code
     SP_put_bytes(
       SP_stream *stream,
       spio_t_uint8 const *bytes,
       size_t byte_count,
       spio_t_bits options);

   Write several bytes to a binary stream.

Arguments
---------

STREAM
     The stream.  Must be a binary stream open for output.

BYTES
     A pointer to the data to write.

BYTE_COUNT
     The number of bytes to write.

OPTIONS
     The following bits can be set:

     'SP_PUT_BYTES_OPTION_NONBLOCKING'
          Write the bytes without blocking.

Return Value
------------

On success, all data has been written and 'SPIO_S_NOERR' or some other
success code returned.

   On failure, returns an error code without transferring any data.
Error codes with special meaning for 'SP_put_bytes()':

'SPIO_E_WOULD_BLOCK'
     'SP_PUT_BYTES_OPTION_NONBLOCKING' was set but the operation would
     block.

Other error codes may also be returned.

See Also
--------

*note cpg-ref-SP_put_byte::.  *note Prolog Streams::.


File: sicstus.info,  Node: cpg-ref-SP_put_code,  Next: cpg-ref-SP_put_codes,  Prev: cpg-ref-SP_put_bytes,  Up: cpg-bif

12.3.69 'SP_put_code()'
-----------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     spio_t_error_code
     SP_put_code(
       SP_stream *stream,
       int item);

   Write a character code to a text stream.

Arguments
---------

STREAM
     The stream.  Must be a text stream open for output.

Return Value
------------

On success, the written character will be returned, cast to a
'spio_t_error_code'.  The value returned on successful return will never
be negative.

   On failure, returns an error code, recognizable with 'SPIO_FAILED()'.
Error codes are always negative.

Description
-----------

Note that 'SP_put_code()' is implemented as a macro and may evaluate the
arguments more than once.  For the same reason, no error checking is
performed on the arguments.

See Also
--------

*note cpg-ref-SP_put_byte::.  *note Prolog Streams::.


File: sicstus.info,  Node: cpg-ref-SP_put_codes,  Next: cpg-ref-SP_put_encoded_string,  Prev: cpg-ref-SP_put_code,  Up: cpg-bif

12.3.70 'SP_put_codes()'
------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     spio_t_error_code
     SP_put_codes(
       SP_stream *stream,
       spio_t_wchar const *codes,
       size_t code_count,
       spio_t_bits options);

   Write several codes to a text stream.

Arguments
---------

STREAM
     The stream.  Must be a text stream open for output.

CODES
     A pointer to the data to write.

CODE_COUNT
     The number of character codes to write.  Note that this is the
     number of character codes, not the number of bytes.

OPTIONS
     The following bits can be set:

     'SP_PUT_CODES_OPTION_NONBLOCKING'
          Write the codes without blocking.

Return Value
------------

On success, all data has been written and 'SPIO_S_NOERR' or some other
success code returned.

   On failure, returns an error code without transferring any data.
Error codes with special meaning for 'SP_put_codes()':

'SPIO_E_WOULD_BLOCK'
     'SP_PUT_CODES_OPTION_NONBLOCKING' was set but the operation would
     block.

Other error codes may also be returned.

See Also
--------

*note cpg-ref-SP_put_code::.  *note Prolog Streams::.


File: sicstus.info,  Node: cpg-ref-SP_put_encoded_string,  Next: cpg-ref-SP_put_float,  Prev: cpg-ref-SP_put_codes,  Up: cpg-bif

12.3.71 'SP_put_encoded_string()'
---------------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     spio_t_error_code
     SP_put_encoded_string(
       SP_stream *stream,
       spio_t_wchar const *encoded_string,
       spio_t_bits options);

   Write an encoded string to a text stream.

Arguments
---------

STREAM
     The stream.  Must be a text stream open for output.

ENCODED_STRING
     An encoded string to write.

OPTIONS
     The following bits can be set:

     'SP_PUT_ENCODED_STRING_OPTION_NONBLOCKING'
          Write the string without blocking.

Return Value
------------

On success, all data has been written and 'SPIO_S_NOERR' or some other
success code returned.

   On failure, returns an error code without transferring any data.
Error codes with special meaning for 'SP_put_encoded_string()':

'SPIO_E_WOULD_BLOCK'
     'SP_PUT_ENCODED_STRING_OPTION_NONBLOCKING' was set but the
     operation would block.

Other error codes may also be returned.

See Also
--------

*note cpg-ref-SP_put_codes::.  *note Prolog Streams::.


File: sicstus.info,  Node: cpg-ref-SP_put_float,  Next: cpg-ref-SP_put_functor,  Prev: cpg-ref-SP_put_encoded_string,  Up: cpg-bif

12.3.72 'SP_put_float()'
------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     int
     SP_put_float(SP_term_ref term,
                  double f);

   Assigns to 'term' a reference to a float.

Arguments
---------

TERM
     The SP_term_ref to be assigned

F
     The float (must be finite)

Return Value
------------

Zero if the conversion fails (as far as failure can be detected), and a
nonzero value otherwise.

See Also
--------

*note Creating Prolog Terms::.


File: sicstus.info,  Node: cpg-ref-SP_put_functor,  Next: cpg-ref-SP_put_integer,  Prev: cpg-ref-SP_put_float,  Up: cpg-bif

12.3.73 'SP_put_functor()'
--------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     int
     SP_put_functor(SP_term_ref term,
                    SP_atom name,
                    int arity);

   Assigns to 'term' a reference to a compound term with all the
arguments unbound variables.  If 'arity' is 0, assigns the Prolog atom
whose canonical representation is 'name'.  This is similar to calling
'functor/3' with the first argument unbound and the second and third
arguments bound to an atom and an integer, respectively.

Arguments
---------

TERM
     The SP_term_ref to be assigned

NAME
     The name of the functor

ARITY
     The arity of the functor

Return Value
------------

Zero if the conversion fails (as far as failure can be detected), and a
nonzero value otherwise.

See Also
--------

*note Creating Prolog Terms::.


File: sicstus.info,  Node: cpg-ref-SP_put_integer,  Next: cpg-ref-SP_put_integer_bytes,  Prev: cpg-ref-SP_put_functor,  Up: cpg-bif

12.3.74 'SP_put_integer()'
--------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     int
     SP_put_integer(SP_term_ref term,
                    SP_integer i);

   Assigns to 'term' a reference to an integer.

Arguments
---------

TERM
     The SP_term_ref to be assigned

I
     The integer

Return Value
------------

Zero if the conversion fails (as far as failure can be detected), and a
nonzero value otherwise.

See Also
--------

*note Creating Prolog Terms::.


File: sicstus.info,  Node: cpg-ref-SP_put_integer_bytes,  Next: cpg-ref-SP_put_list,  Prev: cpg-ref-SP_put_integer,  Up: cpg-bif

12.3.75 'SP_put_integer_bytes()'
--------------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     int
     SP_put_integer_bytes(SP_term_ref term,
                          void *buf,
                          size_t buf_size,
                          int native);

   Assigns to 'term' a reference to an arbitrarily sized integer.

Arguments
---------

TERM
     The SP_term_ref to be assigned

BUF
        * If 'native' is zero, 'buf' consists of the 'buf_size' bytes of
          the twos complement representation of the integer.  Less
          significant bytes are at lower indices.
        * If 'native' is nonzero, 'buf' is a pointer to the native
          'buf_size' bytes integer type.

BUF_SIZE
     The size of 'buf'

NATIVE
     See above.  Supported native sizes typically include two, four and
     eight (64bit) bytes.

Return Value
------------

Zero if the conversion fails (as far as failure can be detected), and a
nonzero value otherwise.

See Also
--------

*note Creating Prolog Terms::.


File: sicstus.info,  Node: cpg-ref-SP_put_list,  Next: cpg-ref-SP_put_list_codes,  Prev: cpg-ref-SP_put_integer_bytes,  Up: cpg-bif

12.3.76 'SP_put_list()'
-----------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     int
     SP_put_list(SP_term_ref term);

   Assigns to 'term' a reference to a Prolog list whose head and tail
are both unbound variables.

Arguments
---------

TERM
     The SP_term_ref to be assigned

Return Value
------------

Zero if the conversion fails (as far as failure can be detected), and a
nonzero value otherwise.

See Also
--------

*note Creating Prolog Terms::.


File: sicstus.info,  Node: cpg-ref-SP_put_list_codes,  Next: cpg-ref-SP_put_list_n_bytes,  Prev: cpg-ref-SP_put_list,  Up: cpg-bif

12.3.77 'SP_put_list_codes()'
-----------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     int
     SP_put_list_codes(SP_term_ref term,
                       SP_term_ref tail,
                       char const *s);

   Assigns to 'term' a Prolog code-list represented by the encoded
string 's', prepended to the value of 'tail'.

Arguments
---------

TERM
     The SP_term_ref to be assigned

TAIL
     The tail of the code-list

S
     The string to convert

Return Value
------------

Zero if the conversion fails (as far as failure can be detected), and a
nonzero value otherwise.

See Also
--------

*note Creating Prolog Terms::.


File: sicstus.info,  Node: cpg-ref-SP_put_list_n_bytes,  Next: cpg-ref-SP_put_list_n_codes,  Prev: cpg-ref-SP_put_list_codes,  Up: cpg-bif

12.3.78 'SP_put_list_n_bytes()'
-------------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     int
     SP_put_list_n_bytes(SP_term_ref term,
                         SP_term_ref tail,
                         size_t n,
                         unsigned char const *s);

   Assigns to 'term' a list of integers represented by the first 'n'
elements of the byte array 's', prepended to the value of 'tail'.

Arguments
---------

TERM
     The SP_term_ref to be assigned

TAIL
     The tail of the list

N
     The number of bytes of 's' to convert

S
     The byte array to convert

Return Value
------------

Zero if the conversion fails (as far as failure can be detected), and a
nonzero value otherwise.

See Also
--------

*note Creating Prolog Terms::.


File: sicstus.info,  Node: cpg-ref-SP_put_list_n_codes,  Next: cpg-ref-SP_put_number_codes,  Prev: cpg-ref-SP_put_list_n_bytes,  Up: cpg-bif

12.3.79 'SP_put_list_n_codes()'
-------------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     int
     SP_put_list_n_codes(SP_term_ref term,
                         SP_term_ref tail,
                         size_t n,
                         char const *s);

   Assigns to 'term' a Prolog code-list represented by the first 'n'
*bytes* of the encoded string 's', prepended to the value of 'tail'.

   *Please note*: Some characters may be encoded using more than one
byte so the number of characters may be less than 'n'.

Arguments
---------

TERM
     The SP_term_ref to be assigned

TAIL
     The tail of the code-list

N
     The number of character codes of 's' to convert

S
     The string to convert

Return Value
------------

Zero if the conversion fails (as far as failure can be detected), and a
nonzero value otherwise.

See Also
--------

*note Creating Prolog Terms::.


File: sicstus.info,  Node: cpg-ref-SP_put_number_codes,  Next: cpg-ref-SP_put_string,  Prev: cpg-ref-SP_put_list_n_codes,  Up: cpg-bif

12.3.80 'SP_put_number_codes()'
-------------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     int
     SP_put_number_codes(SP_term_ref term,
                         char const *s);

   Assigns to 'term' a reference to a Prolog number obtained by parsing
's' as if by 'number_codes/2'.

Arguments
---------

TERM
     The SP_term_ref to be assigned

S
     The string to parse

Return Value
------------

Zero if the conversion fails (as far as failure can be detected), and a
nonzero value otherwise.

See Also
--------

*note Creating Prolog Terms::.


File: sicstus.info,  Node: cpg-ref-SP_put_string,  Next: cpg-ref-SP_put_term,  Prev: cpg-ref-SP_put_number_codes,  Up: cpg-bif

12.3.81 'SP_put_string()'
-------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     int
     SP_put_string(SP_term_ref term,
                   char const *string);

   Assigns to 'term' a reference to a Prolog atom.

Arguments
---------

TERM
     The SP_term_ref to be assigned

STRING
     The string corresponding to the atom

Return Value
------------

Zero if the conversion fails (as far as failure can be detected), and a
nonzero value otherwise.

See Also
--------

*note Creating Prolog Terms::.


File: sicstus.info,  Node: cpg-ref-SP_put_term,  Next: cpg-ref-SP_put_variable,  Prev: cpg-ref-SP_put_string,  Up: cpg-bif

12.3.82 'SP_put_term()'
-----------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     int
     SP_put_term(SP_term_ref to,
                 SP_term_ref from);

   Assigns to 'to' the value of 'from'.

Arguments
---------

TO
     The SP_term_ref to be assigned

FROM
     The SP_term_ref whose value is accessed

Return Value
------------

Zero if the conversion fails (as far as failure can be detected), and a
nonzero value otherwise.

See Also
--------

*note Creating Prolog Terms::.


File: sicstus.info,  Node: cpg-ref-SP_put_variable,  Next: cpg-ref-SP_query,  Prev: cpg-ref-SP_put_term,  Up: cpg-bif

12.3.83 'SP_put_variable()'
---------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     int
     SP_put_variable(SP_term_ref term);

   Assigns to 'term' a reference to a new unbound Prolog variable.

Arguments
---------

TERM
     The SP_term_ref to be assigned

Return Value
------------

Zero if the call fails (as far as failure can be detected), and a
nonzero value otherwise.

See Also
--------

*note Creating Prolog Terms::.


File: sicstus.info,  Node: cpg-ref-SP_query,  Next: cpg-ref-SP_query_cut_fail,  Prev: cpg-ref-SP_put_variable,  Up: cpg-bif

12.3.84 'SP_query()'
--------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     int
     SP_query(SP_pred_ref predicate,
              SP_term_ref arg1,
              ...);

   Calls a predicate, committing to its first solution.

Arguments
---------

PREDICATE
     The predicate to call.

ARG1...
     The arguments to pass.

Return Value
------------

'SP_SUCCESS' if the goal succeeded, 'SP_FAILURE' if it failed, and
'SP_ERROR' if an error condition occurred.

Description
-----------

Use this if you are only interested in the first solution.  It will
create a goal from the predicate definition and the arguments, call it,
and commit to the first solution found, if any.  If it returns
'SP_SUCCESS', values in the query arguments valid, and will remain so
until backtracking into any enclosing query.

See Also
--------

*note Finding One Solution of a Call::.


File: sicstus.info,  Node: cpg-ref-SP_query_cut_fail,  Next: cpg-ref-SP_raise_exception,  Prev: cpg-ref-SP_query,  Up: cpg-bif

12.3.85 'SP_query_cut_fail()'
-----------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     int
     SP_query_cut_fail(SP_pred_ref predicate,
                       SP_term_ref arg1,
                       ...);

   Calls a predicate for side-effects, reclaiming any storage used.

Arguments
---------

PREDICATE
     The predicate to call.

ARG1...
     The arguments to pass.

Return Value
------------

'SP_SUCCESS' if the goal succeeded, 'SP_FAILURE' if it failed, and
'SP_ERROR' if an error condition occurred.

Description
-----------

Call this is you are only interested in the side-effects of a predicate.
It will try to prove the predicate, cut away the rest of the solutions,
and finally fail.  This will reclaim the storage used after the call,
and throw away any solution found.

See Also
--------

*note Finding One Solution of a Call::.


File: sicstus.info,  Node: cpg-ref-SP_raise_exception,  Next: cpg-ref-SP_read_from_string,  Prev: cpg-ref-SP_query_cut_fail,  Up: cpg-bif

12.3.86 'SP_raise_exception()'
------------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     void
     SP_raise_exception(SP_term_ref term);

   Raises an exception in the scope of Prolog calling C.

Arguments
---------

TERM
     The SP_term_ref whose value will be the exception term.

Description
-----------

The exception will be stored as pending.  This function is normally used
in the context of a call from Prolog to C, and will cause the exception
to be propagated to Prolog on return from the call.  The effect is as if
'raise_exception/1' was called with the term as argument.

   *Please note*: this should only be called right before returning to
Prolog.

See Also
--------

*note Exception Handling in C::.


File: sicstus.info,  Node: cpg-ref-SP_read_from_string,  Next: cpg-ref-SP_realloc,  Prev: cpg-ref-SP_raise_exception,  Up: cpg-bif

12.3.87 'SP_read_from_string()'
-------------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     int
     SP_read_from_string(SP_term_ref t,
                         const char *string,
                         SP_term_ref values[])

   Assigns to 'tt' the result of reading a term from the its textual
representation 'string'.  Variables that occur in the term are bound to
the corresponding term in 'val'.

Arguments
---------

TERM
     The SP_term_ref to assign.

STRING
     The string to read from.

VALUES
     The SP_term_refs to bind variables to.  The vector is terminated by
     '0' (zero).  'values' may be 'NULL', which is treated as an empty
     vector.

Return Value
------------

Nonzero on success, and 0 otherwise.

Description
-----------

The variables in the term are ordered according to their first occurence
during a depth first traversal in increasing argument order.  That is,
the same order as used by 'terms:term_variables_bag/2' (*note
lib-terms::).  Variables that do not have a corresponding entry in
'vals' are ignored.  Entries in 'vals' that do not correspond to a
variable in the term are ignored.

   The string should be encoded using the SICStus Prolog internal
encoding.

Examples
--------

This example creates the term 'foo(X,42,42,X)' (without error checking):

     SP_term_ref x = SP_new_term_ref();
     SP_term_ref y = SP_new_term_ref();
     SP_term_ref term = SP_new_term_ref();
     SP_term_ref vals[] = {x,y,x,0}; // zero-terminated

     SP_put_variable(x);
     SP_put_integer(y,42);

     SP_read_from_string(term, "foo(A,B,B,C).", vals);
     #if 0
        A corresponds to vals[0] (x),
        B to vals[1] (y),
        C to vals[2] (x).
        A and C therefore both are bound to
        the variable referred to by x.
        B is bound to the term referred to by y (42).
        So term refers to a term foo(X,42,42,X).
     #endif

   *Note Reading a goal from a string::, for an example of using
'SP_read_from_string()' to call an arbitrary goal.

See Also
--------

*note Creating Prolog Terms::.


File: sicstus.info,  Node: cpg-ref-SP_realloc,  Next: cpg-ref-SP_register_atom,  Prev: cpg-ref-SP_read_from_string,  Up: cpg-bif

12.3.88 'SP_realloc()'
----------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     void *
     SP_realloc(void *ptr,
                size_t size);

   Changes the size of the block referenced by 'ptr' to 'size' bytes and
returns a pointer to the (possibly moved) block.  The contents will be
unchanged up to the lesser of the new and old sizes.  The block
referenced by 'ptr' must have been obtained by a call to 'SP_malloc()'
or 'SP_realloc()', and must not have been released by a call to
'SP_free()' or 'SP_realloc()'.

Arguments
---------

PTR
     The current block.

SIZE
     Requested number of bytes of the new block.

Return Value
------------

'NULL' on failure, the pointer otherwise.

See Also
--------

*Note OS Memory Management::.


File: sicstus.info,  Node: cpg-ref-SP_register_atom,  Next: cpg-ref-SP_restore,  Prev: cpg-ref-SP_realloc,  Up: cpg-bif

12.3.89 'SP_register_atom()'
----------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     int
     SP_register_atom(SP_atom atom);

   Registers the atom 'atom' with the Prolog memory manager by
incrementing its reference counter.

Arguments
---------

ATOM
     The atom to register

Return Value
------------

1 if 'atom' is valid, and 0 otherwise.

See Also
--------

*note Creating and Manipulating SP_term_refs::.


File: sicstus.info,  Node: cpg-ref-SP_restore,  Next: cpg-ref-SP_set_argv,  Prev: cpg-ref-SP_register_atom,  Up: cpg-bif

12.3.90 'SP_restore()'
----------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     int
     SP_restore(char const *filename);


   Calls 'restore/1'.

Arguments
---------

FILENAME
     The file name, which is treated as a Prolog atom.

Return Value
------------

See 'SP_query_cut_fail()'.

See Also
--------

*note Loading Prolog Code::.


File: sicstus.info,  Node: cpg-ref-SP_set_argv,  Next: cpg-ref-SP_set_current_dir,  Prev: cpg-ref-SP_restore,  Up: cpg-bif

12.3.91 'SP_set_argv()'
-----------------------

Synopsis
--------

  since release 4.0.3

     #include <sicstus/sicstus.h>

     int
     SP_set_argv(int argc,
     	    char **argv,
     	    spio_t_bits options);

   Initializes the 'argv' prolog flag.

Arguments
---------

ARGC
     The number of elements of the 'argv' vector.

ARGV
     A vector of strings that can be accessed by 'prolog_flag(argv,X)'.
     This argument is copied by 'SP_set_argv()' so it can be discarded
     by the caller.  May be passed as 'NULL' if 'argc' is zero.

     The encoding used when converting the entries to atoms is
     determined by the 'options' argument.

OPTIONS

     If 'options' is zero then each entry in 'argv' is assumed to be an
     encoded string, i.e. encoded using 'UTF-8'.  This is the same as
     passing 'argc' and 'argv' to 'SP_initialize()' except that
     'SP_initialize()' will not report failure even if the 'argv'
     entries are not suitable as atom names.  Note that UTF-8 may not be
     the encoding used by the operating system when invoking 'main()'.

     If 'options' is 'SP_SET_ARGV_OPTION_SYSTEM_ENCODING' then each
     entry in 'argv' is assumed to be encoded using some system
     encoding.  This is only useful on Unix-like systems since it is
     preferable, and trivial, to obtain and pass a UTF-8 'argv' vector
     on Windows.

     The system encoding used by 'SP_set_argv()' will be the first
     character encoding specified by the following environment
     variables:

     'SP_CTYPE'
     'LC_ALL (only on Unix)'
     'LC_CTYPE (only on Unix)'
     'LANG (only on Unix)'
     if none of these are set then the operating system will be queried
     in some platform specific way.

     *Please note*: For best results on Unix-like platforms you should
     use a locale based on UTF-8.

Return Value
------------

Zero if the argument entries cannot be converted to atoms, and a nonzero
value otherwise.

Description
-----------

See Also
--------

*note Initializing the Prolog Engine::.


File: sicstus.info,  Node: cpg-ref-SP_set_current_dir,  Next: cpg-ref-SP_set_memalloc_hooks,  Prev: cpg-ref-SP_set_argv,  Up: cpg-bif

12.3.92 'SP_set_current_dir()'
------------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     spio_t_error_code
     SP_set_current_dir(char const *dir);

   Makes a directory pointed to by 'dir' to become the current working
directory.  'path' should be an encoded string.

Arguments
---------

DIR
     Name of the directory to become current.

Return Value
------------

On success, 'SPIO_S_NOERR' or some other success code is returned.

   On failure, an error code is returned and the working directory is
not changed.

See Also
--------

*note cpg-ref-SP_get_current_dir::.  *note OS File System::.


File: sicstus.info,  Node: cpg-ref-SP_set_memalloc_hooks,  Next: cpg-ref-SP_set_user_stream_hook,  Prev: cpg-ref-SP_set_current_dir,  Up: cpg-bif

12.3.93 'SP_set_memalloc_hooks()'   preinit
-------------------------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     typedef int
     SP_InitAllocHook(size_t alignment,
                      void *cookie);
     typedef void
     SP_DeinitAllocHook(void *cookie);
     typedef void *
     SP_AllocHook(size_t size,
     	     size_t *actual_sizep,
     	     void *cookie);
     typedef int
     SP_FreeHook(void *ptr,
     	    size_t size,
     	    int force,
     	    void *cookie);
     int
     SP_set_memalloc_hooks(int hint,
     		      SP_InitAllocHook *init_alloc_hook,
     		      SP_DeinitAllocHook *deinit_alloc_hook,
     		      SP_AllocHook *alloc_hook,
     		      SP_FreeHook *free_hook,
     		      void *cookie);

   Defines the Prolog memory manager's bottom layer.  Must be called
_before_ 'SP_initialize()'.

Arguments
---------

HINT
     One of
     '0' (zero)
          This is the usual case and the other arguments are interpreted
          as described below.

     'SP_SET_MEMALLOC_HOOKS_HINT_USE_MALLOC'

          The SICStus memory manager will by bypassed and instead the C
          library 'malloc()' et al. will be used for all allocations.
          This is useful, e.g. in combination with tools like
          'valgrind'.

          In this case all the other arguments must be 'NULL'.

          When this option is used some memory statistics, e.g.
          'statistics/[0,2]', may be unavailable or misleading.

          On some systems, 'SP_SET_MEMALLOC_HOOKS_HINT_USE_MALLOC' will
          be used automatically when the SICStus runtime detects that it
          is being run within 'valgrind' (<http://www.valgrind.org/>).
          This behavior can be disabled by explicitly setting the system
          property (or environment variable) 'SP_USE_MALLOC' to 'no'
          (*note System Properties and Environment Variables::).  This
          feature is currently (4.0.8) available on x86 and x86_64
          Linux.

          *Please note*: SICStus can only use 'malloc()' on platforms
          where it is guaranteed to return sufficiently aligned memory
          ('2 * sizeof(void*)').  This is true at least on Linux, Mac OS
          X and Windows (on Windows '_aligned_malloc()' is used instead
          of 'malloc()').  On platforms where alignment cannot be
          ensured SICStus will not be able to allocate memory and
          initialization will fail if
          'SP_SET_MEMALLOC_HOOKS_HINT_USE_MALLOC' is used.

          *Please note*: When 'SP_SET_MEMALLOC_HOOKS_HINT_USE_MALLOC' is
          used 'SP_deinitialize()' may not be able to reclaim all
          memory.  This is mainly a problem when SICstus is embedded
          into some other application that continues to run after
          calling 'SP_deinitialize()'.  This limitations also means that
          leak detecton tools like 'valgrind' will report large amounts
          of leaked memory.

          Since 4.0.5.

INIT_ALLOC_HOOK
     is called initially.  'alignment' is guaranteed to be a power of 2,
     and is used by 'alloc_hook'.  'earliest_start' (inclusive) and
     'latest_end' (exclusive) are the bounds within which
     address-constrained memory blocks must fit.  Both are aligned
     according to 'alignment' and non-zero.  The function can do
     whatever initialization that this layer of memory management wants
     to do.  It should return non-zero if it succeeds, zero if the
     memory manager bottom layer could not be initialized, in which case
     initialization of the SICStus runtime will fail.

DEINIT_ALLOC_HOOK
     is called by 'SP_deinitialize()' when the Prolog engine shuts down.
     The function can do any necessary cleaning up.

ALLOC_HOOK
     must allocate and return a pointer to a piece of memory that
     contains at least 'size' bytes aligned at a multiple of
     'alignment'.  The actual size of the piece of memory should be
     returned in '*actual_sizep'.  Should return 'NULL' if it cannot
     allocate a suitable piece of memory.  Note that the memory returned
     need not be aligned as long as there is room for an aligned block
     of at least 'size' bytes.

FREE_HOOK
     is called with a pointer to a piece of memory to be freed and its
     size as returned by 'alloc_hook'.  If 'force' is non-zero,
     'free_hook' must accept the piece of memory; otherwise, it only
     accepts it if it is able to return it to the operating system.
     'free_hook' should return non-zero iff it accepts the piece of
     memory.  Otherwise, the upper layer will keep using the memory as
     if it were not freed.

COOKIE
     can be used for any state needed by the memory hook functions.  The
     value passed to 'SP_set_memalloc_hooks()' is passed to each hook
     function.  One possible use is to keep track of multiple SICStus
     runtimes within the same process.

Return Value
------------

Non-zero on success, Zero on error, e.g. if called after
'SP_initialize()'.

Description
-----------

The default bottom layers look at the system properties
'PROLOGINITSIZE', 'PROLOGINCSIZE', 'PROLOGKEEPSIZE' and 'PROLOGMAXSIZE'.
They are useful for customizing the default memory manager.  If you
redefine the bottom layer, you can choose to ignore these system
properties.

See Also
--------

*note Initializing the Prolog Engine::.  *note System Properties and
Environment Variables::.


File: sicstus.info,  Node: cpg-ref-SP_set_user_stream_hook,  Next: cpg-ref-SP_set_user_stream_post_hook,  Prev: cpg-ref-SP_set_memalloc_hooks,  Up: cpg-bif

12.3.94 'SP_set_user_stream_hook()'   preinit
---------------------------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     typedef SP_stream *
     SP_UserStreamHook(void *user_data, int which);

     SP_UserStreamHook *
     SP_set_user_stream_hook(SP_UserStreamHook *hook, void *user_data);

   Sets the user-stream hook to 'hook'.  Must be called _before_
'SP_initialize()'.

Arguments
---------

HOOK
     It is called three times, one for each stream.  The 'which'
     argument indicates which stream it is called for.  The value of
     'which' is one of:

     'SP_STREAMHOOK_STDIN'
          Create stream for standard input.
     'SP_STREAMHOOK_STDOUT'
          Create stream for standard output.
     'SP_STREAMHOOK_STDERR'
          Create stream for standard error.

     The hook should return a standard SICStus text I/O stream, as
     described in *note Defining a New Stream::.

USER_DATA
     An arbitrary pointer that will be passed to the 'hook'.

See Also
--------

*note Hookable Standard Streams::.


File: sicstus.info,  Node: cpg-ref-SP_set_user_stream_post_hook,  Next: cpg-ref-SP_signal,  Prev: cpg-ref-SP_set_user_stream_hook,  Up: cpg-bif

12.3.95 'SP_set_user_stream_post_hook()'   preinit
--------------------------------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     typedef SP_stream *
     SP_UserStreamPostHook(void *user_data, int which, SP_stream *str);

     SP_UserStreamPostHook *
     SP_set_user_stream_post_hook(SP_UserStreamPostHook *hook, void *user_data);

   Sets the user-stream post-hook to 'hook'.  Must be called _before_
'SP_initialize()'.

Arguments
---------

HOOK
     The user-stream post-hook is, if defined, called after all the
     streams have been defined, once for each of the three standard
     streams.  It has a slightly different prototype:

          void user_stream_post_hook(void *user_data, int which, SP_stream *str)

     where 'user_data' is the value passed to
     'SP_set_user_stream_post_hook' and where 'str' is a pointer to the
     corresponding 'SP_stream' structure.  There are no requirements as
     to what this hook must do; the default behavior is to do nothing at
     all.

     The post-hook is intended to be used to do things that may require
     that all streams have been created.

USER_DATA
     An arbitrary pointer that will be passed to the 'hook'.

See Also
--------

*note Hookable Standard Streams::.


File: sicstus.info,  Node: cpg-ref-SP_signal,  Next: cpg-ref-SP_strdup,  Prev: cpg-ref-SP_set_user_stream_post_hook,  Up: cpg-bif

12.3.96 'SP_signal()'
---------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     typedef void
     SP_SigFun (int sig, void *user_data);

     SP_SigFun
     SP_signal(int sig,
               SP_SigFun fun, void *user_data);

   Installs a function 'fun' as a handler for the signal 'sig'.  It will
be called with 'sig' and 'user_data' as arguments.

Arguments
---------

SIG
     The signal

FUN
     The function

USER_DATA
     An extra, user defined value passed to the function.

Return Value
------------

'SP_SIG_ERR' if an error occurs error.  On success, some value different
from 'SP_SIG_ERR'.

Description
-----------

When the OS delivers a signal 'sig' for which 'SP_signal(sig,func,...)'
has been called, SICStus will _not_ call 'func' immediately.  Instead
the call to 'func' will be delayed until it is safe for Prolog to do so,
in much the same way that functions installed by 'SP_event()' are
handled.

   Since the signal handling function 'func' will not be called
immediately upon delivery of the signal to the process it only makes
sense to use 'SP_signal()' to handle certain asynchronous signals such
as 'SIGINT', 'SIGUSR1', 'SIGUSR2'.  Other asynchronous signals handled
specially by the OS, such as 'SIGCHLD' are not suitable for handling via
'SP_signal()'.  Note that the development system installs a handler for
'SIGINT', and, under Windows, 'SIGBREAK', to catch keyboard interrupts.
As of release 4.4, 'library(timeout)' no longer uses any signals.

   When 'func' is called it may only call other (non SICStus) C code and
'SP_event()'.  Note that 'func' will be called in the main thread.

   If 'fun' is one of the special constants 'SP_SIG_IGN' or
'SP_SIG_DFL', then one of two things happens:

  1. If a signal handler for 'sig' has already been installed with
     'SP_signal()', then the SICStus OS-level signal handler is removed
     and replaced with, respectively, 'SIG_IGN' or 'SIG_DFL'.
  2. If a signal handler has not been installed with 'SP_signal()', then
     'SP_signal()' does nothing and returns 'SP_SIG_ERR'.

   A signal handler installed by a foreign resource should be
uninstalled in the deinit function for the foreign resource.  This is to
prevent the handler in the foreign resource from being called after the
code of the foreign resource has been unloaded (e.g. by
'unload_foreign_resource/1').

   Note that 'SP_signal()' is not suitable for installing signal
handlers for synchronous signals like 'SIGSEGV'.

See Also
--------

'SP_event()', *note Signal Handling::.


File: sicstus.info,  Node: cpg-ref-SP_strdup,  Next: cpg-ref-SP_string_from_atom,  Prev: cpg-ref-SP_signal,  Up: cpg-bif

12.3.97 'SP_strdup()'
---------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     void *
     SP_strdup(const char *str);

   Allocates a string, which is a duplicates of the given string.  The
memory for the new string is managed by Prolog.

Arguments
---------

STR
     The given string.

Return Value
------------

The pointer, if allocation was successful, otherwise 'NULL'.

See Also
--------

*note OS Memory Management::.


File: sicstus.info,  Node: cpg-ref-SP_string_from_atom,  Next: cpg-ref-SP_term_type,  Prev: cpg-ref-SP_strdup,  Up: cpg-bif

12.3.98 'SP_string_from_atom()'
-------------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     char const *
     SP_string_from_atom(SP_atom atom);

   Obtains the encoded string holding the characters of a Prolog atom.
This string must _not_ be modified by the calling function.

Arguments
---------

ATOM
     The atom to inspect.

Return Value
------------

The encoded string if 'atom' is valid, and 0 otherwise.

See Also
--------

*note Creating and Manipulating SP_term_refs::.


File: sicstus.info,  Node: cpg-ref-SP_term_type,  Next: cpg-ref-SP_unget_byte,  Prev: cpg-ref-SP_string_from_atom,  Up: cpg-bif

12.3.99 'SP_term_type()'
------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     int
     SP_term_type(SP_term_ref term);

   Determines the type of the value of 'term'.

Arguments
---------

TERM
     The SP_term_ref to be inspected

Return Value
------------

One of:

'SP_TYPE_VARIABLE'
     a variable

'SP_TYPE_INTEGER'
     an integer

'SP_TYPE_FLOAT'
     a float

'SP_TYPE_ATOM'
     an atom

'SP_TYPE_COMPOUND'
     a compound term

'SP_TYPE_ERROR'
     an error occurred.

See Also
--------

*note Testing Prolog Terms::.


File: sicstus.info,  Node: cpg-ref-SP_unget_byte,  Next: cpg-ref-SP_unget_code,  Prev: cpg-ref-SP_term_type,  Up: cpg-bif

12.3.100 'SP_unget_byte()'
--------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     spio_t_error_code
     SP_unget_byte(
       SP_stream *stream,
       int item);

   Push back a byte so it can be read again by subsequent read
operations.

Arguments
---------

STREAM
     The stream.  Must be a binary stream open for input.

ITEM
     The byte to push back.  This must be the byte that was most
     recently read from 'stream', e.g. with 'SP_get_byte()'.  As a
     special case, -1 can be put back if the last read operation
     returned end of file, i.e., 'SPIO_E_END_OF_FILE'.

Return Value
------------

On success, the byte has been pushed back and will be read by the next
read operation.  'SPIO_S_NOERR' or some other success code is returned.

   On failure, an error code is returned.

See Also
--------

*note cpg-ref-SP_get_byte::.  *note Prolog Streams::.


File: sicstus.info,  Node: cpg-ref-SP_unget_code,  Next: cpg-ref-SP_unify,  Prev: cpg-ref-SP_unget_byte,  Up: cpg-bif

12.3.101 'SP_unget_code()'
--------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     spio_t_error_code
     SP_unget_code(
       SP_stream *stream,
       int item);

   Push back a character so it can be read again by subsequent read
operations.

Arguments
---------

STREAM
     The stream.  Must be a text stream open for input.

ITEM
     The character to push back.  This must be the same character that
     was most recently read from 'stream', e.g. with 'SP_get_code()'.
     As a special case, -1 can be put back if the last read operation
     returned end of file, i.e., 'SPIO_E_END_OF_FILE'.

Return Value
------------

On success, the character has been pushed back and will be read by the
next read operation.  'SPIO_S_NOERR' or some other success code is
returned.

   On failure, returns an error code.

See Also
--------

*note cpg-ref-SP_get_code::.  *note Prolog Streams::.


File: sicstus.info,  Node: cpg-ref-SP_unify,  Next: cpg-ref-SP_unregister_atom,  Prev: cpg-ref-SP_unget_code,  Up: cpg-bif

12.3.102 'SP_unify()'
---------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     int
     SP_unify(SP_term_ref x,
              SP_term_ref y)

   Unifies two terms.

Arguments
---------

X
     The one term to unify

Y
     The other term to unify

Return Value
------------

1 if they unify, and 0 otherwise.

Description
-----------

Bear in mind that the unification may unblock some goals.  such goals
are _not_ run in the scope of 'SP_unify()'; they remain pending until
the next Prolog goal is run.

See Also
--------

*note Unifying and Comparing Terms::.


File: sicstus.info,  Node: cpg-ref-SP_unregister_atom,  Next: cpg-ref-SU_initialize,  Prev: cpg-ref-SP_unify,  Up: cpg-bif

12.3.103 'SP_unregister_atom()'
-------------------------------

Synopsis
--------

     #include <sicstus/sicstus.h>

     int
     SP_unregister_atom(SP_atom atom);

   Unregisters the atom 'atom' with the Prolog memory manager by
incrementing its reference counter.

Arguments
---------

ATOM
     The atom to unregister

Return Value
------------

1 if 'atom' is valid, and 0 otherwise.

See Also
--------

*note Creating and Manipulating SP_term_refs::.


File: sicstus.info,  Node: cpg-ref-SU_initialize,  Next: cpg-ref-user_close,  Prev: cpg-ref-SP_unregister_atom,  Up: cpg-bif

12.3.104 'SU_initialize()'   hook
---------------------------------

Synopsis
--------

     int
     SU_initialize(int argc, char *argv[])

   In applications built with '--userhook', 'SU_initialize()' is called
by the main program before 'SP_initialize()'.  Its purpose is to call
interface functions, which must be called before 'SP_initialize()'.  It
is not meaningful to specify this option if '--main=user' or
'--main=none' is given.

Arguments
---------

ARGC
     Number of command-line arguments.

ARGV
     The command-line arguments, should not be modified.

Return Value
------------

Zero on success, and nonzero otherwise.  If a non-zero value is
returned, the application system exits with the return value as error
code.

See Also
--------

*note The Application Builder::.


File: sicstus.info,  Node: cpg-ref-user_close,  Next: cpg-ref-user_flush_output,  Prev: cpg-ref-SU_initialize,  Up: cpg-bif

12.3.105 'user_close()'
-----------------------

Synopsis
--------

     spio_t_error_code
     user_close(
       void **puser_data,
       spio_t_bits close_options
       );

   This is the prototype for one of the "methods" of user defined
streams.  It is used when SICStus wants to close one or both directions
of a user defined stream.

Arguments
---------

PUSER_DATA
     A pointer to the same value as was passed to 'SP_create_stream()'.
     On successful return, if the stream has been closed and any
     resources freed, then '*puser_data' should be set to 'NULL'.

     If 'user_close' fails, it can still set '*puser_data' to 'NULL' to
     signify that the stream is no longer usable.

CLOSE_OPTIONS
     The following bits can be set:

     'SPIO_DEVICE_CLOSE_OPTION_READ'

          The read direction should be closed.  Only set if the device
          was created as an input or bidirectional device.

     'SPIO_DEVICE_CLOSE_OPTION_WRITE'
          The write direction should be closed.  Only set if the device
          was created as an output or bidirectional device.

     'SPIO_DEVICE_CLOSE_OPTION_FORCE'
          The specified directions should be closed without attempting
          to flush any data.  Among other things this option may be
          passed if a previous call to 'user_close' returned an error.

     Note that a bidirectional stream should only close the directions
     specified by the 'close_options'.  Also note that 'user_close' for
     a bidirectional stream may be called several times and that the
     same direction flag, e.g. 'SPIO_DEVICE_CLOSE_OPTION_READ' may be
     specified more than once, even if that direction has already been
     closed successfully.

     Once a call to 'user_close' has set '*puser_data' to 'NULL', none
     of the device "methods" will be called again.  Note that a
     '*puser_data' may be set to 'NULL' even when a failure code is
     returned.  This is useful if the failure is unrecoverable.

     There is no option to specify non-blocking close, it is expected
     that 'user_close' will finish "quickly".  To make this more likely,
     'user_flush_output' is called before non-forcibly closing an output
     stream.

Return Value
------------

On success, return 'SPIO_S_NOERR' or some other success code and set
'*puser_data' if and only if the user data and any other resources have
been freed.

   On failure, return a SPIO error code.  Error codes with special
meaning for 'user_close':

'SPIO_E_END_OF_FILE'
     Returned if there were buffered data and it is not possible to
     write more data onto the stream, e.g. some underlying device has
     been closed.

Other error codes may also be returned.

Description
-----------

Should close one or all directions depending on the 'close_options'.  If
all directions have been closed, the user data should be deallocated and
'*puser_data' set to 'NULL'.

See Also
--------

*note cpg-ref-SP_create_stream::.  *note Defining a New Stream::.


File: sicstus.info,  Node: cpg-ref-user_flush_output,  Next: cpg-ref-user_read,  Prev: cpg-ref-user_close,  Up: cpg-bif

12.3.106 'user_flush_output()'
------------------------------

Synopsis
--------

     spio_t_error_code
     user_flush_output(
       void *user_data,
       spio_t_bits flush_options
       );

   This is the prototype for one of the "methods" of user defined
streams.  It is used when SICStus wants to write data to the user
defined stream.

Arguments
---------

USER_DATA
     The same value as was passed to 'SP_create_stream()'.

FLUSH_OPTIONS
     The following bits can be set:

     'SPIO_DEVICE_FLUSH_OPTION_NONBLOCKING'

          If this is set, the function should return "quickly" or with a
          'SPIO_E_WOULD_BLOCK' code.

          If your 'user_flush_output' will never block, you can ignore
          this value.

          You should return 'SPIO_E_NOT_SUPPORTED' if
          'user_flush_output' cannot support non-blocking flush.

Return Value
------------

On success, all buffered data should have been written and
'SPIO_S_NOERR' or some other success code returned.

   On failure, return a SPIO error code.  Error codes with special
meaning for 'user_flush_output':

'SPIO_E_END_OF_FILE'
     Returned if it is not possible to write more data onto the stream,
     e.g. some underlying device has been closed.

'SPIO_E_WOULD_BLOCK'
     'SPIO_DEVICE_FLUSH_OPTION_NONBLOCKING' was set but the operation
     would block.

'SPIO_E_NOT_SUPPORTED'
     Some unsupported option, e.g.
     'SPIO_DEVICE_FLUSH_OPTION_NONBLOCKING', was passed.

Other error codes may also be returned.

Description
-----------

Should ensure that any buffered data is transmitted to its destination.
Can be passed as 'NULL'.

See Also
--------

*note cpg-ref-SP_create_stream::.  *note Defining a New Stream::.


File: sicstus.info,  Node: cpg-ref-user_read,  Next: cpg-ref-user_write,  Prev: cpg-ref-user_flush_output,  Up: cpg-bif

12.3.107 'user_read()'
----------------------

Synopsis
--------

     spio_t_error_code
     user_read(
       void *user_data,
       void *buf,
       size_t *pbuf_size,
       spio_t_bits read_options
       );

   This is the prototype for one of the "methods" of user defined
streams.  It is used when SICStus need to obtain more data from the user
defined stream.

Arguments
---------

USER_DATA
     The same value as was passed to 'SP_create_stream()'.

BUF
     Points to a buffer allocated by the caller.

PBUF_SIZE
     Points to the size of the buffer.  The buffer is always large
     enough to hold at least one byte (for binary streams) or one
     character (for text streams).  When this function returns
     successfully, '*pbuf_size' should be set to the number of _bytes_
     stored in the buffer, which should always be positive for
     successful return.

     Note that buffer size is measured in bytes also for text streams.

READ_OPTIONS
     The following bits can be set:

     'SPIO_DEVICE_READ_OPTION_BINARY'
          This is always specified if the device was created as a binary
          device.  The buffer should be filled with up to '*pbuf_size'
          bytes.

     'SPIO_DEVICE_READ_OPTION_TEXT'
          This is always specified if the device was created as a text
          device.  The buffer should be filled with wide characters,
          i.e. 'spio_t_wchar'.  Note that '*buf_size' is size in
          _bytes_, not in characters.

     'SPIO_DEVICE_READ_OPTION_NONBLOCKING'
          If this is set then the function should return "quickly",
          either with some data read or with a 'SPIO_E_WOULD_BLOCK'
          code.

          If your 'user_read' will never block, you can ignore this
          value.

          You should return 'SPIO_E_NOT_SUPPORTED' if 'user_read' cannot
          support non-blocking read.

Return Value
------------

On success, '*pbuf_size' should be assigned and 'SPIO_S_NOERR' or some
other success code returned.

   On failure, return a SPIO error code.  Error codes with special
meaning for 'user_read':

'SPIO_E_END_OF_FILE'
     Return this when there are no more data to read.

'SPIO_E_WOULD_BLOCK'
     'SPIO_DEVICE_READ_OPTION_NONBLOCKING' was set but the operation
     would block.

'SPIO_E_NOT_SUPPORTED'
     Some unsupported option, e.g.
     'SPIO_DEVICE_READ_OPTION_NONBLOCKING', was passed.

Other error codes may also be returned.

Description
-----------

Should fill 'buf' with up to '*buf_size' bytes of data.  Data should be
either bytes, for a binary device, or 'spio_t_wchar' (32 bit) wide
characters, for a text device.

See Also
--------

*note cpg-ref-SP_create_stream::.  *note Defining a New Stream::.


File: sicstus.info,  Node: cpg-ref-user_write,  Prev: cpg-ref-user_read,  Up: cpg-bif

12.3.108 'user_write()'
-----------------------

Synopsis
--------

     spio_t_error_code
     user_write(
       void *user_data,
       void const *buf,
       size_t *pbuf_size,
       spio_t_bits write_options
       );

   This is the prototype for one of the "methods" of user defined
streams.  It is used when SICStus wants to write data to the user
defined stream.

Arguments
---------

USER_DATA
     The same value as was passed to 'SP_create_stream()'.

BUF
     Points to a buffer allocated by the caller containing the data to
     be written.

PBUF_SIZE
     Points to the size of the buffer, always positive.  When this
     function returns successfully, '*pbuf_size' should be set to the
     number of bytes actually written, which should always be positive
     for successful return.

     Note that buffer size is measured in bytes also for text streams.

WRITE_OPTIONS
     The following bits can be set:

     'SPIO_DEVICE_WRITE_OPTION_BINARY'

          This is always specified if the device was created as a binary
          device.  The buffer contains '*pbuf_size' bytes.

     'SPIO_DEVICE_WRITE_OPTION_TEXT'

          This is always specified if the device was created as a text
          device.  The buffer contains wide characters, i.e.
          'spio_t_wchar'.  Note that '*buf_size' is size in _bytes_, not
          in characters.

     'SPIO_DEVICE_WRITE_OPTION_NONBLOCKING'

          If this is set, the function should return "quickly", either
          with some data written or with a 'SPIO_E_WOULD_BLOCK' code.

          If your 'user_write' will never block, you can ignore this
          value.

          You should return 'SPIO_E_NOT_SUPPORTED' if 'user_write'
          cannot support non-blocking write.

Return Value
------------

On success, '*pbuf_size' should be assigned to with the number of bytes
written and 'SPIO_S_NOERR' or some other success code returned.  On
success, something must have been written, e.g. '*pbuf_size' must be set
to a positive value.

   On failure, return a SPIO error code.  Error codes with special
meaning for 'user_write':

'SPIO_E_END_OF_FILE'
     Returned if it is not possible to write more data onto the stream,
     e.g. some underlying device has been closed.

'SPIO_E_WOULD_BLOCK'
     'SPIO_DEVICE_WRITE_OPTION_NONBLOCKING' was set but the operation
     would block.

'SPIO_E_NOT_SUPPORTED'
     Some unsupported option, e.g.
     'SPIO_DEVICE_WRITE_OPTION_NONBLOCKING', was passed.

Other error codes may also be returned.

Description
-----------

Should write up to '*buf_size' bytes of data from 'buf'.  Data could be
either bytes, for a binary device, or wide characters, for a text
device.

See Also
--------

*note cpg-ref-SP_create_stream::.  *note Defining a New Stream::.


File: sicstus.info,  Node: Command Reference Pages,  Next: References,  Prev: C Reference Pages,  Up: Top

13 Command Reference Pages
**************************

* Menu:

* too-sicstus::                     sicstus -- SICStus Prolog Development System
* too-mzn-sicstus::                 mzn-sicstus -- shortcut for MiniZinc with SICStus back-end
* too-spfz::                        spfz -- FlatZinc Interpreter
* too-spdet::                       spdet -- Determinacy Checker
* too-spld::                        spld -- SICStus Prolog Application Builder
* too-splfr::                       splfr -- SICStus Prolog Foreign Resource Linker
* too-splm::                        splm -- SICStus Prolog License Manager
* too-spxref::                      spxref -- Cross Referencer

The reference pages for the SICStus Prolog command line tools follow.

'sicstus(1)'
     SICStus Prolog Development System
'mzn-sicstus(1)   since release 4.3'
     Shortcut for MiniZinc with SICStus back-end
'spfz(1)   since release 4.3'
     FlatZinc Interpreter
'spdet(1)'
     Determinacy Checker
'spld(1)'
     SICStus Prolog Application Builder
'splfr(1)'
     SICStus Prolog Foreign Resource Linker
'splm(1)'
     SICStus Prolog License Manager
'spxref(1)'
     Cross Referencer


File: sicstus.info,  Node: too-sicstus,  Next: too-mzn-sicstus,  Up: Command Reference Pages

13.1 'sicstus' -- SICStus Prolog Development System
===================================================

Synopsis
--------

     % sicstus [OPTIONS] [-- ARGUMENT...]

Description
-----------

The prompt '| ?-' indicates that the execution of is top-level mode.  In
this mode, Prolog queries may be issued and executed interactively.  To
exit from the top-level and return to the shell, either type '^D' at the
top-level, or call the built-in predicate 'halt/0', or use the 'e'
(exit) command following a '^C' interruption.

   Under Windows, 'sicstus.exe' is a console-based program that can run
in a command prompt window, whereas 'spwin.exe' runs in its own window
and directs the Prolog standard streams to that window.  'spwin.exe' is
a "windowed" executable.

Options
-------

'-f'
     Fast start.  Do Not read any initialization file on startup.  If
     the option is omitted and the initialization file exists, then
     SICStus Prolog will consult it on startup after running any
     initializations and printing the version banners.  The
     initialization file is '.sicstusrc' or 'sicstus.ini' in the users
     home directory, i.e. '~/.sicstusrc' or '~/sicstus.ini'.  *Note
     ref-fdi-syn::.  for an explanation of how a file specification
     starting with '~/' is interpreted.

'-i'
     Forced interactive.  Prompt for user input, even if the standard
     input stream does not appear to be a terminal.

'-m'
     Use 'malloc()' et al. for memory allocations.  *Note
     cpg-ref-SP_set_memalloc_hooks::.  for more information.

'--noinfo'
     Start with the 'informational' Prolog flag set to 'off' initially,
     suppressing informational messages.  The flag is set before any
     PROLOG-FILE or initialization file is loaded or any SAVED-STATE is
     restored.

'--nologo'
     Start without the initial version message.

'-l PROLOG-FILE'
     Ensure that the file PROLOG-FILE is loaded on startup.  This is
     done before any initialization file is loaded.  Only one '-l'
     option is allowed.

'-r SAVED-STATE'
     Restore the saved-state SAVED-STATE on startup.  This is done
     before any PROLOG-FILE or initialization file is loaded.  Only one
     '-r' option is allowed.

'--goal GOAL'
     Read a term from the text GOAL and pass the resulting term to
     'call/1' after all files have been loaded.  As usual GOAL should be
     terminated by a full stop ('.').  Only one '--goal' option is
     allowed.

'-DVAR=VALUE'
     Sets the system property VAR to value VALUE.  Most system
     properties take their default value from the environment but often
     it is convenient to pass a system property directly instead of
     setting the corresponding environment variable.  *Note System
     Properties and Environment Variables::.  for details.

'--locale NAME'
     Sets the process locale to the given locale name.  The process
     locale primarily affects the character encoding used for the
     standard streams.

     The default, also available by specifying 'default' as the NAME, is
     to inherit the locale from the environment.

     This option is not supported on Windows.

'--no-locale'
     Do not inherit the process locale from the environment.

     This is, in effect, the default on Windows.

'-Xrs'
     Reduce use of OS-signals.

     On UNIX-like platforms, several OS signals are handled specially in
     a development system.  The option '-Xrs', prevents this and keeps
     the OS default behavior.

     On both UNIX-like platforms and Windows, the development system
     will install handlers for the signal 'SIGINT' (corresponding to a
     'C-c' keyboard interrupt).  On Windows, a signal handler will also
     be added for 'SIGBREAK' (signalled when the console window is
     closed).  The handling of 'SIGINT' and 'SIGBREAK' is not affected
     by '-Xrs'.

'--help'
     Display a help message and exit.

'-- ARGUMENT...   since release 4.0.3'
'-a ARGUMENT...'
     where the arguments can be retrieved from Prolog by
     'prolog_flag(argv, ARGS)', which will unify ARGS with ARGUMENT...
     represented as a list of atoms.

Files
-----

'FILE.pl'
'FILE.pro'
     Prolog source file

'FILE.po'
     Prolog object file

'FILE.sav'
     Prolog saved-state file

'.sicstusrc'
'sicstus.ini'
     SICStus Prolog initialization file, looked up in the home directory

See Also
--------

*note Start::, *note System Properties and Environment Variables::.


File: sicstus.info,  Node: too-mzn-sicstus,  Next: too-spfz,  Prev: too-sicstus,  Up: Command Reference Pages

13.2 'mzn-sicstus' -- Shortcut for MiniZinc with SICStus back-end
=================================================================

Synopsis
--------

     % mzn-sicstus [OPTIONS] MZNFILE

Description
-----------

This tool is a shortcut for invoking 'minizinc(1)' with SICStus as the
FlatZinc interpreter and with the appropriate global constraint
definitions.

Options
-------

See 'minizinc(1)'.

See Also
--------

*note lib-zinc::.


File: sicstus.info,  Node: too-spfz,  Next: too-spdet,  Prev: too-mzn-sicstus,  Up: Command Reference Pages

13.3 'spfz' -- FlatZinc Interpreter
===================================

Synopsis
--------

     % spfz [-help | --help | -?] [-n N | -a] [-search S] [-time T] [-r R] [-s] [-o OFILE] FZNFILE

Description
-----------

This tool interprets the FlatZinc ('.fzn') file FZNFILE with options
taken from the command line.

Options
-------

'-help, --help, -?'
     Print a help message explaining the options.
'-n N'
     Number of solutions.  The default is 1; 0 means all solutions.
'-a'
     All solutions.  The same as '-n 0'.
'-search S'
     Optimization method is S, one of 'bab' (the default) and 'restart'.
'-time T'
     Time cutoff after T ms.
'-r R'
     Set the random seed to R first.  The default is to use the same
     random seed every run.
'-s'
     Emit post-execution statistics.
'-o OFILE'
     Redirect the output to file OFILE.

See Also
--------

*note lib-zinc::.


File: sicstus.info,  Node: too-spdet,  Next: too-spld,  Prev: too-spfz,  Up: Command Reference Pages

13.4 'spdet' -- Determinacy Checker
===================================

Synopsis
--------

     % spdet [-r] [-d] [-D] [-i IFILE] FSPEC...

Description
-----------

The determinacy checker can help you spot unwanted nondeterminacy in
your programs.  This tool examines your program source code and points
out places where nondeterminacy may arise.

Options
-------

'-r'
     Process files recursively, fully checking the specified files and
     all the files they load.
'-d'
     Print out declarations that should be added.
'-D'
     Print out all needed declarations.
'-i IFILE'
     An initialization file, which is loaded before processing begins.

See Also
--------

*note The Determinacy Checker::.


File: sicstus.info,  Node: too-spld,  Next: too-splfr,  Prev: too-spdet,  Up: Command Reference Pages

13.5 'spld' -- SICStus Prolog Application Builder
=================================================

Synopsis
--------

     % spld [ OPTION | INPUTFILE ] ...

Description
-----------

The application builder, 'spld', is used for creating stand-alone
executables.  *Note The Application Builder::.  for an overview.

   'spld' takes the files specified on the command line and combines
them into an executable file, much like the UNIX 'ld' or the Windows
'link' commands.

   Note that no pathnames passed to 'spld' should contain spaces.  Under
Windows, this can be avoided by using the short version of pathnames as
necessary.

Options
-------

The input to 'spld' can be divided into OPTIONS and FILES, which can be
arbitrarily mixed on the command line.  Anything not interpreted as an
option will be interpreted as an input file.  Do not use spaces in any
file or option passed to 'spld'.  Under Windows you can use the short
file name for files with space in their name.  The following options are
available:

'-?'
'--help'
     Prints out a summary of all options.  This may document more
     options than those described in this manual.

'-v'
'--verbose'
     Print detailed information about each step in the
     compilation/linking sequence.  Multiple occurrences increase
     verbosity.

'-vv'
     Same as -v -v.

'--version'
     Prints out the version number of 'spld' and exits successfully.

'-o'
'--output=FILENAME'
     Specify output file name.  The default depends on the linker (e.g.
     'a.out' on UNIX systems).

'-E'
'--extended-rt'
     Create an extended runtime system.  In addition to the normal set
     of built-in runtime system predicates, extended runtime systems
     include the compiler.  Extended runtime systems require the
     extended runtime library, available from SICS as an add-on product.
     Extended runtime systems need access to license information; see
     *note Extended Runtime Systems::.

'-D'
'--development'
     Create a development system (with top-level, debugger, compiler,
     etc.).  The default is to create a runtime system.  Implies
     '--main=prolog'.

'--main=TYPE'

     Specify what the executable should do upon startup.  The possible
     values are:

     'prolog'
          Implies '-D'.  The executable will start the Prolog top-level.
          This is the default if '-D' is specified and no '.sav', '.pl',
          or '.po' files are specified.

     'user'
          The user supplies his/her own main program by including C-code
          (object file or source), which defines a function
          'user_main()'.  This option is not compatible with '-D'.
          *Note User-defined Main Programs::.

     'restore'
          The executable will restore a saved-state created by
          'save_program/[1,2]'.  This is the default if a '.sav' file is
          found among FILES.  It is only meaningful to specify one
          '.sav' file.  If it was created by 'save_program/2', then the
          given startup goal is run.  Then the executable will any
          Prolog code specified on the command line.  Finally, the goal
          'user:runtime_entry(start)' is run.  The executable exits with
          0 upon normal temination and with 1 on failure or exception.
          Not compatible with '-D'.

     'load'
          The executable will load any Prolog code specified on the
          command line, i.e. files with extension '.pl' or '.po'.  This
          is the default if there are '.pl' or '.po' but no '.sav' files
          among FILES.  Finally, the goal 'user:runtime_entry(start)' is
          run.  The executable exits with 0 upon normal temination and
          with 1 on failure or exception.  Not compatible with '-D'.
          Note that this is almost like '--main==restore' except that no
          saved-state will be restored before loading the other files.

     'none'
          No main function is generated.  The main function must be
          supplied in one of the user supplied files.  Not compatible
          with '-D'.

'--window'

     _Win32 only._  Create a windowed executable.  A console window will
     be opened and connected to the Prolog standard streams.  If
     '--main=user' is specified, then 'user_main()' should not set the
     user-stream hooks.  C/C++ source code files specified on the
     command-line will be compiled with '-DSP_WIN=1' if this option is
     given.

'--moveable'
'--no-moveable'

     Controls whether to hardcode certain paths into the executable in
     order for it to find the SICStus libraries and bootfiles etc.

     Under UNIX, if '--no-moveable' is specified, then paths are
     hardcoded into executables in order for them to find the SICStus
     libraries and bootfiles.  Two paths are normally hardcoded; the
     value of 'SP_PATH' and, where possible, the runtime library search
     path using the '-R' linker option (or equivalent).  If the linker
     does not support the '-R' option (or an equivalent), then a wrapper
     script is generated instead, which sets 'LD_LIBRARY_PATH' (or
     equivalent).

     The '--moveable' option turns off this behavior, so the executable
     is not dependent on SICStus being installed in a specific place.
     On most platforms the executable can figure out where it is located
     and so can locate any files it need, e.g. using 'SP_APP_DIR' and
     'SP_RT_DIR'.  On some UNIX platforms, however, this is not
     possible.  In these cases, '--moveable' is in effect, the
     executable will rely on the system properties and enviroment
     variables ('SP_PATH' (*note System Properties and Environment
     Variables::) and 'LD_LIBRARY_PATH' etc.)  to find all relevant
     files.

     Under Windows, '--moveable' is always on, since Windows
     applications do not need to hardcode paths in order for them to
     find out where they are installed.  On UNIX platforms, '--moveable'
     is the default (as of release 4.2) but can be turned off with
     '--no-moveable'.  *Note Runtime Systems on Target Machines::.  for
     more information on how SICStus locates its libraries and
     bootfiles.

'-S'
'--static'
     Link statically with SICStus runtime and foreign resources.  When
     '--static' is specified, a static version of the SICStus runtime
     will be used and any SICStus foreign resources specified with
     '--resources' will be statically linked with the executable.  In
     addition, '--static' implies '--embed-rt-sav', '--embed-sav-file'
     and '--resources-from-sav'.

     Even with '--static', 'spld' will go with the linker's default,
     which is usually dynamic.  If you are in a situation where you
     would want 'spld' to use a static library instead of a dynamic one,
     then you will have to hack into 'spld''s configuration file
     'spconfig-VERSION' (normally located in '<installdir>/bin').  We
     recommend that you make a copy of the configuration file and
     specify the new configuration file using '--config=<file>'.  A
     typical modification of the configuration file for this purpose may
     look like:
          [...]
          TCLLIB=-Bstatic -L/usr/local/lib -ltk8.0 -ltcl8.0 -Bdynamic
          [...]
     Use the new configuration file by typing
          % spld [...] -S --config=/home/joe/hacked_spldconfig [...]

     The SICStus runtime depends on certain OS support that is only
     available in dynamically linked executables.  For this reason it
     will probably not work to try to tell the linker to build a
     completely static executable, i.e. an executable that links
     statically also with the C library and that cannot load shared
     objects.

'--shared'
     Create a shared library runtime system instead of an ordinary
     executable.  Not compatible with '--static'.  Implies
     '--main=none'.

     Not supported on all platforms.

'--resources=RESOURCELIST'
     RESOURCELIST is a comma-separated list of resource names,
     describing which resources should be prelinked with the executable.
     Names can be either simple resource names, for example 'tcltk', or
     they can be complete paths to a foreign resource (with or without
     extensions).  Example
          % spld [...] --resources=tcltk,clpfd,/home/joe/foobar.so
     This will cause 'library(tcltk)', 'library(clpfd)', and
     '/home/joe/foobar.so' to be prelinked with the executable.  See
     also the option '--respath' below.

     It is also possible to embed a "data resource", that is, the
     contents of an arbitrary data file that can be accessed at runtime.

     It is possible to embed any kind of data, but, currently, only
     'restore/1' knows about data resources.  For this reason it only
     makes sense to embed '.sav' files.

     The primary reason to embed files within the executable is to
     create an all-in-one executable, that is, an executable file that
     does not depend on any other files and that therefore is easy to
     run on machines without SICStus installed.  *Note All-in-one
     Executables::.  for more information.

'--resources-from-sav'
'--no-resources-from-sav'
     When embedding a saved-state as a data resource (with '--resources'
     or '--embed-sav-file'), this option extracts information from the
     embedded saved-state about the names of the foreign resources that
     were loaded when the saved-state was created.  This is the default
     for static executables when no other resource is specified except
     the embedded saved-state.  This option is only supported when a
     saved-state is embedded as a data resource.  *Note All-in-one
     Executables::.  for more information.

     Use '--no-resources-from-sav' to ensure that this feature is _not_
     enabled.

'--respath=PATH'
     Specify additional paths used for searching for resources.  PATH is
     a list of search-paths, colon separated under UNIX, semicolon
     separated under Windows.  'spld' will always search the default
     library directory as a last resort, so if this option is not
     specified, then only the default resources will be found.  See also
     the '--resources' option above.

'--config=CONFIGFILE'
     Specify another configuration file.  This option is not intended
     for normal use.  The file name may not contain spaces.

'--conf VAR=VALUE   since release 4.0.3'
     Override values from the configuration file.  Can occur multiple
     times.  For instance, '--conf CC=/usr/bin/gcc' would override the
     default C compiler.

'--cflag=CFLAG'
     CFLAG is an option to pass to the C-compiler.  This option can
     occur multiple times.

     The current behavior is that if CFLAG contains commas, then each
     comma-separated part is treated as a separate compiler option.
     This may change in the future, so instead you should use multiple
     occurences of '--cflag'.  To turn off splitting at commas and treat
     CFLAG as a single option even it contains a comma, you can pass the
     option '--conf SPLIT_OPT_CFLAG=0'.  This can be useful with certain
     options to the 'gcc' compiler.

'--   since release 4.0.3'
'--LD   since release 4.0.3'
'-LD'
     Do Not process the rest of the command-line, but send it directly
     to the linker step.  Note that linking is often performed by the
     compiler.

'--sicstus=EXECUTABLE'
     'spld' relies on using SICStus during some stages of its execution.
     The default is the SICStus-executable installed with the
     distribution.  EXECUTABLE can be used to override this, in case the
     user wants to use another SICStus executable.

'--interactive'
'-i'
     Only applicable with '--main=load' or '--main=restore'.  Calls
     'SP_force_interactive()' (*note Initializing the Prolog Engine::)
     before initializing SICStus.

'--userhook'
     This option allows you to define your own version of the
     'SU_initialize()' function.  'SU_initialize()' is called by the
     main program before 'SP_initialize()'.  Its purpose is to call
     interface functions that must be called before 'SP_initialize()',
     such as 'SP_set_memalloc_hooks()'.  It is not meaningful to specify
     this option if '--main=user' or '--main=none' is given.

'--memhook'
     This option allows you to specify which memory manager to use.  One
     of 'default' or 'malloc'.  If specified as 'malloc', then
     'SP_set_memalloc_hooks()' will be called with
     'SP_SET_MEMALLOC_HOOKS_HINT_USE_MALLOC' and the C library
     'malloc()' will be used for all allocations instead of SICStus
     default allocator.  *Note cpg-ref-SP_set_memalloc_hooks::.  for
     more information.

'--locale=LOCALE   since release 4.3'
'--no-locale'

     By default, on UNIX platforms, the executable created by 'spld'
     sets the process locale from the environment.

     Setting the process locale from the environment can suppressed by
     passing the '--no-locale' option to 'spld'.  This corresponds to
     the behavior prior to release 4.3.

     An explicit locale that the process should set on inititialization,
     can be passed with the '--locale' option to 'spld'.

     The valid locale names depends on the operating system.  Typically
     you can use the 'locale' utility, with the '-a' option, to list all
     valid locale names.

'--with_jdk=DIR'
'--with_tcltk=DIR'
'--with_tcl=DIR'
'--with_tk=DIR'
'--with_bdb=DIR'

     Specify the installation path for third-party software for foreign
     resources, such as 'jasper', that have special dependencies.  This
     is mostly useful under Windows.  Under UNIX, the installation
     script manages this automatically.

'--keep'
     Keep temporary files and interface code and rename them to
     human-readable names.  Not intended for the casual user, but useful
     if you want to know exactly what code is generated.

'--nocompile'
     Do Not compile, just generate code.  This may be useful in
     Makefiles, for example to generate the header file in a separate
     step.  Implies '--keep'.

'--namebase=NAMEBASE'
     Use NAMEBASE to construct the name of generated files.  This
     defaults to 'spldgen_' or, if '--static' is specified,
     'spldgen_s_'.

'--embed-rt-sav'
'--no-embed-rt-sav'
     '--embed-rt-sav' will embed the SICStus runtime '.sav' file into
     the executable.  This is off by default unless '--static' is
     specified.  It can be forced on (off) by specifying
     '--embed-rt-sav' ('--no-embed-rt-sav').

'--embed-sav-file'
'--no-embed-sav-file'
     '--embed-sav-file' will embed any '.sav' file passed to 'spld' into
     the executable.  This is just a shorthand for avoiding the ugly
     data resource syntax of the '--resources' option.  This is the
     default when '--static' is specified.  It can be forced on (off) by
     specifying '--embed-sav-file' ('--no-embed-sav-file').  A file
     './foo/bar.sav' will be added with the data resource name
     '/bar.sav', i.e. as if '--resources=./foo/bar.sav=/bar.sav' had
     been specified.

'--license-file=LICENSEFILE'

     Specify the path to the license information needed by extended
     runtime systems.  Only relevant with '--extended-rt'.  *Note
     Extended Runtime Systems::.  for details.

'--embed-license'
'--no-embed-license'

     Controls whether to embed the license information in the
     executable.  '--no-embed-license' is the default.  Only relevant
     with '--extended-rt'.  *Note Extended Runtime Systems::.  for
     details.

'--multi-sp-aware'
     Compile the application with support for using more than one
     SICStus runtime in the same process.  Not compatible with
     '--static' or prelinked foreign resources.  *Note Multiple SICStus
     Runtimes in C::.  for details.

   There may be additional, undocumented, options, some of which may be
described with the '--help' option.

Files
-----

Arguments to 'spld' not recognized as options are assumed to be
input-files and are handled as follows:

'*.pro'
'*.pl'
'*.po'
     These are interpreted as names of files containing Prolog code and
     will be passed to 'SP_load()' at runtime (if '--main' is 'load' or
     'restore').  *Please note:* If the intention is to make an
     executable that works independently of the working directory at run
     time, then avoid relative file names, for they will be resolved at
     run time, not at 'spld' time.  Use absolute file names instead,
     'SP_APP_DIR', 'SP_LIBRARY_DIR', or embed a '.sav' file as a data
     resource, using '--resource'.

'*.sav'
     These are interpreted as names of files containing saved-states and
     will be passed to 'SP_restore()' at runtime if '--main=restore' is
     specified, subject to the above caveat about relative file names.

     It is not meaningful to give more than one '.sav' argument.

'*.so'
'*.sl'
'*.s.o'
'*.o'
'*.obj'
'*.dll'
'*.lib'
'*.dylib'
     These files are assumed to be input-files to the linker and will be
     passed on unmodified.

'*.c'
'*.cc'
'*.C'
'*.cpp'
'*.c++'
     These files are assumed to be C/C++ source code and will be
     compiled by the C/C++-compiler before being passed to the linker.

   If an argument is still not recognized, then it will be passed
unmodified to the linker.

See Also
--------

*Note The Application Builder::.


File: sicstus.info,  Node: too-splfr,  Next: too-splm,  Prev: too-spld,  Up: Command Reference Pages

13.6 'splfr' -- SICStus Prolog Foreign Resource Linker
======================================================

Synopsis
--------

     % splfr [ OPTION | INPUTFILE ] ...

Description
-----------

The foreign resource linker, 'splfr', is used for creating foreign
resources (*note Foreign Resources::).  'splfr' reads terms from a
Prolog file, applying op declarations and extracting any
'foreign_resource/2' fact with first argument matching the resource name
and all 'foreign/[2,3]' facts.  Based on this information, it generates
the necessary glue code, and combines it with any additional C or object
files provided by the user into a linked foreign resource.  The output
file name will be the resource name with a suitable extension.

Options
-------

The input to 'splfr' can be divided into OPTIONs and INPUTFILEs and they
can be arbitrarily mixed on the command line.  Anything not interpreted
as an option will be interpreted as an input file.  Exactly one of the
input files should be a Prolog file.  The following options are
available:

'-?'
'--help'
     Prints out a summary of all options.

'-v'
'--verbose'
     Print detailed information about each step in the
     compilation/linking sequence.  Multiple occurrences increase
     verbosity.

'-vv'
     Same as -v -v.

'--version'
     Prints out the version number of 'spld' and exits successfully.

'--config=CONFIGFILE'
     Specify another configuration file.  This option is not intended
     for normal use.  The file name may not contain spaces.

'--conf VAR=VALUE   since release 4.0.3'
     Override values from the configuration file.  Can occur multiple
     times.  For instance, '--conf CC=/usr/bin/gcc' would override the
     default C compiler.

'--cflag=CFLAG'
     CFLAG is an option to pass to the C-compiler.  This option can
     occur multiple times.

     The current behavior is that if CFLAG contains commas, then each
     comma-separated part is treated as a separate compiler option.
     This may change in the future, so instead you should use multiple
     occurences of '--cflag'.  To turn off splitting at commas and treat
     CFLAG as a single option even it contains a comma, you can pass the
     option '--conf SPLIT_OPT_CFLAG=0'.  This can be useful with certain
     options to the 'gcc' compiler.

'--   since release 4.0.3'
'--LD   since release 4.0.3'
'-LD'
     Do Not process the rest of the command-line, but send it directly
     to the compiler/linker.  Note that linking is often performed by
     the compiler.

'--sicstus=EXECUTABLE'
     'splfr' relies on using SICStus during some stages of its
     execution.  The default is the SICStus-executable installed with
     the distribution.  EXECUTABLE can be used to override this, in case
     the user wants to use another SICStus executable.

'--keep'
     Keep temporary files and interface code and rename them to
     human-readable names.  Not intended for the casual user, but useful
     if you want to know exactly what code is generated.

'--resource=RESOURCENAME'
     Specify the resource's name.  This defaults to the basename of the
     Prolog source file found on the command line.

'-o, --output=OUTPUTFILENAME'
     Specify output file name.  This defaults to the name of the
     resource, suffixed with the platform's standard shared object
     suffix (i.e. '.so' on most UNIX dialects, '.dll' under Windows).
     The use of this option is discouraged, except to change the output
     directory.

'-S'
'--static'
     Create a statically linked foreign resource instead of a
     dynamically linked one, which is the default.  A statically linked
     foreign resource is a single object file, which can be prelinked
     into a Prolog system.  See also the 'spld' tool, *note The
     Application Builder::.

'--no-rpath'
     Under UNIX, the default is to embed into the shared object all
     linker library directories for use by the dynamic linker.  For most
     UNIX linkers this corresponds to adding a '-RPATH' for each
     '-LPATH'.  The '--no-rpath' option inihibits this.

'--nocompile'
     Do Not compile, just generate code.  This may be useful in
     Makefiles, for example to generate the header file in a separate
     step.  Implies '--keep'.

'--namebase=NAMEBASE'
     NAMEBASE will be used as part of the name of generated files.  The
     default name base is the resource name (e.g. as specified with
     '--resource').  If '--static' is specified, then the default
     NAMEBASE is the resource name followed by '_s'.

'--header=HEADERNAME'
     Specify the name of the generated header file.  The default is
     'NAMEBASE_glue.h'.  All C files that define foreign functions or
     that call SICStus API functions should include this file.  Among
     other things the generated header file includes prototypes
     corresponding to the 'foreign/[2,3]' declarations in the Prolog
     code.

'--multi-sp-aware'

     Create a (dynamic) foreign resource that can be loaded by several
     SICStus runtimes in the same process, at the same time.  *Note
     Foreign Resources and Multiple SICStus Runtimes::.  for details.

'--moveable'
     Do Not embed paths into the foreign resource.

     On platforms that support it, i.e. some versions of UNIX, the
     default behavior of 'splfr' is to add each directory DIR specified
     with '-LDIR' to the search path used by the runtime loader (using
     the SysV 'ld -R' option or similar).  The option '--moveable' turns
     off this behavior.  For additional details, see the corresponding
     option to 'spld' (*note The Application Builder::).

'--structs'
     The Prolog source file uses 'library(structs)'.  This option makes
     'splfr' understand foreign type specifications and translate them
     into C declarations in the generated header file.  See *Note
     lib-structs::.

'--objects   since release 4.3'
     The Prolog source file uses 'library(objects)'.  This option makes
     'splfr' understand that library's syntax extensions.  See *Note
     lib-objects::.

there may be additional, undocumented, options, some of which may be
described with the '--help' option.

Files
-----

Arguments to 'spld' not recognized as options are assumed to be
input-files and are handled as follows:

'*.pro'
'*.pl'
     The Prolog file containing the relevant declarations.  Exactly one
     such argument should be given.

'*.so'
'*.sl'
'*.s.o'
'*.o'
'*.obj'
'*.dll'
'*.lib'
'*.dylib'
     These files are assumed to be input-files to the linker and will be
     passed on unmodified.

'*.c'
'*.cc'
'*.C'
'*.cpp'
'*.c++'
     These files are assumed to be C/C++ source code and will be
     compiled by the C/C++-compiler before being passed to the linker.

See Also
--------

*note The Foreign Resource Linker::.


File: sicstus.info,  Node: too-splm,  Next: too-spxref,  Prev: too-splfr,  Up: Command Reference Pages

13.7 'splm' -- SICStus Prolog License Manager
=============================================

Synopsis
--------

     % splm -i SITE
     % splm -a LICENSEDPRODUCT EXPIRATIONDATE CODE

Description
-----------

SICStus Prolog requires a license code to run.  You should have received
from SICS your site name, the expiration date and the code.  This
information is normally entered during installation, but it can also be
entered later on by means of this command-line tool.

   Under Windows, 'splm' must be run by a user with Administrative
rights.  The windowed version of SICStus ('spwin.exe') has a menu item
for license entry, making 'splm' unnecessary under Windows.

   *Please note:* when using 'spwin.exe' for changing the license
information, it too must be run with Administrative rights.  This is
especially important under Windows Vista and later.

Files
-----

'library/license.pl'

See Also
--------

*note Start::.


File: sicstus.info,  Node: too-spxref,  Prev: too-splm,  Up: Command Reference Pages

13.8 'spxref' -- Cross Referencer
=================================

Synopsis
--------

     % spxref [-R] [-v] [-c] [-i IFILE] [-w WFILE] [-x XFILE] [-u UFILE] FSPEC ...

Description
-----------

The main purpose is to find undefined predicates and unreachable code.
To this end, it begins by looking for initializations, hooks and
'public' directives to start tracing the reachable code from.  If an
entire application is being checked, then it also traces from
'user:runtime_entry/1'.  If individual module-files are being checked,
then it also traces from their export lists.

Options
-------

FILE arguments should be given as atoms or as '-', denoting the standard
output stream.

'-R'
     Check an application, i.e. follow 'user:runtime_entry/1', as
     opposed to module declarations.
'-c'
     Generate standard compiler style error messages.
'-v'
     Verbose output.  This echoes the names of the files being read.
'-i IFILE'
     An initialization file, which is loaded before processing begins.
'-w WFILE'
     Warning file.  Warnings are written to the standard error stream by
     default.
'-x XFILE'
     Generate a cross-reference file.  This is not generated by default.
'-m MFILE'
     Generate a file indicating which predicates are imported and which
     are exported for each file.  This is not generated by default.
'-u UFILE'
     Generate a file listing all the undefined predicates.  This is not
     generated by default.

See Also
--------

*note The Cross-Referencer::.


File: sicstus.info,  Node: References,  Next: Predicate Index,  Prev: Command Reference Pages,  Up: Top

References
**********

'[Aggoun & Beldiceanu 90]'
     A. Aggoun and N. Beldiceanu, 'Time Stamps Techniques for the
     Trailed Data in Constraint Logic Programming Systems', Actes du
     se'minaires Programmation en Logique, Tre'gastel, France, May 1990.

'[Aggoun & Beldiceanu 93]'
     A. Aggoun and N. Beldiceanu, 'Extending CHIP in order to Solve
     Complex Scheduling and Placement Problems', Mathl. Comput.
     Modelling, vol. 17, no. 7, pp. 57-73, Pergamon Press Ltd., 1993.

'[Beldiceanu, Carlsson, Flener & Pearson 10]'
     N. Beldiceanu, M. Carlsson, P. Flener, J. Pearson, 'On Matrices,
     Automata, and Double Counting', Constraints 18(1): 108-140, 2013.

'[Beldiceanu, Carlsson & Petit 04]'
     N. Beldiceanu, M. Carlsson, T. Petit, 'Deriving Filtering
     Algorithms from Constraint Checkers', CP, LNCS 3258, Springer,
     2004.

'[Beldiceanu, Carlsson & Rampon 05]'
     N. Beldiceanu, M. Carlsson, J.-X. Rampon, 'Global Constraint
     Catalog', SICS Technical Report T2005-08, 2005.

'[Beldiceanu & Contejean 94]'
     N. Beldiceanu and E. Contejean, 'Introducing Global Constraints in
     CHIP', Mathl. Comput. Modelling, vol. 20, no. 12, pp. 97-123,
     Pergamon Press Ltd., 1994.

'[Bryant 86]'
     R.E. Bryant, 'Graph-Based Algorithms for Boolean Function
     Manipulation', IEEE Trans. on Computers, August, 1986.

'[CHIP 03]'
     'CHIP Finite domain constraints Reference Manual', Release 5.5, pp.
     36-38, 2003.

'[Carlsson 90]'
     M. Carlsson, 'Design and Implementation of an OR-Parallel Prolog
     Engine', SICS Dissertation Series 02, 1990.

'[Carlsson & Beldiceanu 02]'
     M. Carlsson, N. Beldiceanu, 'Arc-Consistency for a Chain of
     Lexicographic Ordering Constraints', SICS Technical Report
     T2002-18, 2002.

'[Carlsson, Beldiceanu & Martin 08]'
     M. Carlsson, N. Beldiceanu, J. Martin, 'A Geometric Constraint over
     k-Dimensional Objects and Shapes Subject to Business Rules', SICS
     Technical Report T2008-04, 2008.

'[Carreiro & Gelernter 89a]'
     N. Carreiro and D. Gelernter, 'Linda in Context', CACM, 32(4) 1989.

'[Carreiro & Gelernter 89b]'
     N. Carreiro and D. Gelernter, 'How to Write Parallel Programs: A
     Guide to the Perplexed', ACM Computing Surveys, September 1989.

'[Clocksin & Mellish 81]'
     W.F. Clocksin and C.S. Mellish, 'Programming in Prolog', Springer,
     1981.

'[Colmerauer 90]'
     Colmerauer A.: An Introduction to Prolog III, CACM, 33(7), 69-90,
     1990.

'[Diaz & Codognet 93]'
     D. Diaz and P. Codognet, 'A Minimal Extension of the WAM for
     clp(FD)', ICLP, MIT Press, 1993.

'[Fruehwirth 98]'
     Th. Fruehwirth, 'Theory and Practice of Constraint Handling Rules',
     Special Issue on Constraint Logic Programming (P. Stuckey and K.
     Marriot, Eds.), Journal of Logic Programming, Vol 37(1-3), pp.
     95-138, October 1998.

'[Gorlick & Kesselman 87]'
     M.M. Gorlick and C.F. Kesselman, 'Timing Prolog Programs Without
     Clocks', Symposium on Logic Programming, pp. 426-432, IEEE Computer
     Society, 1987.

'[Hanak et al. 04]'
     D. Hana'k, T. Szeredi, P. Szeredi: 'FDBG, the CLPFD Debugger
     Library of SICStus Prolog'.  International Workshop on Logic
     Programming Environments (WLPE'04), 2004.

'[Heintze et al. 87]'
     N. Heintze, J. Jaffar, S. Michaylov, P. Stuckey, R. Yap, 'The
     CLP(R) Programmers Manual', Monash University, Clayton, Victoria,
     Australia, Department of Computer Science, 1987.

'[Holzbaur 92a]'
     C. Holzbaur, 'A High-Level Approach to the Realization of CLP
     Languages', JICSLP92 Post-Conference Workshop on Constraint Logic
     Programming Systems, Washington D.C., 1992.

'[Holzbaur 94]'
     C. Holzbaur, 'A Specialized, Incremental Solved Form Algorithm for
     Systems of Linear Inequalities', Austrian Research Institute for
     Artificial Intelligence, Vienna, TR-94-07, 1994.

'[Jaffar & Michaylov 87]'
     J. Jaffar, S. Michaylov, 'Methodology and Implementation of a CLP
     System', ICLP, MIT Press, Cambridge, MA, 1987.

'[Kowalski 74]'
     R.A. Kowalski, 'Logic for Problem Solving', DCL Memo 75, Dept of
     Artificial Intelligence, University of Edinburgh, March, 1974.

'[Kowalski 79]'
     R.A. Kowalski, 'Artificial Intelligence: Logic for Problem
     Solving'.  North Holland, 1979.

'[Letort, Beldiceanu & Carlsson 14]'
     A. Letort, N. Beldiceanu, M. Carlsson, 'Synchronized sweep
     algorithms for scalable scheduling constraints', Constraints, DOI
     10.1007/s10601-014-9172-8, 2014.

'[Lopez-Ortiz 03]'
     A Lopez-Ortiz, CG Quimper, J Tromp, P van Beek, 'A fast and simple
     algorithm for bounds consistency of the alldifferent constraint',
     IJCAI 2003.

'[Mehlhorn 00]'
     K. Mehlhorn and Sven Thiel, 'Faster algorithms for
     bound-consistency of the sortedness and the alldifferent
     constraint', CP, LNCS 1894, Springer, 2000.

'[O'Keefe 90]'
     R.A. O'Keefe, 'The Craft of Prolog', MIT Press, 1990.

'[Ousterhout 94]'
     John K. Ousterhout, 'Tcl and the Tk Toolkit'.  Addison-Wesley,
     1994.

'[Regin 94]'
     J.-C. Regin, 'A filtering algorithm for constraints of difference
     in CSPs', AAAI, pp. 362-367, 1994

'[Regin 96]'
     J.-C. Regin, 'Generalized Arc Consistency for Global Cardinality
     Constraint', AAAI, 1996.

'[Regin 99]'
     J.-C. Regin, 'Arc Consistency for Global Cardinality with Costs',
     CP, LNCS 1713, pp. 390-404, 1999.

'[Schrijvers & Demoen 04]'
     T. Schrijvers and B. Demoen, 'The K.U.Leuven CHR System:
     Implementation and Application', First Workshop on Constraint
     Handling Rules: Selected Contributions (T. Fruehwirth and M.
     Meister, eds.), pp. 1-5, 2004.

'[Sellmann 02]'
     M. Sellmann, 'An Arc Consistency Algorithm for the Minimum Weight
     All Different Constraint', CP, LNCS 2470, Springer, 2002.

'[Razakarison, Carlsson, Beldiceanu & Simonis 13]'
     N. Razakarison, M. Carlsson, N. Beldiceanu and H. Simonis, 'GAC for
     a linear inequality and an atleast constraint with an application
     to learning simple polynomials', Sixth Annual Symposium on
     Combinatorial Search, 2013.

'[Robinson 65]'
     J.A. Robinson, 'A Machine-Oriented Logic Based on the Resolution
     Principle', JACM 12:23-44, January 1965.

'[Roussel 75]'
     P. Roussel, 'Prolog : Manuel de Reference et d'Utilisation', Groupe
     d'Intelligence Artificielle, Marseille-Luminy, 1975.

'[Schimpf 2002]'
     J. Schimpf, 'Logical Loops'.  ICLP, pp. 224-238, MIT Press, 2002.

'[Sterling & Shapiro 86]'
     L. Sterling and E. Shapiro, 'The Art of Prolog'.  The MIT Press,
     Cambridge MA, 1986.

'[Van Hentenryck 89]'
     P. Van Hentenryck, 'Constraint Satisfaction in Logic Programming',
     Logic Programming Series, The MIT Press, 1989.

'[Van Hentenryck et al. 95]'
     P. Van Hentenryck, V. Saraswat and Y. Deville, 'Design,
     implementation and evaluation of the constraint language cc(FD)'.
     In A. Podelski, ed., Constraints: Basics and Trends, LNCS 910.
     Springer, 1995.

'[Warren 83]'
     D.H.D. Warren, 'An Abstract Prolog Instruction Set', Technical Note
     309, SRI International, 1983.


File: sicstus.info,  Node: Predicate Index,  Next: Keystroke Index,  Prev: References,  Up: Top

Predicate Index
***************

 [index ]
* Menu:

* !/0 (built-in, ref page):              mpg-ref-cut.         (line   6)
* !/0, cut:                              ref-sem-ctr-cut.     (line   6)
* #/\ /2 (clpfd):                        Propositional Constraints.
                                                              (line  30)
* #< /2 (clpfd):                         Arithmetic Constraints.
                                                              (line   8)
* #<= /2 (clpfd):                        Propositional Constraints.
                                                              (line  43)
* #<=> /2 (clpfd):                       Reified Constraints. (line  14)
* #<=> /2 (clpfd) <1>:                   Propositional Constraints.
                                                              (line  47)
* #= /2 (clpfd):                         Arithmetic Constraints.
                                                              (line   8)
* #=< /2 (clpfd):                        Arithmetic Constraints.
                                                              (line   8)
* #=> /2 (clpfd):                        Propositional Constraints.
                                                              (line  43)
* #> /2 (clpfd):                         Arithmetic Constraints.
                                                              (line   8)
* #>= /2 (clpfd):                        Arithmetic Constraints.
                                                              (line   8)
* #\ /1 (clpfd):                         Propositional Constraints.
                                                              (line  26)
* #\ /2 (clpfd):                         Propositional Constraints.
                                                              (line  34)
* #\/ /2 (clpfd):                        Propositional Constraints.
                                                              (line  38)
* #\= /2 (clpfd):                        Arithmetic Constraints.
                                                              (line   8)
* 'SU_messages':generate_message/3:      Message Handling Predicates.
                                                              (line  25)
* 'SU_messages':query_abbreviation/3:    Query Handling Predicates.
                                                              (line  34)
* 'SU_messages':query_class/5:           Query Handling Predicates.
                                                              (line  30)
* 'SU_messages':query_input/3:           Query Handling Predicates.
                                                              (line  46)
* 'SU_messages':query_map/4:             Query Handling Predicates.
                                                              (line  58)
* ,/2 (built-in, ref page):              mpg-ref-and.         (line   6)
* ,/2, conjunction:                      ref-sem-ctr.         (line   6)
* -> /2 ;/2, if then else:               ref-sem-ctr-ite.     (line   6)
* -> /2, if then:                        ref-sem-ctr-ite.     (line  29)
* ->/2 (built-in, ref page):             mpg-ref-if_then.     (line   6)
* : /2, module qualifier:                ref-sem-ctr-oth.     (line  16)
* :- /1, directive:                      Directives.          (line   6)
* ;/2 (built-in, ref page):              mpg-ref-or.          (line   6)
* ;/2, disjunction:                      ref-sem-ctr-dis.     (line   6)
* <-/2 (objects):                        obj-exp-send.        (line   6)
* </2 (built-in, ref page):              mpg-ref-less_than.   (line   6)
* <</2 (objects):                        obj-exp-put.         (line   6)
* =../2 (built-in):                      ref-lte-act.         (line  15)
* =../2 (built-in, ref page):            mpg-ref-univ.        (line   6)
* =/2 (built-in):                        ref-lte-met-usu.     (line  10)
* =/2 (built-in, ref page):              mpg-ref-unify.       (line   6)
* =:=/2 (built-in, ref page):            mpg-ref-equal_to.    (line   6)
* =</2 (built-in, ref page):             mpg-ref-not_greater_than.
                                                              (line   6)
* ==/2 (built-in):                       ref-lte-cte-sot.     (line  35)
* ==/2 (built-in, ref page):             mpg-ref-term_equal_to.
                                                              (line   6)
* =\=/2 (built-in, ref page):            mpg-ref-not_equal_to.
                                                              (line   6)
* >/2 (built-in, ref page):              mpg-ref-greater_than.
                                                              (line   6)
* >=/2 (built-in, ref page):             mpg-ref-not_less_than.
                                                              (line   6)
* >>/2 (objects):                        obj-exp-get.         (line   6)
* ?- /1, query:                          Queries.             (line   6)
* ?=/2 (built-in):                       ref-lte-met-usu.     (line  29)
* ?=/2 (built-in, ref page):             mpg-ref-term_unify_decided.
                                                              (line   6)
* @</2 (built-in):                       ref-lte-cte-sot.     (line  35)
* @</2 (built-in, ref page):             mpg-ref-term_less_than.
                                                              (line   6)
* @=</2 (built-in):                      ref-lte-cte-sot.     (line  35)
* @=</2 (built-in, ref page):            mpg-ref-term_not_greater_than.
                                                              (line   6)
* @>/2 (built-in):                       ref-lte-cte-sot.     (line  35)
* @>/2 (built-in, ref page):             mpg-ref-term_greater_than.
                                                              (line   6)
* @>=/2 (built-in):                      ref-lte-cte-sot.     (line  35)
* @>=/2 (built-in, ref page):            mpg-ref-term_not_less_than.
                                                              (line   6)
* \+ /1, not provable:                   ref-sem-ctr-naf.     (line   6)
* \+/1 (built-in, ref page):             mpg-ref-not_provable.
                                                              (line   6)
* \= /2 (built-in):                      ref-lte-met-usu.     (line  24)
* \=/2 (built-in, ref page):             mpg-ref-not_unifiable.
                                                              (line   6)
* \==/2 (built-in):                      ref-lte-cte-sot.     (line  35)
* \==/2 (built-in, ref page):            mpg-ref-term_not_equal_to.
                                                              (line   6)
* ^ /2, existential quantifier:          ref-sem-ctr-oth.     (line   6)
* ^/2 (built-in):                        ref-all-cse-equ.     (line   6)
* ^/2 (built-in, ref page):              mpg-ref-exists.      (line   6)
* {}/1 (clpqr):                          CLPQR Solver Predicates.
                                                              (line  11)
* abolish/[1,2] (built-in):              ref-mdb-rcd.         (line  19)
* abolish/[1,2] (built-in, ref page):    mpg-ref-abolish.     (line   6)
* abort/0 (built-in):                    ref-ere-int.         (line  21)
* abort/0 (built-in, ref page):          mpg-ref-abort.       (line   6)
* absolute_file_name/[2,3] (built-in, ref page): mpg-ref-absolute_file_name.
                                                              (line   6)
* acyclic_term/1 (built-in, ref page):   mpg-ref-acyclic_term.
                                                              (line   6)
* acyclic_term/2 (built-in):             ref-lte-act.         (line  19)
* add_breakpoint/2 (built-in):           Breakpoint Predicates.
                                                              (line  11)
* add_breakpoint/2 (built-in, ref page): mpg-ref-add_breakpoint.
                                                              (line   6)
* add_edges/3 (ugraphs):                 lib-ugraphs.         (line  64)
* add_edges/3 (wgraphs):                 lib-wgraphs.         (line  81)
* add_element/3 (sets):                  lib-sets.            (line  13)
* add_vertices/3 (ugraphs):              lib-ugraphs.         (line  57)
* add_vertices/3 (wgraphs):              lib-wgraphs.         (line  34)
* aggregate/3 (aggregate):               lib-aggregate.       (line 143)
* aggregate/4 (aggregate):               lib-aggregate.       (line 139)
* aggregate_all/3 (aggregate):           lib-aggregate.       (line 151)
* aggregate_all/4 (aggregate):           lib-aggregate.       (line 147)
* all/1 (plunit option):                 PlUnit A Unit Test Box.
                                                              (line 128)
* all_different/[1,2] (clpfd):           Arithmetic-Logical Constraints.
                                                              (line 106)
* all_distinct/[1,2] (clpfd):            Arithmetic-Logical Constraints.
                                                              (line 106)
* append/3 (built-in):                   ref-lte-acl.         (line   6)
* append/3 (built-in, ref page):         mpg-ref-append.      (line   6)
* append/[2,5] (lists):                  lib-lists.           (line  19)
* append_length/[3,4] (lists):           lib-lists.           (line 272)
* append_queue/3 (queues):               lib-queues.          (line  74)
* arg/3 (built-in):                      ref-lte-act.         (line  12)
* arg/3 (built-in, ref page):            mpg-ref-arg.         (line   6)
* arithmetic_mean/2 (statistics):        lib-statistics.      (line  39)
* ask_query/4 (built-in):                Query Handling Predicates.
                                                              (line   8)
* ask_query/4 (built-in, ref page):      mpg-ref-ask_query.   (line   6)
* assert/[1,2] (built-in):               ref-mdb-acd.         (line  14)
* assert/[1,2] (built-in, ref page):     mpg-ref-assert.      (line   6)
* asserta/[1,2] (built-in):              ref-mdb-acd.         (line  14)
* asserta/[1,2] (built-in, ref page):    mpg-ref-asserta.     (line   6)
* assertz/[1,2] (built-in):              ref-mdb-acd.         (line  14)
* assertz/[1,2] (built-in, ref page):    mpg-ref-assertz.     (line   6)
* assignment/[2,3] (clpfd):              Arithmetic-Logical Constraints.
                                                              (line 181)
* assoc_to_list/2 (assoc):               lib-assoc.           (line  18)
* atom/1 (built-in, ref page):           mpg-ref-atom.        (line   6)
* atomic/1 (built-in, ref page):         mpg-ref-atomic.      (line   6)
* atomic_type/[1,2,3] (structs):         str-etr.             (line  35)
* atom_chars/2 (built-in):               ref-lte-c2t.         (line   6)
* atom_chars/2 (built-in) <1>:           ref-lte-c2t.         (line  22)
* atom_chars/2 (built-in, ref page):     mpg-ref-atom_chars.  (line   6)
* atom_codes/2 (built-in):               ref-lte-c2t.         (line   6)
* atom_codes/2 (built-in) <1>:           ref-lte-c2t.         (line  11)
* atom_codes/2 (built-in, ref page):     mpg-ref-atom_codes.  (line   6)
* atom_concat/3 (built-in):              ref-lte-atm.         (line  10)
* atom_concat/3 (built-in, ref page):    mpg-ref-atom_concat. (line   6)
* atom_length/2 (built-in):              ref-lte-atm.         (line   6)
* atom_length/2 (built-in, ref page):    mpg-ref-atom_length. (line   6)
* attribute/1 (declaration):             lib-atts.            (line  21)
* attribute_goal/2 (Module):             lib-atts.            (line 119)
* at_end_of_line/[0,1] (built-in):       ref-iou-cin-elf.     (line   6)
* at_end_of_line/[0,1] (built-in, ref page): mpg-ref-at_end_of_line.
                                                              (line   6)
* at_end_of_stream/[0,1] (built-in):     ref-iou-cin-elf.     (line   6)
* at_end_of_stream/[0,1] (built-in, ref page): mpg-ref-at_end_of_stream.
                                                              (line   6)
* automaton/[3,8,9] (clpfd):             Automata Constraints.
                                                              (line  21)
* avl_change/5 (avl):                    lib-avl.             (line 116)
* avl_delete/4 (avl):                    lib-avl.             (line 157)
* avl_del_max/4 (avl):                   lib-avl.             (line 168)
* avl_del_min/4 (avl):                   lib-avl.             (line 162)
* avl_domain/2 (avl):                    lib-avl.             (line  33)
* avl_fetch/2 (avl):                     lib-avl.             (line  85)
* avl_fetch/3 (avl):                     lib-avl.             (line  90)
* avl_height/2 (avl):                    lib-avl.             (line  57)
* avl_incr/4 (avl):                      lib-avl.             (line 153)
* avl_map/2 (avl):                       lib-avl.             (line 174)
* avl_map/3 (avl):                       lib-avl.             (line 178)
* avl_max/2 (avl):                       lib-avl.             (line  51)
* avl_max/3 (avl):                       lib-avl.             (line  54)
* avl_member/2 (avl):                    lib-avl.             (line  72)
* avl_member/3 (avl):                    lib-avl.             (line  78)
* avl_min/2 (avl):                       lib-avl.             (line  45)
* avl_min/3 (avl):                       lib-avl.             (line  48)
* avl_next/3 (avl):                      lib-avl.             (line  96)
* avl_next/4 (avl):                      lib-avl.             (line 100)
* avl_prev/3 (avl):                      lib-avl.             (line 106)
* avl_prev/4 (avl):                      lib-avl.             (line 110)
* avl_range/2 (avl):                     lib-avl.             (line  38)
* avl_size/2 (avl):                      lib-avl.             (line  61)
* avl_store/4 (avl):                     lib-avl.             (line 147)
* avl_to_list/2 (avl):                   lib-avl.             (line  18)
* bagof/3 (built-in):                    ref-all-cba.         (line  10)
* bagof/3 (built-in, ref page):          mpg-ref-bagof.       (line   6)
* bagof_rd_noblock/3 (linda_client):     lib-linda-client.    (line 101)
* bag_add_element/4 (bags):              lib-bags.            (line 198)
* bag_del_element/4 (bags):              lib-bags.            (line 202)
* bag_intersect/2 (bags):                lib-bags.            (line 194)
* bag_intersection/2 (bags):             lib-bags.            (line 184)
* bag_intersection/2 (bags) <1>:         lib-bags.            (line 188)
* bag_max/2 (bags):                      lib-bags.            (line 129)
* bag_max/3 (bags):                      lib-bags.            (line 144)
* bag_min/2 (bags):                      lib-bags.            (line 135)
* bag_min/2 (bags) <1>:                  lib-bags.            (line 150)
* bag_subtract/3 (bags):                 lib-bags.            (line 206)
* bag_to_list/2 (bags):                  lib-bags.            (line  80)
* bag_to_ord_set/2 (bags):               lib-bags.            (line  85)
* bag_to_ord_set/3 (bags):               lib-bags.            (line  91)
* bag_to_set/2 (bags):                   lib-bags.            (line 101)
* bag_to_set/3 (bags):                   lib-bags.            (line 107)
* bag_union/2 (bags):                    lib-bags.            (line 179)
* bag_union/3 (bags):                    lib-bags.            (line 176)
* bb_delete/2 (built-in):                ref-mdb-bbd.         (line  36)
* bb_delete/2 (built-in, ref page):      mpg-ref-bb_delete.   (line   6)
* bb_get/2 (built-in):                   ref-mdb-bbd.         (line  30)
* bb_get/2 (built-in, ref page):         mpg-ref-bb_get.      (line   6)
* bb_inf/[3,5] (clpqr):                  CLPQR Solver Predicates.
                                                              (line 134)
* bb_inf/[3,5] (clpqr) <1>:              CLPQR Solver Predicates.
                                                              (line 147)
* bb_put/2 (built-in):                   ref-mdb-bbd.         (line  26)
* bb_put/2 (built-in, ref page):         mpg-ref-bb_put.      (line   6)
* bb_update/3 (built-in):                ref-mdb-bbd.         (line  42)
* bb_update/3 (built-in, ref page):      mpg-ref-bb_update.   (line   6)
* begin_tests/[1,2] (plunit declaration): PlUnit A Unit Test Box.
                                                              (line  10)
* between/3 (between):                   lib-between.         (line  11)
* bin_packing/2 (clpfd):                 Placement Constraints.
                                                              (line 148)
* block/1 (built-in, ref page):          mpg-ref-block.       (line   6)
* block/1 (declaration):                 Block Declarations.  (line   6)
* blocked/1 (plunit option):             PlUnit A Unit Test Box.
                                                              (line  35)
* bool_and/2 (clpfd):                    Arithmetic-Logical Constraints.
                                                              (line 312)
* bool_channel/4 (clpfd):                Arithmetic-Logical Constraints.
                                                              (line 332)
* bool_or/2 (clpfd):                     Arithmetic-Logical Constraints.
                                                              (line 319)
* bool_xor/2 (clpfd):                    Arithmetic-Logical Constraints.
                                                              (line 326)
* break/0 (built-in):                    Nested.              (line   6)
* break/0 (built-in) <1>:                ref-lod-rpx.         (line   6)
* break/0 (built-in) <2>:                ref-ere-int.         (line   9)
* break/0 (built-in, ref page):          mpg-ref-break.       (line   6)
* breakpoint_expansion/2 (hook, ref page): mpg-ref-breakpoint_expansion.
                                                              (line   6)
* breakpoint_expansion/2 (user, hook):   Hooks Related to Breakpoints.
                                                              (line   8)
* breakpoint_expansion/2 (user, hook) <1>: Condition Macros.  (line  22)
* byte_count/2 (built-in):               ref-iou-sfh-opn.     (line  80)
* byte_count/2 (built-in) <1>:           ref-iou-sos.         (line  16)
* byte_count/2 (built-in, ref page):     mpg-ref-byte_count.  (line   6)
* call/[1,2,...,255] (built-in, ref page): mpg-ref-call.      (line   6)
* callable/1 (built-in, ref page):       mpg-ref-callable.    (line   6)
* call_cleanup/2 (built-in, ref page):   mpg-ref-call_cleanup.
                                                              (line   6)
* call_residue_vars/2 (built-in, ref page): mpg-ref-call_residue_vars.
                                                              (line   6)
* case/[3,4] (clpfd):                    Extensional Constraints.
                                                              (line  80)
* cast/1 (structs):                      str-cas.             (line   6)
* catch/3 (built-in):                    ref-ere-hex-pgo.     (line   6)
* catch/3 (built-in, ref page):          mpg-ref-catch.       (line   6)
* central_moment/3 (statistics):         lib-statistics.      (line  52)
* character_count/2 (built-in):          ref-iou-sfh-opn.     (line  80)
* character_count/2 (built-in) <1>:      ref-iou-sos.         (line  19)
* character_count/2 (built-in, ref page): mpg-ref-character_count.
                                                              (line   6)
* char_code/2 (built-in):                ref-lte-c2t.         (line   6)
* char_code/2 (built-in) <1>:            ref-lte-c2t.         (line  33)
* char_code/2 (built-in, ref page):      mpg-ref-char_code.   (line   6)
* char_conversion/2 (built-in, ref page): mpg-ref-char_conversion.
                                                              (line   6)
* checkbag/2 (bags):                     lib-bags.            (line  51)
* chr_constraint/1 (CHR declaration):    CHR Constraint Declaration.
                                                              (line   6)
* chr_flag/3 (chr):                      CHR Debugging Predicates.
                                                              (line  32)
* chr_leash/1 (chr):                     CHR Debugging Predicates.
                                                              (line  23)
* chr_notrace/0 (chr):                   CHR Debugging Predicates.
                                                              (line  17)
* chr_option/2 (CHR declaration):        CHR Semantics.       (line  76)
* chr_show_store/1 (chr):                CHR Debugging Predicates.
                                                              (line  51)
* chr_trace/0 (chr):                     CHR Debugging Predicates.
                                                              (line  11)
* chr_type/1 (CHR declaration):          CHR Constraint Declaration.
                                                              (line  68)
* circuit/[1,2] (clpfd):                 Graph Constraints.   (line  14)
* class/1 (objects):                     obj-exp-class.       (line   6)
* class_ancestor/2 (objects):            obj-exp-class_ancestor.
                                                              (line   6)
* class_method/1 (objects):              obj-exp-class_method.
                                                              (line   6)
* class_of/2 (objects):                  obj-exp-class_of.    (line   6)
* class_superclass/2 (objects):          obj-exp-class_superclass.
                                                              (line   6)
* clause/[2,3] (built-in):               ref-mdb-acl.         (line   6)
* clause/[2,3] (built-in, ref page):     mpg-ref-clause.      (line   6)
* cleanup/1 (plunit option):             PlUnit A Unit Test Box.
                                                              (line  78)
* close/1 (built-in):                    ref-iou-sfh-cst.     (line   6)
* close/[1,2] (built-in, ref page):      mpg-ref-close.       (line   6)
* close_all_streams/0 (file_systems):    lib-file_systems.    (line 124)
* close_client/0 (linda_client):         lib-linda-client.    (line  30)
* clpfd:dispatch_global/4:               The Global Constraint Programming Interface.
                                                              (line  23)
* clpfd:full_answer/0:                   Answer Constraints.  (line  20)
* clumped/2 (lists):                     lib-lists.           (line 788)
* clumps/2 (lists):                      lib-lists.           (line 771)
* comclient_clsid_from_progid/2 (comclient): COM Client Predicates.
                                                              (line  29)
* comclient_create_instance/2 (comclient): COM Client Predicates.
                                                              (line  56)
* comclient_equal/2 (comclient):         COM Client Predicates.
                                                              (line  25)
* comclient_exception_code/2 (comclient): COM Client Predicates.
                                                              (line 106)
* comclient_exception_culprit/2 (comclient): COM Client Predicates.
                                                              (line 108)
* comclient_exception_description/2 (comclient): COM Client Predicates.
                                                              (line 110)
* comclient_garbage_collect/0 (comclient): COM Client Predicates.
                                                              (line   8)
* comclient_get_active_object/2 (comclient): COM Client Predicates.
                                                              (line  62)
* comclient_iid_from_name/2 (comclient): COM Client Predicates.
                                                              (line  46)
* comclient_invoke_method_fun/3 (comclient): COM Client Predicates.
                                                              (line  69)
* comclient_invoke_method_proc/2 (comclient): COM Client Predicates.
                                                              (line  74)
* comclient_invoke_put/3 (comclient):    COM Client Predicates.
                                                              (line  77)
* comclient_is_exception/1 (comclient):  COM Client Predicates.
                                                              (line  95)
* comclient_is_object/1 (comclient):     COM Client Predicates.
                                                              (line  14)
* comclient_name_from_iid/2 (comclient): COM Client Predicates.
                                                              (line  52)
* comclient_progid_from_clsid/2 (comclient): COM Client Predicates.
                                                              (line  34)
* comclient_release/1 (comclient):       COM Client Predicates.
                                                              (line  81)
* comclient_valid_object/1 (comclient):  COM Client Predicates.
                                                              (line  21)
* compare/3 (built-in, ref page):        mpg-ref-compare.     (line   6)
* compile/1 (built-in):                  ref-mod-lod.         (line   6)
* compile/1 (built-in, ref page):        mpg-ref-compile.     (line   6)
* complement/2 (ugraphs):                lib-ugraphs.         (line  81)
* compose/3 (ugraphs):                   lib-ugraphs.         (line  86)
* compound/1 (built-in, ref page):       mpg-ref-compound.    (line   6)
* condition/1 (plunit option):           PlUnit A Unit Test Box.
                                                              (line  49)
* cons/3 (lists):                        lib-lists.           (line 352)
* consult/1 (built-in, ref page):        mpg-ref-consult.     (line   6)
* contains_term/2 (terms):               lib-terms.           (line 205)
* contains_var/2 (terms):                lib-terms.           (line 226)
* convlist/3 (lists):                    lib-lists.           (line 565)
* copy_term/[2,3] (built-in):            ref-lte-cpt.         (line   6)
* copy_term/[2,3] (built-in, ref page):  mpg-ref-copy_term.   (line   6)
* correlation/3 (statistics):            lib-statistics.      (line 110)
* correspond/4 (lists):                  lib-lists.           (line  40)
* count/4 (clpfd):                       Arithmetic-Logical Constraints.
                                                              (line  34)
* covariance/3 (statistics):             lib-statistics.      (line 107)
* coverage_data/1 (built-in):            Coverage Analysis.   (line  38)
* coverage_data/1 (built-in, ref page):  mpg-ref-coverage_data.
                                                              (line   6)
* create/2 (objects):                    obj-exp-create.      (line   6)
* create_mutable/2 (built-in):           ref-lte-mut.         (line  35)
* create_mutable/2 (built-in, ref page): mpg-ref-create_mutable.
                                                              (line   6)
* cumlist/[4,5,6] (lists):               lib-lists.           (line 413)
* cumulative/[1,2] (clpfd):              Scheduling Constraints.
                                                              (line  13)
* cumulatives/[2,3] (clpfd):             Scheduling Constraints.
                                                              (line  66)
* current_atom/1 (built-in, ref page):   mpg-ref-current_atom.
                                                              (line   6)
* current_breakpoint/5 (built-in):       Built-in Predicates for Breakpoint Handling.
                                                              (line  71)
* current_breakpoint/5 (built-in) <1>:   Breakpoint Predicates.
                                                              (line  61)
* current_breakpoint/5 (built-in, ref page): mpg-ref-current_breakpoint.
                                                              (line   6)
* current_char_conversion/2 (built-in, ref page): mpg-ref-current_char_conversion.
                                                              (line   6)
* current_class/1 (objects):             obj-exp-current_class.
                                                              (line   6)
* current_directory/[1,2] (file_systems): lib-file_systems.   (line 305)
* current_host/1 (sockets):              lib-sockets.         (line 174)
* current_input/1 (built-in):            ref-iou-sfh-cis.     (line   9)
* current_input/1 (built-in, ref page):  mpg-ref-current_input.
                                                              (line   6)
* current_key/2 (built-in):              ref-mdb-idb.         (line  42)
* current_key/2 (built-in, ref page):    mpg-ref-current_key. (line   6)
* current_module/[1,2] (built-in):       ref-mod-ilm.         (line  15)
* current_module/[1,2] (built-in, ref page): mpg-ref-current_module.
                                                              (line   6)
* current_op/3 (built-in):               ref-syn-ops-ops.     (line  16)
* current_op/3 (built-in, ref page):     mpg-ref-current_op.  (line   6)
* current_output/1 (built-in):           ref-iou-sfh-cos.     (line   8)
* current_output/1 (built-in, ref page): mpg-ref-current_output.
                                                              (line   6)
* current_predicate/2 (built-in):        ref-mod-ilm-def.     (line  11)
* current_predicate/[1,2] (built-in, ref page): mpg-ref-current_predicate.
                                                              (line   6)
* current_prolog_flag/2 (built-in, ref page): mpg-ref-current_prolog_flag.
                                                              (line   6)
* current_stream/3 (built-in):           ref-iou-sfh-bos.     (line   6)
* current_stream/3 (built-in, ref page): mpg-ref-current_stream.
                                                              (line   6)
* cyclic_term/1 (terms):                 lib-terms.           (line 197)
* datime/[1,2] (system):                 lib-system.          (line  16)
* db_close/1 (bdb):                      The Predicates.      (line  66)
* db_close_env/1 (bdb):                  The Predicates.      (line  23)
* db_compress/[2,3] (bdb):               The Predicates.      (line 126)
* db_current/5 (bdb):                    The Predicates.      (line  70)
* db_current_env/2 (bdb):                The Predicates.      (line  27)
* db_current_iterator/3 (bdb):           The Predicates.      (line 171)
* db_enumerate/3 (bdb):                  The Predicates.      (line 107)
* db_erase/[2,3] (bdb):                  The Predicates.      (line  98)
* db_export/[2,3] (bdb):                 The Predicates.      (line 178)
* db_fetch/3 (bdb):                      The Predicates.      (line  81)
* db_findall/3 (bdb):                    The Predicates.      (line 117)
* db_import/[2,3] (bdb):                 The Predicates.      (line 189)
* db_iterator_done/1 (bdb):              The Predicates.      (line 168)
* db_iterator_next/3 (bdb):              The Predicates.      (line 163)
* db_make_iterator/[2,3] (bdb):          The Predicates.      (line 153)
* db_open/[4,5] (bdb):                   The Predicates.      (line  33)
* db_open_env/[2,3] (bdb):               The Predicates.      (line   9)
* db_reference/1 (built-in, ref page):   mpg-ref-db_reference.
                                                              (line   6)
* db_store/3 (bdb):                      The Predicates.      (line  76)
* db_sync/1 (bdb):                       The Predicates.      (line 148)
* debug/0 (built-in):                    Basic Debug.         (line  11)
* debug/0 (built-in, ref page):          mpg-ref-debug.       (line   6)
* debugger_command_hook/2 (hook, ref page): mpg-ref-debugger_command_hook.
                                                              (line   6)
* debugger_command_hook/2 (user, hook):  Hooks Related to Breakpoints.
                                                              (line  73)
* debugger_command_hook/2 (user, hook) <1>: Breakpoint Predicates.
                                                              (line 117)
* debugging/0 (built-in):                Undefined Predicates.
                                                              (line  27)
* debugging/0 (built-in) <1>:            Basic Debug.         (line 103)
* debugging/0 (built-in, ref page):      mpg-ref-debugging.   (line   6)
* debug_message/0 (objects):             obj-exp-debug_message.
                                                              (line   6)
* decreasing_prefix/[3,4] (lists):       lib-lists.           (line 766)
* define_method/3 (objects):             obj-exp-define_method.
                                                              (line   6)
* delete/[3,4] (lists):                  lib-lists.           (line  46)
* delete_directory/[1,2] (file_systems): lib-file_systems.    (line  73)
* delete_file/1 (file_systems):          lib-file_systems.    (line  69)
* del_edges/3 (ugraphs):                 lib-ugraphs.         (line  68)
* del_edges/3 (wgraphs):                 lib-wgraphs.         (line  85)
* del_element/3 (sets):                  lib-sets.            (line  18)
* del_vertices/3 (ugraphs):              lib-ugraphs.         (line  60)
* del_vertices/3 (wgraphs):              lib-wgraphs.         (line  77)
* depth_bound/2 (terms):                 lib-terms.           (line 252)
* descendant_of/2 (objects):             obj-exp-descendant_of.
                                                              (line   6)
* destroy/1 (objects):                   obj-exp-destroy.     (line   6)
* dif/2 (built-in):                      ref-lte-met-usu.     (line  35)
* dif/2 (built-in, ref page):            mpg-ref-dif.         (line   6)
* directory_exists/1 (file_systems):     lib-file_systems.    (line  90)
* directory_exists/2 (file_systems):     lib-file_systems.    (line  90)
* directory_members_of_directory/[1,2,3] (file_systems): lib-file_systems.
                                                              (line 152)
* directory_member_of_directory/2 (file_systems): lib-file_systems.
                                                              (line 129)
* directory_member_of_directory/3 (file_systems): lib-file_systems.
                                                              (line 136)
* directory_member_of_directory/4 (file_systems): lib-file_systems.
                                                              (line 144)
* directory_must_exist/1 (file_systems): lib-file_systems.    (line 118)
* directory_must_exist/2 (file_systems): lib-file_systems.    (line 118)
* directory_property/[2,3] (file_systems): lib-file_systems.  (line 209)
* direct_message/4 (objects):            obj-exp-direct_message.
                                                              (line   6)
* disable_breakpoints/1 (built-in):      Breakpoint Predicates.
                                                              (line  78)
* disable_breakpoints/1 (built-in, ref page): mpg-ref-disable_breakpoints.
                                                              (line   6)
* discontiguous/1 (built-in, ref page):  mpg-ref-discontiguous.
                                                              (line   6)
* discontiguous/1 (declaration):         Discontiguous Declarations.
                                                              (line   6)
* disjoint/2 (sets):                     lib-sets.            (line  28)
* disjoint1/[1,2] (clpfd):               Placement Constraints.
                                                              (line   9)
* disjoint2/[1,2] (clpfd):               Placement Constraints.
                                                              (line  46)
* disjoint_union/3 (sets):               lib-sets.            (line 145)
* dispatch_global/4 (clpfd):             The Global Constraint Programming Interface.
                                                              (line  23)
* display/1 (built-in):                  ref-iou-tou-dsp.     (line   6)
* display/1 (built-in, ref page):        mpg-ref-display.     (line   6)
* dispose/1 (structs):                   str-cdf.             (line   6)
* do/2 (built-in, ref page):             mpg-ref-do.          (line   6)
* do/2, do-loop:                         ref-sem-ctr-dol.     (line   6)
* domain/3 (clpfd):                      Membership Constraints.
                                                              (line   8)
* dump/3 (clpqr):                        CLPQR Solver Predicates.
                                                              (line 187)
* dynamic/1 (built-in, ref page):        mpg-ref-dynamic.     (line   6)
* dynamic/1 (declaration):               Dynamic Declarations.
                                                              (line   6)
* edges/2 (ugraphs):                     lib-ugraphs.         (line  44)
* edges/2 (wgraphs):                     lib-wgraphs.         (line  34)
* element/3 (clpfd):                     Extensional Constraints.
                                                              (line   8)
* elif/1 (conditional directive):        ref-lod-cnd.         (line   6)
* else/0 (conditional directive):        ref-lod-cnd.         (line   6)
* empty_assoc/1 (assoc):                 lib-assoc.           (line  15)
* empty_avl/1 (avl):                     lib-avl.             (line  15)
* empty_bag/1 (bags):                    lib-bags.            (line 112)
* empty_fdset/1 (clpfd):                 FD Set Operations.   (line  18)
* empty_interval/2 (clpfd):              FD Set Operations.   (line  33)
* empty_queue/1 (queues):                lib-queues.          (line  23)
* enable_breakpoints/1 (built-in):       Breakpoint Predicates.
                                                              (line  78)
* enable_breakpoints/1 (built-in, ref page): mpg-ref-enable_breakpoints.
                                                              (line   6)
* endif/0 (conditional directive):       ref-lod-cnd.         (line   6)
* end_class/[0,1] (objects):             obj-exp-end_class.   (line   6)
* end_tests/1 (plunit declaration):      PlUnit A Unit Test Box.
                                                              (line  13)
* ensure_loaded/1 (built-in):            ref-mod-lod.         (line   6)
* ensure_loaded/1 (built-in, ref page):  mpg-ref-ensure_loaded.
                                                              (line   6)
* entailed/1 (clpqr):                    CLPQR Solver Predicates.
                                                              (line  72)
* environ/[2,3] (system):                lib-system.          (line  29)
* erase/1 (built-in):                    ref-mdb-rcd.         (line  19)
* erase/1 (built-in, ref page):          mpg-ref-erase.       (line   6)
* error/1 (plunit option):               PlUnit A Unit Test Box.
                                                              (line 168)
* error/2 (plunit option):               PlUnit A Unit Test Box.
                                                              (line 168)
* error_exception/1 (hook, ref page):    mpg-ref-error_exception.
                                                              (line   6)
* error_exception/1 (user, hook):        ref-ere-hex.         (line  24)
* error_exception/1 (user, hook) <1>:    Exceptions Debug.    (line  16)
* exception/1 (plunit option):           PlUnit A Unit Test Box.
                                                              (line 161)
* exclude/[3,4,5] (lists):               lib-lists.           (line 583)
* execution_state/[1,2] (built-in):      Built-in Predicates for Breakpoint Handling.
                                                              (line  17)
* execution_state/[1,2] (built-in) <1>:  Accessing Past Debugger States.
                                                              (line  21)
* execution_state/[1,2] (built-in) <2>:  Breakpoint Predicates.
                                                              (line  86)
* execution_state/[1,2] (built-in, ref page): mpg-ref-execution_state.
                                                              (line   6)
* expand_term/2 (built-in):              ref-lod-exp.         (line  63)
* expand_term/2 (built-in, ref page):    mpg-ref-expand_term. (line   6)
* fail/0 (built-in, ref page):           mpg-ref-fail.        (line   6)
* fail/1 (plunit option):                PlUnit A Unit Test Box.
                                                              (line 156)
* false/0 (built-in, ref page):          mpg-ref-false.       (line   6)
* fdbg_annotate/[3,4] (fdbg):            FDBG Writing Visualizers.
                                                              (line  69)
* fdbg_assign_name/2 (fdbg):             FDBG Naming Terms.   (line  10)
* fdbg_current_name/2 (fdbg):            FDBG Naming Terms.   (line  16)
* fdbg_get_name/2 (fdbg):                FDBG Naming Terms.   (line  20)
* fdbg_guard/3 (fdbg):                   FDBG Debugging Global Constraints.
                                                              (line  15)
* fdbg_labeling_step/2 (fdbg):           FDBG Annotation.     (line  25)
* fdbg_label_show/3 (fdbg):              FDBG Built-In Visualizers.
                                                              (line  35)
* fdbg_legend/[1,2] (fdbg):              FDBG Writing Visualizers.
                                                              (line  88)
* fdbg_off/0 (fdbg):                     FDBG Options.        (line  17)
* fdbg_on/[0,1] (fdbg):                  FDBG Options.        (line   8)
* fdbg_show/2 (fdbg):                    FDBG Built-In Visualizers.
                                                              (line  14)
* fdbg_start_labeling/1 (fdbg):          FDBG Annotation.     (line  21)
* fdbg_transform_actions/3 (fdbg):       FDBG Writing Legend Printers.
                                                              (line  15)
* fdset_add_element/3 (clpfd):           FD Set Operations.   (line  81)
* fdset_complement/2 (clpfd):            FD Set Operations.   (line 130)
* fdset_del_element/3 (clpfd):           FD Set Operations.   (line  85)
* fdset_disjoint/2 (clpfd):              FD Set Operations.   (line  89)
* fdset_eq/2 (clpfd):                    FD Set Operations.   (line 109)
* fdset_intersect/2 (clpfd):             FD Set Operations.   (line  93)
* fdset_intersection/[2,3] (clpfd):      FD Set Operations.   (line  97)
* fdset_interval/3 (clpfd):              FD Set Operations.   (line  37)
* fdset_max/2 (clpfd):                   FD Set Operations.   (line  50)
* fdset_member/2 (clpfd):                FD Set Operations.   (line 104)
* fdset_min/2 (clpfd):                   FD Set Operations.   (line  46)
* fdset_parts/4 (clpfd):                 FD Set Operations.   (line  22)
* fdset_singleton/2 (clpfd):             FD Set Operations.   (line  41)
* fdset_size/2 (clpfd):                  FD Set Operations.   (line  55)
* fdset_subset/2 (clpfd):                FD Set Operations.   (line 114)
* fdset_subtract/3 (clpfd):              FD Set Operations.   (line 118)
* fdset_to_list/2 (clpfd):               FD Set Operations.   (line  66)
* fdset_to_range/2 (clpfd):              FD Set Operations.   (line  76)
* fdset_union/[2,3] (clpfd):             FD Set Operations.   (line 123)
* fdvar_portray/3 (fdbg, hook):          FDBG Customizing Output.
                                                              (line   9)
* fd_batch/1 (clpfd):                    Posting Constraints. (line  31)
* fd_closure/2 (clpfd):                  Reflection Predicates.
                                                              (line  65)
* fd_degree/2 (clpfd):                   Reflection Predicates.
                                                              (line  47)
* fd_dom/2 (clpfd):                      Reflection Predicates.
                                                              (line  41)
* fd_flag/3 (clpfd):                     The Global Constraint Programming Interface.
                                                              (line 137)
* fd_global/[3,4] (clpfd):               The Global Constraint Programming Interface.
                                                              (line  83)
* fd_max/2 (clpfd):                      Reflection Predicates.
                                                              (line  23)
* fd_min/2 (clpfd):                      Reflection Predicates.
                                                              (line  17)
* fd_neighbors/2 (clpfd):                Reflection Predicates.
                                                              (line  60)
* fd_set/2 (clpfd):                      Reflection Predicates.
                                                              (line  35)
* fd_size/2 (clpfd):                     Reflection Predicates.
                                                              (line  29)
* fd_statistics/[0,2] (clpfd):           Statistics Predicates.
                                                              (line  11)
* fd_var/1 (clpfd):                      Reflection Predicates.
                                                              (line  12)
* fetch_slot/2 (objects):                obj-exp-fetch_slot.  (line   6)
* file_exists/1 (file_systems):          lib-file_systems.    (line 102)
* file_exists/2 (file_systems):          lib-file_systems.    (line 102)
* file_members_of_directory/[1,2,3] (file_systems): lib-file_systems.
                                                              (line 191)
* file_member_of_directory/[2,3,4] (file_systems): lib-file_systems.
                                                              (line 172)
* file_must_exist/1 (file_systems):      lib-file_systems.    (line 110)
* file_must_exist/2 (file_systems):      lib-file_systems.    (line 110)
* file_property/[2,3] (file_systems):    lib-file_systems.    (line 294)
* file_search_path/2 (hook, ref page):   mpg-ref-file_search_path.
                                                              (line   6)
* file_search_path/2 (user, hook):       ref-fdi-fsp-def.     (line   6)
* findall/[3,4] (built-in):              ref-all-cba-cal.     (line   6)
* findall/[3,4] (built-in, ref page):    mpg-ref-findall.     (line   6)
* find_chr_constraint/1 (chr):           CHR Debugging Predicates.
                                                              (line  56)
* first_bound/2 (clpfd):                 Enumeration Predicates.
                                                              (line  28)
* first_bound/2 (clpfd) <1>:             Enumeration Predicates.
                                                              (line 156)
* fixme/1 (plunit option):               PlUnit A Unit Test Box.
                                                              (line  43)
* float/1 (built-in, ref page):          mpg-ref-float.       (line   6)
* flush_output/1 (built-in):             ref-iou-sfh-flu.     (line   6)
* flush_output/[0,1] (built-in, ref page): mpg-ref-flush_output.
                                                              (line   6)
* forall/1 (plunit option):              PlUnit A Unit Test Box.
                                                              (line  63)
* forall/2 (aggregate):                  lib-aggregate.       (line 115)
* foreach/2 (aggregate):                 lib-aggregate.       (line 121)
* foreign/[2,3] (hook, ref page):        mpg-ref-foreign.     (line   6)
* foreign/[2,3] (Module, hook):          Conversion Declarations.
                                                              (line  30)
* foreign_resource/2 (hook, ref page):   mpg-ref-foreign_resource.
                                                              (line   6)
* foreign_resource/2 (Module, hook):     Conversion Declarations.
                                                              (line  10)
* foreign_type/2 (structs):              str-fty-dty.         (line   6)
* format/[2,3] (built-in):               ref-iou-cou-fou.     (line   6)
* format/[2,3] (built-in, ref page):     mpg-ref-format.      (line   6)
* format_to_codes/[3,4] (codesio):       lib-codesio.         (line  15)
* fractile/3 (statistics):               lib-statistics.      (line 120)
* freeze/2 (built-in, ref page):         mpg-ref-freeze.      (line   6)
* free_of_term/2 (terms):                lib-terms.           (line 210)
* free_of_var/2 (terms):                 lib-terms.           (line 232)
* free_variables/4 (aggregate):          lib-aggregate.       (line 155)
* frozen/2 (built-in, ref page):         mpg-ref-frozen.      (line   6)
* full_answer/0 (clpfd):                 Answer Constraints.  (line  20)
* functor/3 (built-in):                  ref-lte-act.         (line   6)
* functor/3 (built-in, ref page):        mpg-ref-functor.     (line   6)
* fzn_dump/[2,3] (zinc):                 FlatZinc Exported Predicates.
                                                              (line 330)
* fzn_identifier/3 (zinc):               FlatZinc Exported Predicates.
                                                              (line 150)
* fzn_load_file/2 (zinc):                FlatZinc Exported Predicates.
                                                              (line  36)
* fzn_load_stream/2 (zinc):              FlatZinc Exported Predicates.
                                                              (line  28)
* fzn_objective/2 (zinc):                FlatZinc Exported Predicates.
                                                              (line 178)
* fzn_output/1 (zinc):                   FlatZinc Exported Predicates.
                                                              (line 120)
* fzn_post/1 (zinc):                     FlatZinc Exported Predicates.
                                                              (line 108)
* fzn_run_file/[1,2] (zinc):             FlatZinc Exported Predicates.
                                                              (line 310)
* fzn_run_stream/[1,2] (zinc):           FlatZinc Exported Predicates.
                                                              (line 282)
* fzn_solve/1 (zinc):                    FlatZinc Exported Predicates.
                                                              (line 113)
* garbage_collect/0 (built-in):          ref-mgc-gcd.         (line  21)
* garbage_collect/0 (built-in, ref page): mpg-ref-garbage_collect.
                                                              (line   6)
* garbage_collect_atoms/0 (built-in):    ref-mgc-ago-agc.     (line  18)
* garbage_collect_atoms/0 (built-in, ref page): mpg-ref-garbage_collect_atoms.
                                                              (line   6)
* generate_message/3 (built-in, ref page): mpg-ref-generate_message.
                                                              (line   6)
* generate_message/3 (SU_messages):      Message Handling Predicates.
                                                              (line  25)
* generate_message_hook/3 (hook, ref page): mpg-ref-generate_message_hook.
                                                              (line   6)
* generate_message_hook/3 (user, hook):  Message Handling Predicates.
                                                              (line  19)
* gen_assoc/3 (assoc):                   lib-assoc.           (line  24)
* gen_int/1 (between):                   lib-between.         (line  23)
* gen_label/3 (trees):                   lib-trees.           (line  11)
* gen_nat/1 (between):                   lib-between.         (line  17)
* geometric_mean/2 (statistics):         lib-statistics.      (line  46)
* geost/[2,3,4] (clpfd):                 Placement Constraints.
                                                              (line 167)
* getrand/1 (random):                    lib-random.          (line  18)
* get_address/3 (structs):               str-afd.             (line  11)
* get_assoc/3 (assoc):                   lib-assoc.           (line  34)
* get_atts/2 (Module):                   lib-atts.            (line  38)
* get_byte/[1,2] (built-in):             ref-iou-cin-cha.     (line   6)
* get_byte/[1,2] (built-in, ref page):   mpg-ref-get_byte.    (line   6)
* get_char/[1,2] (built-in):             ref-iou-cin-cha.     (line  12)
* get_char/[1,2] (built-in, ref page):   mpg-ref-get_char.    (line   6)
* get_code/[1,2] (built-in):             ref-iou-cin-cha.     (line   9)
* get_code/[1,2] (built-in, ref page):   mpg-ref-get_code.    (line   6)
* get_contents/3 (structs):              str-afd.             (line   6)
* get_label/3 (trees):                   lib-trees.           (line  16)
* get_mutable/2 (built-in):              ref-lte-mut.         (line  39)
* get_mutable/2 (built-in, ref page):    mpg-ref-get_mutable. (line   6)
* get_next_assoc/4 (assoc):              lib-assoc.           (line  47)
* get_prev_assoc/4:                      lib-assoc.           (line  59)
* global_cardinality/[2,3] (clpfd):      Arithmetic-Logical Constraints.
                                                              (line  49)
* goal_expansion/5 (hook, ref page):     mpg-ref-goal_expansion.
                                                              (line   6)
* goal_expansion/5 (Module, hook):       ref-lod-exp.         (line  45)
* goal_source_info/3 (built-in):         ref-ere-err.         (line 113)
* goal_source_info/3 (built-in) <1>:     Message Handling Predicates.
                                                              (line  42)
* goal_source_info/3 (built-in, ref page): mpg-ref-goal_source_info.
                                                              (line   6)
* ground/1 (built-in, ref page):         mpg-ref-ground.      (line   6)
* group/[3,4,5] (lists):                 lib-lists.           (line 658)
* halt/[0,1] (built-in):                 ref-ere-int.         (line  12)
* halt/[0,1] (built-in, ref page):       mpg-ref-halt.        (line   6)
* harmonic_mean/2 (statistics):          lib-statistics.      (line  49)
* head/2 (lists):                        lib-lists.           (line 362)
* if/1 (conditional directive):          ref-lod-cnd.         (line   6)
* if/3 (built-in, ref page):             mpg-ref-if.          (line   6)
* if/3, soft cut:                        ref-sem-ctr-ite.     (line  48)
* illarg/[3,4] (types):                  lib-types.           (line  80)
* in/1 (linda_client):                   lib-linda-client.    (line  66)
* in/2 (clpfd):                          Membership Constraints.
                                                              (line  15)
* in/2 (linda_client):                   lib-linda-client.    (line  79)
* include/1 (built-in, ref page):        mpg-ref-include.     (line   6)
* include/1 (declaration):               Include Declarations.
                                                              (line   6)
* include/[3,4,5] (lists):               lib-lists.           (line 615)
* increasing_prefix/[3,4] (lists):       lib-lists.           (line 761)
* indomain/1 (clpfd):                    Enumeration Predicates.
                                                              (line  15)
* inf/[2,4] (clpqr):                     CLPQR Solver Predicates.
                                                              (line  86)
* inherit/1 (objects):                   obj-exp-inherit.     (line   6)
* initialization/1 (built-in, ref page): mpg-ref-initialization.
                                                              (line   6)
* initialization/1 (declaration):        Initializations.     (line   6)
* instance/2 (built-in):                 ref-mdb-acl.         (line   6)
* instance/2 (built-in, ref page):       mpg-ref-instance.    (line   6)
* instance_method/1 (objects):           obj-exp-instance_method.
                                                              (line   6)
* integer/1 (built-in, ref page):        mpg-ref-integer.     (line   6)
* intersect/2 (sets):                    lib-sets.            (line  44)
* intersection/[2,3] (sets):             lib-sets.            (line  79)
* in_noblock/1 (linda_client):           lib-linda-client.    (line  72)
* in_set/2 (clpfd):                      Membership Constraints.
                                                              (line  20)
* is/2 (built-in):                       ref-ari-eae.         (line  15)
* is/2 (built-in, ref page):             mpg-ref-is.          (line   6)
* is_assoc/1 (assoc):                    lib-assoc.           (line  65)
* is_avl/1 (avl):                        lib-avl.             (line  24)
* is_bag/1 (bags):                       lib-bags.            (line  38)
* is_fdset/1 (clpfd):                    FD Set Operations.   (line  14)
* is_list/1 (lists):                     lib-lists.           (line  69)
* is_ordset/1 (ordsets):                 lib-ordsets.         (line  24)
* is_process/1 (process):                lib-process.         (line 454)
* is_queue/1 (queues):                   lib-queues.          (line  38)
* is_set/1 (sets):                       lib-sets.            (line  33)
* jasper_call/4 (jasper):                Jasper Library Predicates.
                                                              (line  74)
* jasper_create_global_ref/3 (jasper):   Jasper Library Predicates.
                                                              (line 152)
* jasper_create_local_ref/3 (jasper):    Jasper Library Predicates.
                                                              (line 161)
* jasper_deinitialize/1 (jasper):        Jasper Library Predicates.
                                                              (line  69)
* jasper_delete_global_ref/2 (jasper):   Jasper Library Predicates.
                                                              (line 157)
* jasper_delete_local_ref/2 (jasper):    Jasper Library Predicates.
                                                              (line 166)
* jasper_initialize/[1,2] (jasper):      Jasper Library Predicates.
                                                              (line   9)
* jasper_is_instance_of/3 (jasper):      Jasper Library Predicates.
                                                              (line 193)
* jasper_is_jvm/1 (jasper):              Jasper Library Predicates.
                                                              (line 170)
* jasper_is_object/[1,2] (jasper):       Jasper Library Predicates.
                                                              (line 175)
* jasper_is_same_object/3 (jasper):      Jasper Library Predicates.
                                                              (line 185)
* jasper_new_object/5 (jasper):          Jasper Library Predicates.
                                                              (line 115)
* jasper_new_object/5 (jasper) <1>:      Deprecated Jasper Predicates.
                                                              (line   8)
* jasper_null/2 (jasper):                Jasper Library Predicates.
                                                              (line 204)
* jasper_null/2 (jasper) <1>:            Jasper Library Predicates.
                                                              (line 208)
* jasper_object_class_name/3 (jasper):   Jasper Library Predicates.
                                                              (line 199)
* keyclumped/2 (lists):                  lib-lists.           (line 795)
* keyclumps/2 (lists):                   lib-lists.           (line 779)
* keymerge/3 (samsort):                  lib-samsort.         (line  37)
* keysort/2 (built-in):                  ref-lte-cte-sor.     (line   6)
* keysort/2 (built-in, ref page):        mpg-ref-keysort.     (line   6)
* keysorting/[2,3] (clpfd):              Arithmetic-Logical Constraints.
                                                              (line 242)
* keys_and_values/3 (lists):             lib-lists.           (line  75)
* kurtosis/2 (statistics):               lib-statistics.      (line  64)
* labeling/1 (clpb):                     CLPB Interface.      (line  28)
* labeling/2 (clpfd):                    Enumeration Predicates.
                                                              (line  20)
* last/2 (lists):                        lib-lists.           (line  93)
* last/3 (lists):                        lib-lists.           (line 356)
* later_bound/2 (clpfd):                 Enumeration Predicates.
                                                              (line  28)
* later_bound/2 (clpfd) <1>:             Enumeration Predicates.
                                                              (line 156)
* leash/1 (built-in):                    Basic Debug.         (line  48)
* leash/1 (built-in, ref page):          mpg-ref-leash.       (line   6)
* legend_portray/3 (fdbg, hook):         FDBG Customizing Output.
                                                              (line  24)
* length/2 (built-in):                   ref-lte-acl.         (line  13)
* length/2 (built-in, ref page):         mpg-ref-length.      (line   6)
* length/3 (bags):                       lib-bags.            (line 158)
* length_bound/2 (terms):                lib-terms.           (line 258)
* lex_chain/[1,2] (clpfd):               Arithmetic-Logical Constraints.
                                                              (line 275)
* library_directory/1 (hook, ref page):  mpg-ref-library_directory.
                                                              (line   6)
* linda/[0,1] (linda):                   lib-linda-server.    (line  18)
* linda_client/1 (linda_client):         lib-linda-client.    (line  19)
* linda_timeout/2 (linda_client):        lib-linda-client.    (line  54)
* line_count/2 (built-in):               ref-iou-sfh-opn.     (line  80)
* line_count/2 (built-in) <1>:           ref-iou-sos.         (line  24)
* line_count/2 (built-in, ref page):     mpg-ref-line_count.  (line   6)
* line_position/2 (built-in):            ref-iou-sfh-opn.     (line  80)
* line_position/2 (built-in) <1>:        ref-iou-sos.         (line  29)
* line_position/2 (built-in, ref page):  mpg-ref-line_position.
                                                              (line   6)
* listing/[0,1] (built-in):              Syntax Errors.       (line  28)
* listing/[0,1] (built-in) <1>:          ref-mod-idp.         (line  23)
* listing/[0,1] (built-in, ref page):    mpg-ref-listing.     (line   6)
* list_queue/2 (queues):                 lib-queues.          (line  88)
* list_to_assoc/2 (assoc):               lib-assoc.           (line  74)
* list_to_avl/2 (avl):                   lib-avl.             (line 130)
* list_to_bag/2 (bags):                  lib-bags.            (line  96)
* list_to_fdset/2 (clpfd):               FD Set Operations.   (line  61)
* list_to_ord_set/2 (ordsets):           lib-ordsets.         (line  31)
* list_to_set/2 (sets):                  lib-sets.            (line  70)
* list_to_tree/2 (trees):                lib-trees.           (line  22)
* load_files/[1,2] (built-in):           ref-sls-ssl.         (line   6)
* load_files/[1,2] (built-in, ref page): mpg-ref-load_files.  (line   6)
* load_foreign_resource/1 (built-in):    Interface Predicates.
                                                              (line   8)
* load_foreign_resource/1 (built-in, ref page): mpg-ref-load_foreign_resource.
                                                              (line   6)
* make_directory/1 (file_systems):       lib-file_systems.    (line  97)
* make_sub_bag/2 (bags):                 lib-bags.            (line 163)
* mapbag/2 (bags):                       lib-bags.            (line  55)
* mapbag/3 (bags):                       lib-bags.            (line  61)
* maplist/[2,3,4] (lists):               lib-lists.           (line 449)
* map_assoc/2 (assoc):                   lib-assoc.           (line  87)
* map_assoc/3 (assoc):                   lib-assoc.           (line  94)
* map_list_queue/3 (queues):             lib-queues.          (line 125)
* map_product/5 (lists):                 lib-lists.           (line 483)
* map_queue/[2,3] (queues):              lib-queues.          (line 114)
* map_queue_list/3 (queues):             lib-queues.          (line 120)
* map_tree/3 (trees):                    lib-trees.           (line  27)
* max/2 (statistics):                    lib-statistics.      (line  21)
* maximize/1 (clpqr):                    CLPQR Solver Predicates.
                                                              (line 122)
* maximize/[2,3] (clpfd):                Enumeration Predicates.
                                                              (line  36)
* maximum/2 (clpfd):                     Arithmetic Constraints.
                                                              (line  84)
* max_assoc/3 (assoc):                   lib-assoc.           (line 105)
* max_cliques/2 (ugraphs):               lib-ugraphs.         (line 160)
* max_member/[2,3] (lists):              lib-lists.           (line 687)
* max_path/5 (ugraphs):                  lib-ugraphs.         (line 121)
* max_path/5 (wgraphs):                  lib-wgraphs.         (line 110)
* maybe/[0,1,2] (random):                lib-random.          (line  29)
* mean/2 (statistics):                   lib-statistics.      (line  39)
* median/2 (statistics):                 lib-statistics.      (line 113)
* member/2 (built-in):                   ref-lte-acl.         (line  21)
* member/2 (built-in, ref page):         mpg-ref-member.      (line   6)
* member/3 (bags):                       lib-bags.            (line 116)
* memberchk/2 (built-in):                ref-lte-acl.         (line  18)
* memberchk/2 (built-in, ref page):      mpg-ref-memberchk.   (line   6)
* memberchk/3 (bags):                    lib-bags.            (line 121)
* merge/[3,4] (samsort):                 lib-samsort.         (line  15)
* message/4 (objects):                   obj-exp-message.     (line   6)
* message_hook/3 (hook, ref page):       mpg-ref-message_hook.
                                                              (line   6)
* message_hook/3 (user, hook):           Message Handling Predicates.
                                                              (line  30)
* meta_predicate/1 (built-in, ref page): mpg-ref-meta_predicate.
                                                              (line   6)
* meta_predicate/1 (declaration):        Meta-Predicate Declarations.
                                                              (line   6)
* meta_predicate/1 (declaration) <1>:    ref-mod-met.         (line   6)
* min/2 (statistics):                    lib-statistics.      (line  18)
* minimize/1 (clpqr):                    CLPQR Solver Predicates.
                                                              (line 116)
* minimize/[2,3] (clpfd):                Enumeration Predicates.
                                                              (line  36)
* minimum/2 (clpfd):                     Arithmetic Constraints.
                                                              (line  78)
* min_assoc/3 (assoc):                   lib-assoc.           (line 111)
* min_max/3 (statistics):                lib-statistics.      (line  24)
* min_member/[2,3] (lists):              lib-lists.           (line 698)
* min_path/5 (ugraphs):                  lib-ugraphs.         (line 126)
* min_path/5 (wgraphs):                  lib-wgraphs.         (line 115)
* min_paths/3 (ugraphs):                 lib-ugraphs.         (line 130)
* min_paths/3 (wgraphs):                 lib-wgraphs.         (line 120)
* min_tree/3 (ugraphs):                  lib-ugraphs.         (line 156)
* min_tree/3 (wgraphs):                  lib-wgraphs.         (line 150)
* ml_standard_deviation/2 (statistics):  lib-statistics.      (line  89)
* ml_variance/2 (statistics):            lib-statistics.      (line  73)
* mode/1 (built-in, ref page):           mpg-ref-mode.        (line   6)
* mode/1 (declaration):                  Mode Declarations.   (line   6)
* mode/2 (statistics):                   lib-statistics.      (line  31)
* module/[2,3] (built-in, ref page):     mpg-ref-module.      (line   6)
* module/[2,3] (declaration):            Module Declarations. (line   6)
* module/[2,3] (declaration) <1>:        ref-mod-lod.         (line  34)
* multifile/1 (built-in, ref page):      mpg-ref-multifile.   (line   6)
* multifile/1 (declaration):             Multifile Declarations.
                                                              (line   6)
* multi_cumulative/[2,3] (clpfd):        Scheduling Constraints.
                                                              (line 142)
* must_be/4 (types):                     lib-types.           (line  65)
* mutable/1 (built-in):                  ref-lte-mut.         (line  48)
* mutable/1 (built-in, ref page):        mpg-ref-mutable.     (line   6)
* mzn_load_file/[2,3] (zinc):            MiniZinc Exported Predicates.
                                                              (line 223)
* mzn_load_file/[2,3] (zinc) <1>:        MiniZinc Exported Predicates.
                                                              (line 246)
* mzn_run_file/[1,2] (zinc):             MiniZinc Exported Predicates.
                                                              (line 108)
* mzn_run_model/[1,2] (zinc):            MiniZinc Exported Predicates.
                                                              (line 135)
* mzn_to_fzn/[2,3] (zinc):               MiniZinc Exported Predicates.
                                                              (line 295)
* name/2 (built-in):                     ref-lte-c2t.         (line   6)
* name/2 (built-in) <1>:                 ref-lte-c2t.         (line  26)
* name/2 (built-in, ref page):           mpg-ref-name.        (line   6)
* neighbors/3 (ugraphs):                 lib-ugraphs.         (line  77)
* neighbors/3 (wgraphs):                 lib-wgraphs.         (line  34)
* neighbours/3 (ugraphs):                lib-ugraphs.         (line  77)
* neighbours/3 (wgraphs):                lib-wgraphs.         (line  34)
* new/[2,3] (structs):                   str-cdf.             (line   6)
* nextto/3 (lists):                      lib-lists.           (line  99)
* nl/[0,1] (built-in):                   ref-iou-cou-nln.     (line   6)
* nl/[0,1] (built-in, ref page):         mpg-ref-nl.          (line   6)
* nodebug/0 (built-in):                  Basic Debug.         (line  98)
* nodebug/0 (built-in, ref page):        mpg-ref-nodebug.     (line   6)
* nodebug_message/0 (objects):           obj-exp-nodebug_message.
                                                              (line   6)
* nondet/0 (plunit option):              PlUnit A Unit Test Box.
                                                              (line  57)
* nonmember/2 (built-in):                ref-lte-acl.         (line  24)
* nonmember/2 (built-in, ref page):      mpg-ref-nonmember.   (line   6)
* nonvar/1 (built-in, ref page):         mpg-ref-nonvar.      (line   6)
* normalize/2 (statistics):              lib-statistics.      (line 126)
* nospy/1 (built-in):                    Plain Spypoint.      (line  43)
* nospy/1 (built-in, ref page):          mpg-ref-nospy.       (line   6)
* nospyall/0 (built-in):                 Plain Spypoint.      (line  50)
* nospyall/0 (built-in, ref page):       mpg-ref-nospyall.    (line   6)
* notrace/0 (built-in):                  Basic Debug.         (line  98)
* notrace/0 (built-in, ref page):        mpg-ref-notrace.     (line   6)
* now/1 (system):                        lib-system.          (line  13)
* nozip/0 (built-in):                    Basic Debug.         (line  98)
* nozip/0 (built-in, ref page):          mpg-ref-nozip.       (line   6)
* nth0/[3,4] (lists):                    lib-lists.           (line 106)
* nth1/[3,4] (lists):                    lib-lists.           (line 112)
* null_foreign_term/2 (structs):         str-nul.             (line   6)
* number/1 (built-in, ref page):         mpg-ref-number.      (line   6)
* numbervars/1 (varnumbers):             lib-varnumbers.      (line  40)
* numbervars/3 (built-in):               ref-lte-anv.         (line   6)
* numbervars/3 (built-in, ref page):     mpg-ref-numbervars.  (line   6)
* number_chars/2 (built-in):             ref-lte-c2t.         (line   6)
* number_chars/2 (built-in) <1>:         ref-lte-c2t.         (line  22)
* number_chars/2 (built-in, ref page):   mpg-ref-number_chars.
                                                              (line   6)
* number_codes/2 (built-in):             ref-lte-c2t.         (line   6)
* number_codes/2 (built-in) <1>:         ref-lte-c2t.         (line  16)
* number_codes/2 (built-in, ref page):   mpg-ref-number_codes.
                                                              (line   6)
* numlist/[2,3,5] (between):             lib-between.         (line  34)
* nvalue/2 (clpfd):                      Arithmetic-Logical Constraints.
                                                              (line 165)
* occurrences_of_term/3 (terms):         lib-terms.           (line 218)
* occurrences_of_var/3 (terms):          lib-terms.           (line 238)
* odbc_db_open/3 (odbc):                 ODBC Predicates.     (line  12)
* odbc_db_open/4 (odbc):                 ODBC Predicates.     (line  17)
* odbc_db_open/5 (odbc):                 ODBC Predicates.     (line  43)
* odbc_env_open/1 (odbc):                ODBC Predicates.     (line   8)
* odbc_list_DSN/2 (odbc):                ODBC Predicates.     (line  50)
* once/1:                                ref-sem-ctr-ite.     (line  39)
* once/1 (built-in, ref page):           mpg-ref-once.        (line   6)
* one_longer/2 (lists):                  lib-lists.           (line 136)
* on_exception/3 (built-in):             ref-ere-leg.         (line  12)
* on_exception/3 (built-in, ref page):   mpg-ref-on_exception.
                                                              (line   6)
* op/3 (built-in):                       ref-syn-ops-ops.     (line   6)
* op/3 (built-in, ref page):             mpg-ref-op.          (line   6)
* open/[3,4] (built-in):                 ref-iou-sfh-sob.     (line  37)
* open/[3,4] (built-in) <1>:             ref-iou-sfh-opn.     (line   6)
* open/[3,4] (built-in, ref page):       mpg-ref-open.        (line   6)
* open_codes_stream/2 (codesio):         lib-codesio.         (line  44)
* open_null_stream/1 (built-in):         ref-iou-sfh-opn.     (line  80)
* open_null_stream/1 (built-in, ref page): mpg-ref-open_null_stream.
                                                              (line   6)
* ordered/[1,2] (lists):                 lib-lists.           (line 674)
* ordering/1 (clpqr):                    CLPQR Solver Predicates.
                                                              (line 182)
* ordering/1 (clpqr) <1>:                CLPQR Variable Ordering.
                                                              (line   6)
* ordset_order/3 (ordsets):              lib-ordsets.         (line 124)
* ord_add_element/3 (ordsets):           lib-ordsets.         (line  37)
* ord_del_element/3 (ordsets):           lib-ordsets.         (line  40)
* ord_disjoint/2 (ordsets):              lib-ordsets.         (line  44)
* ord_disjoint_union/3 (ordsets):        lib-ordsets.         (line 101)
* ord_intersect/2 (ordsets):             lib-ordsets.         (line  47)
* ord_intersection/[2,3,4] (ordsets):    lib-ordsets.         (line  51)
* ord_list_to_assoc/2 (assoc):           lib-assoc.           (line  82)
* ord_list_to_avl/2 (avl):               lib-avl.             (line 124)
* ord_member/2 (ordsets):                lib-ordsets.         (line  62)
* ord_nonmember/2 (ordsets):             lib-ordsets.         (line  65)
* ord_seteq/2 (ordsets):                 lib-ordsets.         (line  68)
* ord_setproduct/3 (ordsets):            lib-ordsets.         (line  72)
* ord_subset/2 (ordsets):                lib-ordsets.         (line  89)
* ord_subtract/3 (ordsets):              lib-ordsets.         (line  93)
* ord_symdiff/3 (ordsets):               lib-ordsets.         (line  97)
* ord_union/[2,3,4] (ordsets):           lib-ordsets.         (line 109)
* otherwise/0 (built-in, ref page):      mpg-ref-otherwise.   (line   6)
* out/1 (linda_client):                  lib-linda-client.    (line  62)
* pairfrom/4 (sets):                     lib-sets.            (line  37)
* partition/5 (lists):                   lib-lists.           (line 652)
* path/3 (ugraphs):                      lib-ugraphs.         (line 135)
* path/3 (wgraphs):                      lib-wgraphs.         (line 125)
* peek_byte/[1,2] (built-in):            ref-iou-cin-pee.     (line   9)
* peek_byte/[1,2] (built-in, ref page):  mpg-ref-peek_byte.   (line   6)
* peek_char/[1,2] (built-in):            ref-iou-cin-pee.     (line  16)
* peek_char/[1,2] (built-in, ref page):  mpg-ref-peek_char.   (line   6)
* peek_code/[1,2] (built-in):            ref-iou-cin-pee.     (line  12)
* peek_code/[1,2] (built-in, ref page):  mpg-ref-peek_code.   (line   6)
* perm/2 (lists):                        lib-lists.           (line 143)
* perm2/4 (lists):                       lib-lists.           (line 157)
* permutation/2 (lists):                 lib-lists.           (line 149)
* phrase/[2,3] (built-in):               ref-gru-exa.         (line  30)
* phrase/[2,3] (built-in, ref page):     mpg-ref-phrase.      (line   6)
* pointer_object/2 (objects):            obj-exp-pointer_object.
                                                              (line   6)
* population_standard_deviation/2 (statistics): lib-statistics.
                                                              (line  89)
* population_variance/2 (statistics):    lib-statistics.      (line  73)
* portray/1 (hook, ref page):            mpg-ref-portray.     (line   6)
* portray/1 (user, hook):                ref-iou-tou-por.     (line   6)
* portray/1 (user, hook) <1>:            CLPQR Fragments and Bits.
                                                              (line  12)
* portray_assoc/1 (assoc):               lib-assoc.           (line 117)
* portray_avl/1 (avl):                   lib-avl.             (line  65)
* portray_bag/1 (bags):                  lib-bags.            (line  42)
* portray_clause/[1,2] (built-in):       ref-iou-tou-pcl.     (line   6)
* portray_clause/[1,2] (built-in, ref page): mpg-ref-portray_clause.
                                                              (line   6)
* portray_message/2 (hook, ref page):    mpg-ref-portray_message.
                                                              (line   6)
* portray_message/2 (user, hook):        Message Handling Predicates.
                                                              (line  14)
* portray_queue/1 (queues):              lib-queues.          (line  31)
* power_set/2 (sets):                    lib-sets.            (line  75)
* predicate_property/2 (built-in):       ref-lps-app.         (line   6)
* predicate_property/2 (built-in) <1>:   ref-mod-ilm-vis.     (line  12)
* predicate_property/2 (built-in) <2>:   ref-mod-ilm-vis.     (line  17)
* predicate_property/2 (built-in) <3>:   ref-mod-ilm-vis.     (line  42)
* predicate_property/2 (built-in, ref page): mpg-ref-predicate_property.
                                                              (line   6)
* prefix/2 (lists):                      lib-lists.           (line 370)
* prefix_length/3 (lists):               lib-lists.           (line 286)
* print/[1,2] (built-in):                ref-iou-tou-dsp.     (line   6)
* print/[1,2] (built-in, ref page):      mpg-ref-print.       (line   6)
* print_coverage/[0,1] (built-in):       Coverage Analysis.   (line  44)
* print_coverage/[0,1] (built-in, ref page): mpg-ref-print_coverage.
                                                              (line   6)
* print_message/2 (built-in):            Message Handling Predicates.
                                                              (line   8)
* print_message/2 (built-in, ref page):  mpg-ref-print_message.
                                                              (line   6)
* print_message_lines/3 (built-in):      Message Handling Predicates.
                                                              (line  37)
* print_message_lines/3 (built-in, ref page): mpg-ref-print_message_lines.
                                                              (line   6)
* print_profile/[0,1] (built-in):        Execution Profiling. (line  57)
* print_profile/[0,1] (built-in, ref page): mpg-ref-print_profile.
                                                              (line   6)
* process_create/[2,3] (process):        lib-process.         (line 275)
* process_id/1 (process):                lib-process.         (line 448)
* process_id/2 (process):                lib-process.         (line 451)
* process_kill/[1,2] (process):          lib-process.         (line 470)
* process_release/1 (process):           lib-process.         (line 458)
* process_wait/[2,3] (process):          lib-process.         (line 406)
* profile_data/1 (built-in):             Execution Profiling. (line  51)
* profile_data/1 (built-in, ref page):   mpg-ref-profile_data.
                                                              (line   6)
* profile_reset/0 (built-in):            Execution Profiling. (line  47)
* profile_reset/0 (built-in) <1>:        Coverage Analysis.   (line  33)
* profile_reset/0 (built-in, ref page):  mpg-ref-profile_reset.
                                                              (line   6)
* projecting_assert/1 (clpqr):           CLPQR Solver Predicates.
                                                              (line 222)
* project_attributes/2 (Module):         lib-atts.            (line 134)
* prolog_flag/[2,3] (built-in):          ref-iou-tin-trm.     (line  40)
* prolog_flag/[2,3] (built-in, ref page): mpg-ref-prolog_flag.
                                                              (line   6)
* prolog_load_context/2 (built-in, ref page): mpg-ref-prolog_load_context.
                                                              (line   6)
* prompt/2 (built-in):                   ref-iou-tin-cpr.     (line   6)
* prompt/2 (built-in, ref page):         mpg-ref-prompt.      (line   6)
* proper_length/2 (lists):               lib-lists.           (line 161)
* proper_prefix/2 (lists):               lib-lists.           (line 376)
* proper_prefix_length/3 (lists):        lib-lists.           (line 296)
* proper_segment/2 (lists):              lib-lists.           (line 404)
* proper_suffix/2 (lists):               lib-lists.           (line 388)
* proper_suffix_length/3 (lists):        lib-lists.           (line 316)
* public/1 (built-in, ref page):         mpg-ref-public.      (line   6)
* public/1 (declaration):                Public Declarations. (line   6)
* put_assoc/4 (assoc):                   lib-assoc.           (line 124)
* put_atts/2 (Module):                   lib-atts.            (line  52)
* put_byte/[1,2] (built-in):             ref-iou-cou-cha.     (line   6)
* put_byte/[1,2] (built-in, ref page):   mpg-ref-put_byte.    (line   6)
* put_char/[1,2] (built-in):             ref-iou-cou-cha.     (line  12)
* put_char/[1,2] (built-in, ref page):   mpg-ref-put_char.    (line   6)
* put_code/[1,2] (built-in):             ref-iou-cou-cha.     (line   9)
* put_code/[1,2] (built-in, ref page):   mpg-ref-put_code.    (line   6)
* put_contents/3 (structs):              str-afd.             (line   6)
* put_label/[4,5] (trees):               lib-trees.           (line  32)
* query_abbreviation/3 (built-in, ref page): mpg-ref-query_abbreviation.
                                                              (line   6)
* query_abbreviation/3 (SU_messages):    Query Handling Predicates.
                                                              (line  34)
* query_class/5 (built-in, ref page):    mpg-ref-query_class. (line   6)
* query_class/5 (SU_messages):           Query Handling Predicates.
                                                              (line  30)
* query_class_hook/5 (hook, ref page):   mpg-ref-query_class_hook.
                                                              (line   6)
* query_class_hook/5 (user, hook):       Query Handling Predicates.
                                                              (line  23)
* query_hook/6 (hook, ref page):         mpg-ref-query_hook.  (line   6)
* query_hook/6 (user, hook):             Query Handling Predicates.
                                                              (line  16)
* query_input/3 (built-in, ref page):    mpg-ref-query_input. (line   6)
* query_input/3 (SU_messages):           Query Handling Predicates.
                                                              (line  46)
* query_input_hook/3 (hook, ref page):   mpg-ref-query_input_hook.
                                                              (line   6)
* query_input_hook/3 (user, hook):       Query Handling Predicates.
                                                              (line  39)
* query_map/4 (built-in, ref page):      mpg-ref-query_map.   (line   6)
* query_map/4 (SU_messages):             Query Handling Predicates.
                                                              (line  58)
* query_map_hook/4 (hook, ref page):     mpg-ref-query_map_hook.
                                                              (line   6)
* query_map_hook/4 (user, hook):         Query Handling Predicates.
                                                              (line  51)
* queue_append/3 (queues):               lib-queues.          (line  82)
* queue_cons/3 (queues):                 lib-queues.          (line  55)
* queue_head/2 (queues):                 lib-queues.          (line  44)
* queue_last/[2,3] (queues):             lib-queues.          (line  63)
* queue_length/2 (queues):               lib-queues.          (line  98)
* queue_list/2 (queues):                 lib-queues.          (line  93)
* queue_member/2 (queues):               lib-queues.          (line 103)
* queue_memberchk/2 (queues):            lib-queues.          (line 109)
* queue_tail/2 (queues):                 lib-queues.          (line  49)
* raise_exception/1 (built-in):          ref-ere-leg.         (line  12)
* raise_exception/1 (built-in, ref page): mpg-ref-raise_exception.
                                                              (line   6)
* random/[1,3] (random):                 lib-random.          (line  42)
* random_member/2 (random):              lib-random.          (line  49)
* random_numlist/4 (random):             lib-random.          (line  78)
* random_perm2/4 (random):               lib-random.          (line  73)
* random_permutation/2 (random):         lib-random.          (line  67)
* random_select/3 (random):              lib-random.          (line  53)
* random_subseq/3 (random):              lib-random.          (line  59)
* random_ugraph/3 (ugraphs):             lib-ugraphs.         (line 152)
* random_wgraph/4 (wgraphs):             lib-wgraphs.         (line 145)
* range/2 (statistics):                  lib-statistics.      (line  27)
* range_to_fdset/2 (clpfd):              FD Set Operations.   (line  71)
* rd/[1,2] (linda_client):               lib-linda-client.    (line  86)
* rd_noblock/1 (linda_client):           lib-linda-client.    (line  92)
* reachable/3 (ugraphs):                 lib-ugraphs.         (line 148)
* reachable/3 (wgraphs):                 lib-wgraphs.         (line 140)
* read/[1,2] (built-in):                 ref-iou-tin-trm.     (line   6)
* read/[1,2] (built-in, ref page):       mpg-ref-read.        (line   6)
* read_from_codes/2 (codesio):           lib-codesio.         (line  34)
* read_line/[1,2] (built-in, ref page):  mpg-ref-read_line.   (line   6)
* read_record/[1,2] (csv):               lib-csv.             (line 100)
* read_records/[1,2] (csv):              lib-csv.             (line 106)
* read_record_from_codes/[2,3] (csv):    lib-csv.             (line 112)
* read_term/[2,3] (built-in):            ref-iou-tin-trm.     (line   6)
* read_term/[2,3] (built-in, ref page):  mpg-ref-read_term.   (line   6)
* read_term_from_codes/3 (codesio):      lib-codesio.         (line  39)
* reconsult/1 (built-in, ref page):      mpg-ref-reconsult.   (line   6)
* recorda/3 (built-in):                  ref-mdb-idb.         (line  31)
* recorda/3 (built-in, ref page):        mpg-ref-recorda.     (line   6)
* recorded/3 (built-in, ref page):       mpg-ref-recorded.    (line   6)
* recordz/3 (built-in):                  ref-mdb-idb.         (line  35)
* recordz/3 (built-in, ref page):        mpg-ref-recordz.     (line   6)
* reduce/2 (ugraphs):                    lib-ugraphs.         (line 139)
* reduce/2 (wgraphs):                    lib-wgraphs.         (line 130)
* register_event_listener/[2,3] (prologbeans): PB Prolog Server Interface.
                                                              (line 135)
* register_query/[2,3] (prologbeans):    PB Prolog Server Interface.
                                                              (line  73)
* relation/3 (clpfd):                    Extensional Constraints.
                                                              (line  20)
* remove_breakpoints/1 (built-in):       Built-in Predicates for Breakpoint Handling.
                                                              (line  43)
* remove_breakpoints/1 (built-in) <1>:   Breakpoint Predicates.
                                                              (line  78)
* remove_breakpoints/1 (built-in, ref page): mpg-ref-remove_breakpoints.
                                                              (line   6)
* remove_dups/2 (lists):                 lib-lists.           (line 166)
* rem_add_link/4 (rem):                  lib-rem.             (line  23)
* rem_create/2 (rem):                    lib-rem.             (line  11)
* rem_equivalent/3 (rem):                lib-rem.             (line  19)
* rem_head/3 (random):                   lib-rem.             (line  15)
* rename_directory/2 (file_systems):     lib-file_systems.    (line  63)
* rename_file/2 (file_systems):          lib-file_systems.    (line  57)
* repeat/0 (built-in, ref page):         mpg-ref-repeat.      (line   6)
* repeat/1 (between):                    lib-between.         (line  29)
* restore/1 (built-in):                  Saving.              (line  23)
* restore/1 (built-in) <1>:              ref-sls-sst.         (line   6)
* restore/1 (built-in, ref page):        mpg-ref-restore.     (line   6)
* retract/1 (built-in):                  ref-mdb-rcd.         (line  19)
* retract/1 (built-in, ref page):        mpg-ref-retract.     (line   6)
* retractall/1 (built-in):               ref-mdb-rcd.         (line  19)
* retractall/1 (built-in, ref page):     mpg-ref-retractall.  (line   6)
* rev/2 (lists):                         lib-lists.           (line 181)
* reverse/2 (lists):                     lib-lists.           (line 174)
* rotate_list/[2,3] (lists):             lib-lists.           (line 326)
* runtime_entry/1 (user, hook):          too-spld.            (line  74)
* run_tests/[0,1,2] (plunit):            PlUnit Running the Test-Suite.
                                                              (line  11)
* same_functor/[2,3,4] (terms):          lib-terms.           (line 300)
* same_length/[2,3] (lists):             lib-lists.           (line 187)
* samkeysort/2 (samsort):                lib-samsort.         (line  30)
* sample_standard_deviation/2 (statistics): lib-statistics.   (line  96)
* sample_variance/2 (statistics):        lib-statistics.      (line  79)
* samsort/[2,3] (samsort):               lib-samsort.         (line  10)
* sat/1 (clpb):                          CLPB Interface.      (line  10)
* save_files/2 (built-in):               Saving.              (line  59)
* save_files/2 (built-in) <1>:           ref-sls-ssl.         (line   6)
* save_files/2 (built-in, ref page):     mpg-ref-save_files.  (line   6)
* save_modules/2 (built-in):             Saving.              (line  59)
* save_modules/2 (built-in) <1>:         ref-sls-ssl.         (line   6)
* save_modules/2 (built-in, ref page):   mpg-ref-save_modules.
                                                              (line   6)
* save_predicates/2 (built-in):          Saving.              (line  59)
* save_predicates/2 (built-in) <1>:      ref-sls-ssl.         (line   6)
* save_predicates/2 (built-in, ref page): mpg-ref-save_predicates.
                                                              (line   6)
* save_program/[1,2] (built-in):         Saving.              (line  10)
* save_program/[1,2] (built-in) <1>:     ref-sls-sst.         (line   6)
* save_program/[1,2] (built-in, ref page): mpg-ref-save_program.
                                                              (line   6)
* scalar_product/[4,5] (clpfd):          Arithmetic Constraints.
                                                              (line  45)
* scanlist/[4,5,6] (lists):              lib-lists.           (line 506)
* see/1 (built-in):                      ref-iou-sfh-opn.     (line  47)
* see/1 (built-in, ref page):            mpg-ref-see.         (line   6)
* seeing/1 (built-in):                   ref-iou-sfh-cis.     (line  15)
* seeing/1 (built-in, ref page):         mpg-ref-seeing.      (line   6)
* seek/4 (built-in):                     ref-iou-raf.         (line   6)
* seek/4 (built-in, ref page):           mpg-ref-seek.        (line   6)
* seen/0 (built-in):                     ref-iou-sfh-cst.     (line  29)
* seen/0 (built-in, ref page):           mpg-ref-seen.        (line   6)
* segment/2 (lists):                     lib-lists.           (line 395)
* select/3 (lists):                      lib-lists.           (line  10)
* select/4 (lists):                      lib-lists.           (line 202)
* selectchk/3 (lists):                   lib-lists.           (line  14)
* selectchk/4 (lists):                   lib-lists.           (line 208)
* select_max/[3,4] (lists):              lib-lists.           (line 740)
* select_min/[3,4] (lists):              lib-lists.           (line 733)
* session_get/4 (prologbeans):           PB Prolog Server Interface.
                                                              (line 107)
* session_put/3 (prologbeans):           PB Prolog Server Interface.
                                                              (line 120)
* set/1 (plunit option):                 PlUnit A Unit Test Box.
                                                              (line 143)
* seteq/2 (sets):                        lib-sets.            (line  67)
* setof/3 (built-in):                    ref-all-cse.         (line  10)
* setof/3 (built-in, ref page):          mpg-ref-setof.       (line   6)
* setproduct/3 (sets):                   lib-sets.            (line 129)
* setrand/1 (random):                    lib-random.          (line  21)
* setup/1 (plunit option):               PlUnit A Unit Test Box.
                                                              (line  72)
* set_input/1 (built-in):                ref-iou-sfh-opn.     (line   6)
* set_input/1 (built-in) <1>:            ref-iou-sfh-opn.     (line  33)
* set_input/1 (built-in, ref page):      mpg-ref-set_input.   (line   6)
* set_module/1 (built-in):               ref-mod-tyi.         (line  22)
* set_module/1 (built-in, ref page):     mpg-ref-set_module.  (line   6)
* set_order/3 (sets):                    lib-sets.            (line  63)
* set_output/1 (built-in):               ref-iou-sfh-opn.     (line   6)
* set_output/1 (built-in) <1>:           ref-iou-sfh-opn.     (line  37)
* set_output/1 (built-in, ref page):     mpg-ref-set_output.  (line   6)
* set_prolog_flag/2 (built-in, ref page): mpg-ref-set_prolog_flag.
                                                              (line   6)
* set_stream_position/2 (built-in):      ref-iou-raf.         (line   6)
* set_stream_position/2 (built-in, ref page): mpg-ref-set_stream_position.
                                                              (line   6)
* shorter_list/2 (lists):                lib-lists.           (line 219)
* shutdown/[0,1] (prologbeans):          PB Prolog Server Interface.
                                                              (line  55)
* shutdown_server/0 (linda_client):      lib-linda-client.    (line  34)
* simple/1 (built-in, ref page):         mpg-ref-simple.      (line   6)
* singleton_queue/2 (queues):            lib-queues.          (line  28)
* size_bound/2 (terms):                  lib-terms.           (line 262)
* skewness/2 (statistics):               lib-statistics.      (line  57)
* skip_byte/[1,2] (built-in):            ref-iou-cin-ski.     (line   9)
* skip_byte/[1,2] (built-in, ref page):  mpg-ref-skip_byte.   (line   6)
* skip_char/[1,2] (built-in):            ref-iou-cin-ski.     (line  17)
* skip_char/[1,2] (built-in, ref page):  mpg-ref-skip_char.   (line   6)
* skip_code/[1,2] (built-in):            ref-iou-cin-ski.     (line  13)
* skip_code/[1,2] (built-in, ref page):  mpg-ref-skip_code.   (line   6)
* skip_line/[0,1] (built-in):            ref-iou-cin-ski.     (line  21)
* skip_line/[0,1] (built-in, ref page):  mpg-ref-skip_line.   (line   6)
* sleep/1 (system):                      lib-system.          (line  25)
* smt/1 (clpfd):                         Arithmetic-Logical Constraints.
                                                              (line   8)
* socket_client_open/3 (sockets):        lib-sockets.         (line  55)
* socket_select/7 (sockets):             lib-sockets.         (line 142)
* socket_server_accept/4 (sockets):      lib-sockets.         (line 129)
* socket_server_close/1 (sockets):       lib-sockets.         (line 138)
* socket_server_open/[2,3] (sockets):    lib-sockets.         (line  88)
* solve/2 (clpfd):                       Enumeration Predicates.
                                                              (line 311)
* some/[2,3,4] (lists):                  lib-lists.           (line 540)
* somebag/2 (bags):                      lib-bags.            (line  70)
* somechk/[2,3,4] (lists):               lib-lists.           (line 555)
* somechkbag/2 (bags):                   lib-bags.            (line  75)
* somechk_queue/[2,3] (queues):          lib-queues.          (line 140)
* some_queue/[2,3] (queues):             lib-queues.          (line 130)
* sort/2 (built-in):                     ref-lte-cte-sor.     (line   6)
* sort/2 (built-in, ref page):           mpg-ref-sort.        (line   6)
* sorting/3 (clpfd):                     Arithmetic-Logical Constraints.
                                                              (line 215)
* source_file/[1,2] (built-in):          ref-lps-apf.         (line   6)
* source_file/[1,2] (built-in, ref page): mpg-ref-source_file.
                                                              (line   6)
* spy/[1,2] (built-in):                  Plain Spypoint.      (line  29)
* spy/[1,2] (built-in) <1>:              Breakpoint Predicates.
                                                              (line  54)
* spy/[1,2] (built-in, ref page):        mpg-ref-spy.         (line   6)
* start/[0,1] (prologbeans):             PB Prolog Server Interface.
                                                              (line  15)
* statistics/[0,2] (built-in):           ref-mgc-ove-sta.     (line   6)
* statistics/[0,2] (built-in) <1>:       ref-mgc-gcp.         (line   6)
* statistics/[0,2] (built-in, ref page): mpg-ref-statistics.  (line   6)
* store_slot/2 (objects):                obj-exp-store_slot.  (line   6)
* stream_code/2 (built-in):              ref-iou-sfh-sob.     (line  37)
* stream_code/2 (built-in) <1>:          Prolog Streams.      (line  11)
* stream_code/2 (built-in, ref page):    mpg-ref-stream_code. (line   6)
* stream_position/2 (built-in):          ref-iou-raf.         (line   6)
* stream_position/2 (built-in, ref page): mpg-ref-stream_position.
                                                              (line   6)
* stream_position_data/3 (built-in, ref page): mpg-ref-stream_position_data.
                                                              (line   6)
* stream_property/2 (built-in):          ref-iou-sfh-bos.     (line  15)
* stream_property/2 (built-in, ref page): mpg-ref-stream_property.
                                                              (line   6)
* sublist/5 (lists):                     lib-lists.           (line 343)
* subseq/3 (lists):                      lib-lists.           (line 228)
* subseq0/2 (lists):                     lib-lists.           (line 238)
* subseq1/2 (lists):                     lib-lists.           (line 249)
* subset/2 (sets):                       lib-sets.            (line  49)
* subsumes/2 (terms):                    lib-terms.           (line  19)
* subsumeschk/2 (terms):                 lib-terms.           (line  11)
* subsumes_term/2 (built-in):            ref-lte-met-usu.     (line  40)
* subsumes_term/2 (built-in, ref page):  mpg-ref-subsumes_term.
                                                              (line   6)
* subtract/3 (sets):                     lib-sets.            (line 110)
* sub_atom/5 (built-in):                 ref-lte-atm.         (line  16)
* sub_atom/5 (built-in, ref page):       mpg-ref-sub_atom.    (line   6)
* sub_term/2 (terms):                    lib-terms.           (line 245)
* suffix/2 (lists):                      lib-lists.           (line 383)
* suffix_length/3 (lists):               lib-lists.           (line 306)
* sum/3 (clpfd):                         Arithmetic Constraints.
                                                              (line  37)
* sumlist/2 (lists):                     lib-lists.           (line 254)
* sup/[2,4] (clpqr):                     CLPQR Solver Predicates.
                                                              (line  96)
* symdiff/3 (sets):                      lib-sets.            (line 123)
* symmetric_closure/2 (ugraphs):         lib-ugraphs.         (line 102)
* symmetric_closure/2 (wgraphs):         lib-wgraphs.         (line  99)
* table/[2,3] (clpfd):                   Extensional Constraints.
                                                              (line  34)
* tail/2 (lists):                        lib-lists.           (line 366)
* taut/2 (clpb):                         CLPB Interface.      (line  21)
* tcl_delete/1 (tcltk):                  Basic Functions.     (line  67)
* tcl_delete/1 (tcltk) <1>:              Predicates for Prolog to Interact with Tcl Interpreters.
                                                              (line  10)
* tcl_eval/3 (tcltk):                    Evaluation Functions.
                                                              (line 118)
* tcl_eval/3 (tcltk) <1>:                Predicates for Prolog to Interact with Tcl Interpreters.
                                                              (line  14)
* tcl_event/3 (tcltk):                   Event Functions.     (line   9)
* tcl_event/3 (tcltk) <1>:               Predicates for Prolog to Interact with Tcl Interpreters.
                                                              (line  19)
* tcl_new/1 (tcltk):                     Basic Functions.     (line  10)
* tcl_new/1 (tcltk) <1>:                 Predicates for Prolog to Interact with Tcl Interpreters.
                                                              (line   6)
* tell/1 (built-in):                     ref-iou-sfh-opn.     (line  60)
* tell/1 (built-in, ref page):           mpg-ref-tell.        (line   6)
* telling/1 (built-in):                  ref-iou-sfh-cos.     (line  15)
* telling/1 (built-in, ref page):        mpg-ref-telling.     (line   6)
* term_depth/2 (terms):                  lib-terms.           (line 268)
* term_expansion/6 (hook, ref page):     mpg-ref-term_expansion.
                                                              (line   6)
* term_expansion/6 (user, hook):         ref-lod-exp.         (line  12)
* term_hash/[2,3,4] (terms):             lib-terms.           (line  40)
* term_order/3 (terms):                  lib-terms.           (line 200)
* term_size/2 (terms):                   lib-terms.           (line 285)
* term_subsumer/3 (terms):               lib-terms.           (line  35)
* term_variables/2 (built-in):           ref-lte-act.         (line  22)
* term_variables/2 (built-in, ref page): mpg-ref-term_variables.
                                                              (line   6)
* term_variables/3 (aggregate):          lib-aggregate.       (line 163)
* term_variables_bag/2 (terms):          lib-terms.           (line 186)
* term_variables_set/2 (terms):          lib-terms.           (line 178)
* test/[1,2] (plunit declaration):       PlUnit A Unit Test Box.
                                                              (line  18)
* test_sub_bag/2 (bags):                 lib-bags.            (line 170)
* throw/1 (built-in):                    ref-ere-rex.         (line   6)
* throw/1 (built-in, ref page):          mpg-ref-throw.       (line   6)
* throws/1 (plunit option):              PlUnit A Unit Test Box.
                                                              (line 161)
* time_out/3 (timeout):                  lib-timeout.         (line  17)
* tk_destroy_window/1 (tcltk):           Housekeeping.        (line  19)
* tk_destroy_window/1 (tcltk) <1>:       Predicates for Prolog to Interact with Tcl Interpreters with Tk Extensions.
                                                              (line  74)
* tk_do_one_event/[0,1] (tcltk):         Servicing Tk Events. (line  51)
* tk_do_one_event/[0,1] (tcltk) <1>:     Predicates for Prolog to Interact with Tcl Interpreters with Tk Extensions.
                                                              (line  29)
* tk_main_loop/0 (tcltk):                Passing Control to Tk.
                                                              (line  10)
* tk_main_loop/0 (tcltk) <1>:            Predicates for Prolog to Interact with Tcl Interpreters with Tk Extensions.
                                                              (line  66)
* tk_main_window/2 (tcltk):              Housekeeping.        (line  12)
* tk_main_window/2 (tcltk) <1>:          Predicates for Prolog to Interact with Tcl Interpreters with Tk Extensions.
                                                              (line  70)
* tk_make_window_exist/1 (tcltk):        Housekeeping.        (line  26)
* tk_make_window_exist/1 (tcltk) <1>:    Predicates for Prolog to Interact with Tcl Interpreters with Tk Extensions.
                                                              (line  77)
* tk_new/2 (tcltk):                      Basic Functions.     (line  20)
* tk_new/2 (tcltk) <1>:                  Predicates for Prolog to Interact with Tcl Interpreters with Tk Extensions.
                                                              (line   6)
* tk_next_event/[2,3] (tcltk):           Event Functions.     (line  35)
* tk_next_event/[2,3] (tcltk) <1>:       Servicing Tk Events. (line 108)
* tk_next_event/[2,3] (tcltk) <2>:       Predicates for Prolog to Interact with Tcl Interpreters with Tk Extensions.
                                                              (line  59)
* tk_num_main_windows/1 (tcltk):         Housekeeping.        (line  38)
* tk_num_main_windows/1 (tcltk) <1>:     Predicates for Prolog to Interact with Tcl Interpreters with Tk Extensions.
                                                              (line  80)
* told/0 (built-in):                     ref-iou-sfh-cst.     (line  26)
* told/0 (built-in, ref page):           mpg-ref-told.        (line   6)
* top_sort/2 (ugraphs):                  lib-ugraphs.         (line 116)
* top_sort/2 (wgraphs):                  lib-wgraphs.         (line 105)
* trace/0 (built-in):                    Basic Debug.         (line  31)
* trace/0 (built-in, ref page):          mpg-ref-trace.       (line   6)
* transitive_closure/2 (ugraphs):        lib-ugraphs.         (line  90)
* transitive_closure/2 (wgraphs):        lib-wgraphs.         (line  94)
* transitive_reduction/2 (ugraphs):      lib-ugraphs.         (line  93)
* transpose/2 (lists):                   lib-lists.           (line 264)
* transpose_ugraph/2 (ugraphs):          lib-ugraphs.         (line  71)
* transpose_wgraph/2 (wgraphs):          lib-wgraphs.         (line  89)
* tree_size/2 (trees):                   lib-trees.           (line  45)
* tree_to_list/2 (trees):                lib-trees.           (line  49)
* trimcore/0 (built-in):                 ref-mgc-ove-rsp.     (line   6)
* trimcore/0 (built-in, ref page):       mpg-ref-trimcore.    (line   6)
* true/0 (built-in, ref page):           mpg-ref-true.        (line   6)
* true/0 (plunit option):                PlUnit A Unit Test Box.
                                                              (line 110)
* true/1 (plunit option):                PlUnit A Unit Test Box.
                                                              (line 110)
* type_definition/[2,3] (structs):       str-etr.             (line  11)
* ugraph_to_wgraph/2 (wgraphs):          lib-wgraphs.         (line  50)
* ugraph_to_wgraph/3 (wgraphs):          lib-wgraphs.         (line  64)
* unbiased_standard_deviation/2 (statistics): lib-statistics. (line  96)
* unbiased_variance/2 (statistics):      lib-statistics.      (line  79)
* undefine_method/3 (objects):           obj-exp-undefine_method.
                                                              (line   6)
* unify_with_occurs_check/2 (built-in):  ref-lte-met-usu.     (line  20)
* unify_with_occurs_check/2 (built-in, ref page): mpg-ref-unify_with_occurs_check.
                                                              (line   6)
* uninherit/1 (objects):                 obj-exp-uninherit.   (line   6)
* union/[2,3,4] (sets):                  lib-sets.            (line 157)
* unknown/2 (built-in):                  Undefined Predicates.
                                                              (line  21)
* unknown/2 (built-in) <1>:              ref-ere-hex-hup.     (line  46)
* unknown/2 (built-in, ref page):        mpg-ref-unknown.     (line   6)
* unknown_predicate_handler/3 (hook, ref page): mpg-ref-unknown_predicate_handler.
                                                              (line   6)
* unknown_predicate_handler/3 (user, hook): Undefined Predicates.
                                                              (line   6)
* unknown_predicate_handler/3 (user, hook) <1>: ref-ere-hex-hup.
                                                              (line   6)
* unload_foreign_resource/1 (built-in):  Interface Predicates.
                                                              (line  24)
* unload_foreign_resource/1 (built-in, ref page): mpg-ref-unload_foreign_resource.
                                                              (line   6)
* unregister_event_listener/1 (prologbeans): PB Prolog Server Interface.
                                                              (line 169)
* unregister_query/1 (prologbeans):      PB Prolog Server Interface.
                                                              (line 105)
* update_mutable/2 (built-in):           ref-lte-mut.         (line  43)
* update_mutable/2 (built-in, ref page): mpg-ref-update_mutable.
                                                              (line   6)
* user:breakpoint_expansion/2 (hook):    Hooks Related to Breakpoints.
                                                              (line   8)
* user:breakpoint_expansion/2 (hook) <1>: Condition Macros.   (line  22)
* user:debugger_command_hook/2 (hook):   Hooks Related to Breakpoints.
                                                              (line  73)
* user:debugger_command_hook/2 (hook) <1>: Breakpoint Predicates.
                                                              (line 117)
* user:error_exception/1 (hook):         ref-ere-hex.         (line  24)
* user:error_exception/1 (hook) <1>:     Exceptions Debug.    (line  16)
* user:file_search_path/2 (hook):        ref-fdi-fsp-def.     (line   6)
* user:generate_message_hook/3 (hook):   Message Handling Predicates.
                                                              (line  19)
* user:message_hook/3 (hook):            Message Handling Predicates.
                                                              (line  30)
* user:portray/1 (hook):                 ref-iou-tou-por.     (line   6)
* user:portray/1 (hook) <1>:             CLPQR Fragments and Bits.
                                                              (line  12)
* user:portray_message/2 (hook):         Message Handling Predicates.
                                                              (line  14)
* user:query_class_hook/5 (hook):        Query Handling Predicates.
                                                              (line  23)
* user:query_hook/6 (hook):              Query Handling Predicates.
                                                              (line  16)
* user:query_input_hook/3 (hook):        Query Handling Predicates.
                                                              (line  39)
* user:query_map_hook/4 (hook):          Query Handling Predicates.
                                                              (line  51)
* user:runtime_entry/1 (hook):           too-spld.            (line  74)
* user:term_expansion/6 (hook):          ref-lod-exp.         (line  12)
* user:unknown_predicate_handler/3 (hook): Undefined Predicates.
                                                              (line   6)
* user:unknown_predicate_handler/3 (hook) <1>: ref-ere-hex-hup.
                                                              (line   6)
* use_module/[1,2,3] (built-in):         ref-mod-lod.         (line  27)
* use_module/[1,2,3] (built-in, ref page): mpg-ref-use_module.
                                                              (line   6)
* var/1 (built-in, ref page):            mpg-ref-var.         (line   6)
* variant/2 (terms):                     lib-terms.           (line  31)
* varnumbers/[2,3] (varnumbers):         lib-varnumbers.      (line  44)
* verify_attributes/3 (Module):          lib-atts.            (line  69)
* vertices/2 (ugraphs):                  lib-ugraphs.         (line  35)
* vertices/2 (wgraphs):                  lib-wgraphs.         (line  34)
* vertices_edges_to_ugraph/3 (ugraphs):  lib-ugraphs.         (line  28)
* vertices_edges_to_wgraph/3 (wgraphs):  lib-wgraphs.         (line  69)
* view/0 (gauge):                        lib-gauge.           (line  16)
* volatile/1 (built-in, ref page):       mpg-ref-volatile.    (line   6)
* volatile/1 (declaration):              Volatile Declarations.
                                                              (line   6)
* weighted_mean/3 (statistics):          lib-statistics.      (line  42)
* weighted_standard_deviation/3 (statistics): lib-statistics. (line 102)
* weighted_variance/3 (statistics):      lib-statistics.      (line  84)
* wgraph_to_ugraph/2 (wgraphs):          lib-wgraphs.         (line  37)
* when/2 (built-in, ref page):           mpg-ref-when.        (line   6)
* with_output_to_codes/[2,3,4] (codesio): lib-codesio.        (line  53)
* write/[1,2] (built-in):                ref-iou-tou-wrt.     (line   6)
* write/[1,2] (built-in, ref page):      mpg-ref-write.       (line   6)
* writeq/[1,2] (built-in):               ref-iou-tou-wrt.     (line   6)
* writeq/[1,2] (built-in, ref page):     mpg-ref-writeq.      (line   6)
* write_canonical/[1,2] (built-in):      ref-iou-tou-wrt.     (line   6)
* write_canonical/[1,2] (built-in, ref page): mpg-ref-write_canonical.
                                                              (line   6)
* write_record/[1,2] (csv):              lib-csv.             (line 119)
* write_records/[1,2] (csv):             lib-csv.             (line 124)
* write_record_to_codes/2 (csv):         lib-csv.             (line 128)
* write_term/[2,3] (built-in):           ref-iou-tou-wrt.     (line   6)
* write_term/[2,3] (built-in, ref page): mpg-ref-write_term.  (line   6)
* write_term_to_codes/[3,4] (codesio):   lib-codesio.         (line  28)
* write_to_codes/[2,3] (codesio):        lib-codesio.         (line  21)
* xml_parse/[2,3] (xml):                 lib-xml.             (line  69)
* xml_pp/1 (xml):                        lib-xml.             (line  98)
* xml_subterm/2 (xml):                   lib-xml.             (line  92)
* zip/0 (built-in):                      Basic Debug.         (line  25)
* zip/0 (built-in, ref page):            mpg-ref-zip.         (line   6)


File: sicstus.info,  Node: Keystroke Index,  Next: Book Index,  Prev: Predicate Index,  Up: Top

Keystroke Index
***************

 [index ]
* Menu:

* & (debugger command):                  Debug Commands.      (line 244)
* & (debugger command) <1>:              FDBG Debugger Commands.
                                                              (line   9)
* * (debugger command):                  Debug Commands.      (line 264)
* + (debugger command):                  Debug Commands.      (line 261)
* - (debugger command):                  Debug Commands.      (line 271)
* . (debugger command):                  Debug Commands.      (line 299)
* ; (top-level command):                 Queries.             (line  44)
* < (debugger command):                  Debug Commands.      (line 349)
* < (top-level command):                 Queries.             (line  53)
* = (debugger command):                  Debug Commands.      (line 257)
* ? (debugger command):                  Debug Commands.      (line 369)
* ? (interruption command):              Execution.           (line  32)
* ? (top-level command):                 Queries.             (line  76)
* @ (debugger command):                  Debug Commands.      (line 320)
* [ (debugger command):                  Debug Commands.      (line 219)
* \ (debugger command):                  Debug Commands.      (line 276)
* ] (debugger command):                  Debug Commands.      (line 224)
* ^ (debugger command):                  Debug Commands.      (line 355)
* ^ (top-level command):                 Queries.             (line  63)
* a (debugger command):                  Debug Commands.      (line 303)
* A (debugger command):                  FDBG Debugger Commands.
                                                              (line  15)
* a (interruption command):              Execution.           (line  22)
* b (debugger command):                  Debug Commands.      (line 309)
* b (interruption command):              Execution.           (line  35)
* b (top-level command):                 Queries.             (line  50)
* c (debugger command):                  Debug Commands.      (line  52)
* c (interruption command):              Execution.           (line  25)
* C-c < (emacs command):                 Usage.               (line 139)
* C-c ? (emacs command):                 Usage.               (line 179)
* C-c C-b (emacs command):               Usage.               (line  52)
* C-c C-c (emacs command):               Usage.               (line 190)
* C-c C-c b (emacs command):             Usage.               (line  64)
* C-c C-c f (emacs command):             Usage.               (line  61)
* C-c C-c p (emacs command):             Usage.               (line  70)
* C-c C-c r (emacs command):             Usage.               (line  67)
* C-c C-d (emacs command):               Usage.               (line 122)
* C-c C-g (emacs command):               Usage.               (line 130)
* C-c C-n (emacs command):               Usage.               (line 165)
* C-c C-o (emacs command):               Usage.               (line 144)
* C-c C-p (emacs command):               Usage.               (line  58)
* C-c C-r (emacs command):               Usage.               (line  55)
* C-c C-s (emacs command):               Usage.               (line 162)
* C-c C-t (emacs command):               Usage.               (line 118)
* C-c C-v a (emacs command):             Usage.               (line 175)
* C-c C-z (emacs command):               Usage.               (line 126)
* C-c C-\ (emacs command):               Usage.               (line 193)
* C-c RET (emacs command):               Usage.               (line 185)
* C-M-a (emacs command):                 Usage.               (line  88)
* C-M-c (emacs command):                 Usage.               (line  85)
* C-M-e (emacs command):                 Usage.               (line  91)
* C-M-h (emacs command):                 Usage.               (line  94)
* C-M-n (emacs command):                 Usage.               (line 106)
* C-M-p (emacs command):                 Usage.               (line 109)
* C-u C-c C-d (emacs command):           Usage.               (line 123)
* C-u C-c C-g (emacs command):           Usage.               (line 131)
* C-u C-c C-o (emacs command):           Usage.               (line 145)
* C-u C-c C-t (emacs command):           Usage.               (line 119)
* C-u C-c C-z (emacs command):           Usage.               (line 127)
* C-u C-c RET (emacs command):           Usage.               (line 186)
* C-u C-x SPC (emacs command):           Usage.               (line 158)
* C-x SPC (emacs command):               Usage.               (line 157)
* d (debugger command):                  Debug Commands.      (line 178)
* D (debugger command):                  Debug Commands.      (line 284)
* d (interruption command):              Execution.           (line  38)
* E (debugger command):                  Debug Commands.      (line 292)
* e (debugger command):                  Debug Commands.      (line 343)
* e (interruption command):              Execution.           (line  28)
* f (debugger command):                  Debug Commands.      (line 131)
* g (debugger command):                  Debug Commands.      (line 190)
* h (debugger command):                  Debug Commands.      (line 370)
* h (interruption command):              Execution.           (line  31)
* h (top-level command):                 Queries.             (line  75)
* j<p> (debugger command):               Debug Commands.      (line 146)
* l (debugger command):                  Debug Commands.      (line  61)
* M-; (emacs command):                   Usage.               (line 112)
* M-a (emacs command):                   Usage.               (line  78)
* M-e (emacs command):                   Usage.               (line  82)
* M-h (emacs command):                   Usage.               (line 103)
* M-RET (emacs command):                 Usage.               (line 169)
* M-{ (emacs command):                   Usage.               (line  97)
* M-} (emacs command):                   Usage.               (line 100)
* n (debugger command):                  Debug Commands.      (line 252)
* n (top-level command):                 Queries.             (line  45)
* o (debugger command):                  Debug Commands.      (line  94)
* p (debugger command):                  Debug Commands.      (line 182)
* q (debugger command):                  Debug Commands.      (line 100)
* r (debugger command):                  Debug Commands.      (line 108)
* <RET> (debugger command):              Debug Commands.      (line  53)
* RET (top-level command):               Queries.             (line  39)
* s (debugger command):                  Debug Commands.      (line  77)
* t (debugger command):                  Debug Commands.      (line 202)
* t (interruption command):              Execution.           (line  40)
* u (debugger command):                  Debug Commands.      (line 332)
* v (debugger command):                  Debug Commands.      (line 229)
* w (debugger command):                  Debug Commands.      (line 187)
* W (debugger command):                  FDBG Debugger Commands.
                                                              (line  30)
* y (top-level command):                 Queries.             (line  40)
* z (debugger command):                  Debug Commands.      (line  72)
* z (interruption command):              Execution.           (line  39)


File: sicstus.info,  Node: Book Index,  Prev: Keystroke Index,  Up: Top

Book Index
**********

 [index ]
* Menu:

* !, cut:                                ref-sem-ctr-cut.     (line   6)
* !/0 (built-in, ref page):              mpg-ref-cut.         (line   6)
* !/0, cut:                              ref-sem-ctr-cut.     (line   6)
* # /2, boolean eor:                     CLPB Introduction.   (line  45)
* #/\ /2 (clpfd):                        Propositional Constraints.
                                                              (line  30)
* #< /2 (clpfd):                         Arithmetic Constraints.
                                                              (line   8)
* #<= /2 (clpfd):                        Propositional Constraints.
                                                              (line  43)
* #<=> /2 (clpfd):                       Reified Constraints. (line  14)
* #<=> /2 (clpfd) <1>:                   Propositional Constraints.
                                                              (line  47)
* #= /2 (clpfd):                         Arithmetic Constraints.
                                                              (line   8)
* #=/2 (all_different/2 option):         Arithmetic-Logical Constraints.
                                                              (line 116)
* #=/2 (all_distinct/2 option):          Arithmetic-Logical Constraints.
                                                              (line 116)
* #=< /2 (clpfd):                        Arithmetic Constraints.
                                                              (line   8)
* #=> /2 (clpfd):                        Propositional Constraints.
                                                              (line  43)
* #> /2 (clpfd):                         Arithmetic Constraints.
                                                              (line   8)
* #>= /2 (clpfd):                        Arithmetic Constraints.
                                                              (line   8)
* #\ /1 (clpfd):                         Propositional Constraints.
                                                              (line  26)
* #\ /2 (clpfd):                         Propositional Constraints.
                                                              (line  34)
* #\/ /2 (clpfd):                        Propositional Constraints.
                                                              (line  38)
* #\= /2 (clpfd):                        Arithmetic Constraints.
                                                              (line   8)
* '$VAR':                                ref-iou-tou-dis.     (line  40)
* 'SU_messages':generate_message/3:      Message Handling Predicates.
                                                              (line  25)
* 'SU_messages':query_abbreviation/3:    Query Handling Predicates.
                                                              (line  34)
* 'SU_messages':query_class/5:           Query Handling Predicates.
                                                              (line  30)
* 'SU_messages':query_input/3:           Query Handling Predicates.
                                                              (line  46)
* 'SU_messages':query_map/4:             Query Handling Predicates.
                                                              (line  58)
* * /2, boolean and:                     CLPB Introduction.   (line  39)
* * /2, multiplication (evaluable):      ref-ari-aex.         (line  56)
* ** /2, float power (evaluable):        ref-ari-aex.         (line 286)
* + (CHR mode):                          CHR Constraint Declaration.
                                                              (line  34)
* + /1, identity (evaluable):            ref-ari-aex.         (line  40)
* + /2, addition (evaluable):            ref-ari-aex.         (line  48)
* + /2, boolean ior:                     CLPB Introduction.   (line  42)
* +, mode annotation:                    mpg-ref-mod.         (line   6)
* , atom:                                ref-syn-trm-ato.     (line  35)
* ,/2 (built-in, ref page):              mpg-ref-and.         (line   6)
* ,/2 (iterator):                        ref-sem-ctr-dol.     (line 226)
* ,/2 (iterator) <1>:                    mpg-ref-do.          (line  70)
* ,/2 (when/2 condition):                mpg-ref-when.        (line  27)
* ,/2, conjunction:                      ref-sem-ctr.         (line   6)
* - (CHR mode):                          CHR Constraint Declaration.
                                                              (line  30)
* - /1, negation (evaluable):            ref-ari-aex.         (line  44)
* - /2, subtraction (evaluable):         ref-ari-aex.         (line  52)
* -, mode annotation:                    mpg-ref-mod.         (line   6)
* -->, grammar rules:                    ref-gru-dcg.         (line   6)
* -/2 (debugger show control):           Action Variables.    (line  27)
* -> /2 ;/2, if then else:               ref-sem-ctr-ite.     (line   6)
* -> /2, if then:                        ref-sem-ctr-ite.     (line  29)
* -> ;, if-then-else:                    ref-sem-ctr-ite.     (line   6)
* ->/2 (built-in, ref page):             mpg-ref-if_then.     (line   6)
* . /2, identity (evaluable):            ref-ari-aex.         (line 145)
* ., functor:                            ref-syn-cpt-lis.     (line   6)
* .emacs Emacs initialization file:      Quick-Start.         (line  12)
* / /2, floating division (evaluable):   ref-ari-aex.         (line  60)
* // /2, integer truncated division (evaluable): ref-ari-aex. (line  64)
* /\ /2, bitwise conjunction (evaluable): ref-ari-aex.        (line 106)
* 0' notation for character conversion:  ref-syn-trm-int.     (line  20)
* : /2, module qualifier:                ref-sem-ctr-oth.     (line  16)
* :, use in meta_predicate declaration:  ref-mod-met.         (line   6)
* :, use in Module:Goal:                 ref-mod-vis.         (line   6)
* :- /1, directive:                      Directives.          (line   6)
* ;/2 (built-in, ref page):              mpg-ref-or.          (line   6)
* ;/2 (when/2 condition):                mpg-ref-when.        (line  30)
* ;/2, disjunction:                      ref-sem-ctr-dis.     (line   6)
* < /2, boolean less:                    CLPB Introduction.   (line  64)
* <, arithmetic less than:               ref-ari-acm.         (line  28)
* <-/2 (objects):                        obj-exp-send.        (line   6)
* </2 (built-in, ref page):              mpg-ref-less_than.   (line   6)
* << /2, left shift (evaluable):         ref-ari-aex.         (line 132)
* <</2 (objects):                        obj-exp-put.         (line   6)
* =../2 (built-in):                      ref-lte-act.         (line  15)
* =../2 (built-in, ref page):            mpg-ref-univ.        (line   6)
* =/0 (map method):                      Default Map Methods. (line  22)
* =/2 (built-in):                        ref-lte-met-usu.     (line  10)
* =/2 (built-in, ref page):              mpg-ref-unify.       (line   6)
* =/2 (clpfd:dispatch_global/4 request): The Global Constraint Programming Interface.
                                                              (line  60)
* =:= /2, boolean equal:                 CLPB Introduction.   (line  52)
* =:=, arithmetic equal:                 ref-ari-acm.         (line  19)
* =:=/2 (built-in, ref page):            mpg-ref-equal_to.    (line   6)
* =< /2, boolean less or equal:          CLPB Introduction.   (line  58)
* =<, arithmetic less or equal:          ref-ari-acm.         (line  38)
* =</2 (built-in, ref page):             mpg-ref-not_greater_than.
                                                              (line   6)
* ==/2 (built-in):                       ref-lte-cte-sot.     (line  35)
* ==/2 (built-in, ref page):             mpg-ref-term_equal_to.
                                                              (line   6)
* =\= /2, boolean not equal:             CLPB Introduction.   (line  55)
* =\=, arithmetic not equal:             ref-ari-acm.         (line  23)
* =\=/2 (built-in, ref page):            mpg-ref-not_equal_to.
                                                              (line   6)
* > /2, boolean greater:                 CLPB Introduction.   (line  67)
* >, arithmetic greater than:            ref-ari-acm.         (line  33)
* >/2 (built-in, ref page):              mpg-ref-greater_than.
                                                              (line   6)
* >= /2, boolean greater or equal:       CLPB Introduction.   (line  61)
* >=, arithmetic greater or equal:       ref-ari-acm.         (line  42)
* >=/2 (built-in, ref page):             mpg-ref-not_less_than.
                                                              (line   6)
* >> /2, right shift (evaluable):        ref-ari-aex.         (line 138)
* >>/2 (objects):                        obj-exp-get.         (line   6)
* ? (CHR mode):                          CHR Constraint Declaration.
                                                              (line  38)
* ?, mode annotation:                    mpg-ref-mod.         (line   6)
* ?- /1, query:                          Queries.             (line   6)
* ?=/2 (built-in):                       ref-lte-met-usu.     (line  29)
* ?=/2 (built-in, ref page):             mpg-ref-term_unify_decided.
                                                              (line   6)
* ?=/2 (when/2 condition):               mpg-ref-when.        (line  24)
* @</2 (built-in):                       ref-lte-cte-sot.     (line  35)
* @</2 (built-in, ref page):             mpg-ref-term_less_than.
                                                              (line   6)
* @=</2 (built-in):                      ref-lte-cte-sot.     (line  35)
* @=</2 (built-in, ref page):            mpg-ref-term_not_greater_than.
                                                              (line   6)
* @>/2 (built-in):                       ref-lte-cte-sot.     (line  35)
* @>/2 (built-in, ref page):             mpg-ref-term_greater_than.
                                                              (line   6)
* @>=/2 (built-in):                      ref-lte-cte-sot.     (line  35)
* @>=/2 (built-in, ref page):            mpg-ref-term_not_less_than.
                                                              (line   6)
* [], empty grammar body:                ref-gru-dcg.         (line  57)
* [], empty list:                        ref-syn-cpt-lis.     (line   6)
* []/0 (debugger condition):             Other Tests.         (line  33)
* \ /1, bitwise negation (evaluable):    ref-ari-aex.         (line 127)
* \ /2, bitwise exclusive or (evaluable): ref-ari-aex.        (line 124)
* \" (escape sequence):                  ref-syn-syn-esc.     (line  49)
* \' (escape sequence):                  ref-syn-syn-esc.     (line  49)
* \+ /1, not provable:                   ref-sem-ctr-naf.     (line   6)
* \+/1 (built-in, ref page):             mpg-ref-not_provable.
                                                              (line   6)
* \/ /2, bitwise disjunction (evaluable): ref-ari-aex.        (line 112)
* \= /2 (built-in):                      ref-lte-met-usu.     (line  24)
* \=/2 (built-in, ref page):             mpg-ref-not_unifiable.
                                                              (line   6)
* \==/2 (built-in):                      ref-lte-cte-sot.     (line  35)
* \==/2 (built-in, ref page):            mpg-ref-term_not_equal_to.
                                                              (line   6)
* \a (escape sequence):                  ref-syn-syn-esc.     (line  35)
* \b (escape sequence):                  ref-syn-syn-esc.     (line  11)
* \d (escape sequence):                  ref-syn-syn-esc.     (line  32)
* \e (escape sequence):                  ref-syn-syn-esc.     (line  29)
* \f (escape sequence):                  ref-syn-syn-esc.     (line  23)
* \<LFD> (escape sequence):              ref-syn-syn-esc.     (line  44)
* \n (escape sequence):                  ref-syn-syn-esc.     (line  17)
* \OCTAL-DIGIT...\ (escape sequence):    ref-syn-syn-esc.     (line  41)
* \r (escape sequence):                  ref-syn-syn-esc.     (line  26)
* \t (escape sequence):                  ref-syn-syn-esc.     (line  14)
* \v (escape sequence):                  ref-syn-syn-esc.     (line  20)
* \xHEX-DIGIT...\ (escape sequence):     ref-syn-syn-esc.     (line  38)
* \\ (escape sequence):                  ref-syn-syn-esc.     (line  49)
* \` (escape sequence):                  ref-syn-syn-esc.     (line  49)
* ^ /2, boolean existential quantifier:  CLPB Introduction.   (line  48)
* ^ /2, existential quantifier:          ref-sem-ctr-oth.     (line   6)
* ^ /2, generic power (evaluable):       ref-ari-aex.         (line 295)
* ^/2 (built-in):                        ref-all-cse-equ.     (line   6)
* ^/2 (built-in, ref page):              mpg-ref-exists.      (line   6)
* ^/2 (input method):                    Default Input Methods.
                                                              (line  20)
* _, anonymous variable:                 ref-syn-trm-var.     (line  11)
* {}/1 (clpqr):                          CLPQR Solver Predicates.
                                                              (line  11)
* |, list separator:                     ref-syn-cpt-lis.     (line  29)
* ~ /1, boolean not:                     CLPB Introduction.   (line  36)
* abolish (definition):                  Glossary.            (line   7)
* abolish/[1,2] (built-in):              ref-mdb-rcd.         (line  19)
* abolish/[1,2] (built-in, ref page):    mpg-ref-abolish.     (line   6)
* abort (CHR debug command):             CHR Tracing.         (line  44)
* abort (debugger command):              Debug Commands.      (line 307)
* abort/0 (built-in):                    ref-ere-int.         (line  21)
* abort/0 (built-in, ref page):          mpg-ref-abort.       (line   6)
* abort/0 (debugger command control):    Action Variables.    (line  83)
* abs /1, absolute value (evaluable):    ref-ari-aex.         (line 152)
* absolute path:                         ref-fdi-syn.         (line  60)
* absolute path <1>:                     ref-fdi-syn.         (line  78)
* absolute_file_name/[2,3] (built-in, ref page): mpg-ref-absolute_file_name.
                                                              (line   6)
* accept (top-level command):            Queries.             (line  39)
* accepted_hosts/1 (start/1 option):     PB Prolog Server Interface.
                                                              (line  30)
* access to streams, random:             ref-iou-raf.         (line   6)
* access/1 (absolute_file_name/3 option): mpg-ref-absolute_file_name.
                                                              (line 121)
* accumulating parameter:                Accumulating Parameters.
                                                              (line   6)
* acos /1, (evaluable):                  ref-ari-aex.         (line 234)
* acosh /1, (evaluable):                 ref-ari-aex.         (line 258)
* acot /1, (evaluable):                  ref-ari-aex.         (line 246)
* acot2 /2, (evaluable):                 ref-ari-aex.         (line 250)
* acoth /1, (evaluable):                 ref-ari-aex.         (line 266)
* action condition, breakpoint:          Action Conditions.   (line   6)
* action execution, breakpoint:          Breakpoint Actions.  (line  89)
* action variables, debugger:            Breakpoint Actions.  (line   6)
* action variables, debugger <1>:        Action Variables.    (line   6)
* action, breakpoint:                    Creating Breakpoints.
                                                              (line  39)
* action, breakpoint <1>:                Breakpoint Actions.  (line   6)
* acyclic_term/1 (built-in, ref page):   mpg-ref-acyclic_term.
                                                              (line   6)
* acyclic_term/2 (built-in):             ref-lte-act.         (line  19)
* address, socket:                       lib-sockets.         (line  20)
* add_breakpoint/2 (built-in):           Breakpoint Predicates.
                                                              (line  11)
* add_breakpoint/2 (built-in, ref page): mpg-ref-add_breakpoint.
                                                              (line   6)
* add_edges/3 (ugraphs):                 lib-ugraphs.         (line  64)
* add_edges/3 (wgraphs):                 lib-wgraphs.         (line  81)
* add_element/3 (sets):                  lib-sets.            (line  13)
* add_vertices/3 (ugraphs):              lib-ugraphs.         (line  57)
* add_vertices/3 (wgraphs):              lib-wgraphs.         (line  34)
* advice breakpoint:                     Advanced Debugging.  (line   6)
* advice breakpoint <1>:                 Advice-points.       (line   6)
* advice-point (definition):             Glossary.            (line  12)
* advice/0 (debugger condition):         Advice-points.       (line  24)
* advice/0 (debugger condition) <1>:     Other Tests.         (line  11)
* agc_count (statistics key):            ref-mgc-ove-sta.     (line 223)
* agc_freed (statistics key):            ref-mgc-ove-sta.     (line 229)
* agc_margin (prolog flag):              ref-lps-flg.         (line  24)
* agc_margin (prolog flag) <1>:          ref-mgc-ago-agc.     (line  14)
* agc_margin (prolog flag) <2>:          Atoms in C.          (line  35)
* agc_nbfreed (statistics key):          ref-mgc-ove-sta.     (line 226)
* agc_time (statistics key):             ref-mgc-ove-sta.     (line 232)
* aggregate/3 (aggregate):               lib-aggregate.       (line 143)
* aggregate/4 (aggregate):               lib-aggregate.       (line 139)
* aggregate_all/3 (aggregate):           lib-aggregate.       (line 151)
* aggregate_all/4 (aggregate):           lib-aggregate.       (line 147)
* aggregation:                           lib-aggregate.       (line   6)
* alias, of a stream:                    ref-iou-sfh-sob.     (line  36)
* alias, stream (definition):            Glossary.            (line 387)
* alias, stream (definition) <1>:        Glossary.            (line 798)
* alias/1 (open/4 option):               ref-iou-sfh-sob.     (line  17)
* alias/1 (open/4 option) <1>:           mpg-ref-open.        (line  61)
* alias/1 (stream property):             mpg-ref-stream_property.
                                                              (line  47)
* all (absolute_file_name/3 solutions):  mpg-ref-absolute_file_name.
                                                              (line 214)
* all (labeling/2 option):               Enumeration Predicates.
                                                              (line 212)
* all (maximize/3 option):               Enumeration Predicates.
                                                              (line  53)
* all (minimize/3 option):               Enumeration Predicates.
                                                              (line  53)
* all solutions, predicates for:         ref-all-sum.         (line   6)
* all solutions, predicates for <1>:     mpg-top-all.         (line   6)
* all/1 (plunit option):                 PlUnit A Unit Test Box.
                                                              (line 128)
* all_different/[1,2] (clpfd):           Arithmetic-Logical Constraints.
                                                              (line 106)
* all_distinct/[1,2] (clpfd):            Arithmetic-Logical Constraints.
                                                              (line 106)
* alphanumeric (definition):             Glossary.            (line  18)
* among/3 (lex_chain/2 option):          Arithmetic-Logical Constraints.
                                                              (line 295)
* among/3 (scalar_product/5 option):     Arithmetic Constraints.
                                                              (line  53)
* analysis, coverage:                    Coverage Analysis.   (line   6)
* ancestor goal:                         Debug Format.        (line  40)
* ancestor/2 (debugger condition):       Accessing Past Debugger States.
                                                              (line 123)
* ancestor/2 (debugger condition) <1>:   Goal Tests.          (line  39)
* ancestors (CHR debug command):         CHR Tracing.         (line  35)
* ancestors (debugger command):          Debug Commands.      (line 200)
* ancestors (definition):                Glossary.            (line  23)
* and:                                   ref-sem-ctr.         (line   6)
* annotate goal (debugger command):      FDBG Debugger Commands.
                                                              (line  15)
* annotation:                            FDBG Names of Terms. (line  14)
* anonymous variable:                    ref-syn-trm-var.     (line   6)
* anonymous variable (definition):       Glossary.            (line  28)
* ANSI conformance:                      Function Prototypes. (line   6)
* anti_first_fail (labeling/2 option):   Enumeration Predicates.
                                                              (line  90)
* any (absolute_file_name/3 file type):  mpg-ref-absolute_file_name.
                                                              (line  62)
* anystretchocc/1 (automaton/9 option):  Automata Constraints.
                                                              (line  79)
* API:                                   Mixing C and Prolog. (line   6)
* append (absolute_file_name/3 access):  mpg-ref-absolute_file_name.
                                                              (line 136)
* append (open/[3,4] mode):              mpg-ref-open.        (line  37)
* append, avoiding:                      Accumulating Lists.  (line   6)
* append/3 (built-in):                   ref-lte-acl.         (line   6)
* append/3 (built-in, ref page):         mpg-ref-append.      (line   6)
* append/[2,5] (lists):                  lib-lists.           (line  19)
* appending, to existing files:          ref-iou-sfh-opn.     (line  18)
* append_length/[3,4] (lists):           lib-lists.           (line 272)
* append_queue/3 (queues):               lib-queues.          (line  74)
* application builder:                   The Application Builder.
                                                              (line  14)
* apply (CHR port):                      CHR Ports.           (line  42)
* arg/3 (built-in):                      ref-lte-act.         (line  12)
* arg/3 (built-in, ref page):            mpg-ref-arg.         (line   6)
* argument (definition):                 Glossary.            (line  33)
* argument (definition) <1>:             ref-syn-cpt.         (line  11)
* arguments of terms:                    ref-lte-act.         (line  12)
* arguments, command-line:               Start.               (line   6)
* arguments, reference page field:       mpg-ref-ove.         (line  13)
* arguments, types of:                   mpg-ref.             (line  14)
* arguments, types of <1>:               mpg-ref-aty.         (line  11)
* argv (prolog flag):                    ref-lps-flg.         (line  29)
* argv (prolog flag) <1>:                Initializing the Prolog Engine.
                                                              (line  15)
* argv (prolog flag) <2>:                too-sicstus.         (line 114)
* arithmetic and character codes:        ref-ari-aex.         (line 304)
* arithmetic equality:                   ref-ari-acm.         (line  19)
* arithmetic errors:                     ref-ari-exc.         (line   9)
* arithmetic exceptions:                 ref-ari-exc.         (line   9)
* arithmetic expression:                 ref-ari-aex.         (line   6)
* arithmetic expressions, evaluating:    ref-ari-eae.         (line   6)
* arithmetic functors:                   ref-ari-aex.         (line  21)
* arithmetic limits:                     ref-ari-ove.         (line   6)
* arithmetic, predicates for:            ref-ari-sum.         (line   6)
* arithmetic, predicates for <1>:        mpg-top-ari.         (line   6)
* arithmetic_mean/2 (statistics):        lib-statistics.      (line  39)
* arity (argument type):                 mpg-ref-aty-ety.     (line  18)
* arity (definition):                    Glossary.            (line  36)
* arity, of a functor:                   ref-syn-cpt.         (line  11)
* asin /1, (evaluable):                  ref-ari-aex.         (line 231)
* asinh /1, (evaluable):                 ref-ari-aex.         (line 254)
* ask/0 (debugger command control):      Action Variables.    (line  33)
* ask_query/4 (built-in):                Query Handling Predicates.
                                                              (line   8)
* ask_query/4 (built-in, ref page):      mpg-ref-ask_query.   (line   6)
* ASPX:                                  PB Features.         (line  26)
* assert/[1,2] (built-in):               ref-mdb-acd.         (line  14)
* assert/[1,2] (built-in, ref page):     mpg-ref-assert.      (line   6)
* asserta/[1,2] (built-in):              ref-mdb-acd.         (line  14)
* asserta/[1,2] (built-in, ref page):    mpg-ref-asserta.     (line   6)
* assertion and retraction predicates:   ref-mdb-bas.         (line   6)
* assertz/[1,2] (built-in):              ref-mdb-acd.         (line  14)
* assertz/[1,2] (built-in, ref page):    mpg-ref-assertz.     (line   6)
* assignment, destructive:               ref-lte-mut.         (line   6)
* assignment/[2,3] (clpfd):              Arithmetic-Logical Constraints.
                                                              (line 181)
* association list:                      lib-assoc.           (line   6)
* association list <1>:                  lib-avl.             (line   6)
* associativity of operators:            ref-syn-ops-ove.     (line  38)
* assoc_to_list/2 (assoc):               lib-assoc.           (line  18)
* assumptions/1 (labeling/2 option):     Enumeration Predicates.
                                                              (line 234)
* asynchronously, calling Prolog:        Calling Prolog Asynchronously.
                                                              (line  10)
* atan /1, (evaluable):                  ref-ari-aex.         (line 238)
* atan2 /2, (evaluable):                 ref-ari-aex.         (line 242)
* atanh /1, (evaluable):                 ref-ari-aex.         (line 262)
* atom (definition):                     Glossary.            (line  40)
* atom (double_quotes flag value):       ref-lps-flg.         (line 113)
* atom garbage collection:               ref-mgc-ago.         (line  13)
* atom, one-char (definition):           Glossary.            (line 559)
* atom/1 (built-in, ref page):           mpg-ref-atom.        (line   6)
* atomic term (definition):              Glossary.            (line  51)
* atomic/1 (built-in, ref page):         mpg-ref-atomic.      (line   6)
* atomic_type/[1,2,3] (structs):         str-etr.             (line  35)
* atoms:                                 ref-syn-trm-ato.     (line   6)
* atoms (statistics key):                ref-mgc-ove-sta.     (line 147)
* atoms, canonical representation of:    Atoms in C.          (line   6)
* atoms_nbfree (statistics key):         ref-mgc-ove-sta.     (line 199)
* atoms_nbused (statistics key):         ref-mgc-ove-sta.     (line 196)
* atoms_used (statistics key):           ref-mgc-ove-sta.     (line 193)
* atom_chars/2 (built-in):               ref-lte-c2t.         (line   6)
* atom_chars/2 (built-in) <1>:           ref-lte-c2t.         (line  22)
* atom_chars/2 (built-in, ref page):     mpg-ref-atom_chars.  (line   6)
* atom_codes/2 (built-in):               ref-lte-c2t.         (line   6)
* atom_codes/2 (built-in) <1>:           ref-lte-c2t.         (line  11)
* atom_codes/2 (built-in, ref page):     mpg-ref-atom_codes.  (line   6)
* atom_concat/3 (built-in):              ref-lte-atm.         (line  10)
* atom_concat/3 (built-in, ref page):    mpg-ref-atom_concat. (line   6)
* atom_garbage_collection (statistics key): ref-mgc-ove-sta.  (line 155)
* atom_length/2 (built-in):              ref-lte-atm.         (line   6)
* atom_length/2 (built-in, ref page):    mpg-ref-atom_length. (line   6)
* attribute declaration:                 lib-atts.            (line  21)
* attribute/1 (declaration):             lib-atts.            (line  21)
* attributed variables:                  lib-atts.            (line   6)
* attribute_goal/2 (Module):             lib-atts.            (line 119)
* at_end_of_line/[0,1] (built-in):       ref-iou-cin-elf.     (line   6)
* at_end_of_line/[0,1] (built-in, ref page): mpg-ref-at_end_of_line.
                                                              (line   6)
* at_end_of_stream/[0,1] (built-in):     ref-iou-cin-elf.     (line   6)
* at_end_of_stream/[0,1] (built-in, ref page): mpg-ref-at_end_of_stream.
                                                              (line   6)
* auto-generation of names:              FDBG Name Auto-Generation.
                                                              (line   6)
* automaton/[3,8,9] (clpfd):             Automata Constraints.
                                                              (line  21)
* aux (table/3 method/1 value):          Extensional Constraints.
                                                              (line  68)
* avl_change/5 (avl):                    lib-avl.             (line 116)
* avl_delete/4 (avl):                    lib-avl.             (line 157)
* avl_del_max/4 (avl):                   lib-avl.             (line 168)
* avl_del_min/4 (avl):                   lib-avl.             (line 162)
* avl_domain/2 (avl):                    lib-avl.             (line  33)
* avl_fetch/2 (avl):                     lib-avl.             (line  85)
* avl_fetch/3 (avl):                     lib-avl.             (line  90)
* avl_height/2 (avl):                    lib-avl.             (line  57)
* avl_incr/4 (avl):                      lib-avl.             (line 153)
* avl_map/2 (avl):                       lib-avl.             (line 174)
* avl_map/3 (avl):                       lib-avl.             (line 178)
* avl_max/2 (avl):                       lib-avl.             (line  51)
* avl_max/3 (avl):                       lib-avl.             (line  54)
* avl_member/2 (avl):                    lib-avl.             (line  72)
* avl_member/3 (avl):                    lib-avl.             (line  78)
* avl_min/2 (avl):                       lib-avl.             (line  45)
* avl_min/3 (avl):                       lib-avl.             (line  48)
* avl_next/3 (avl):                      lib-avl.             (line  96)
* avl_next/4 (avl):                      lib-avl.             (line 100)
* avl_prev/3 (avl):                      lib-avl.             (line 106)
* avl_prev/4 (avl):                      lib-avl.             (line 110)
* avl_range/2 (avl):                     lib-avl.             (line  38)
* avl_size/2 (avl):                      lib-avl.             (line  61)
* avl_store/4 (avl):                     lib-avl.             (line 147)
* avl_to_list/2 (avl):                   lib-avl.             (line  18)
* avoiding append:                       Accumulating Lists.  (line   6)
* bab (labeling/2 option):               Enumeration Predicates.
                                                              (line 221)
* backtrace:                             Debug Commands.      (line 202)
* backtrace <1>:                         Accessing Past Debugger States.
                                                              (line   9)
* backtrace (debugger command):          Debug Commands.      (line 217)
* backtrace (definition):                Glossary.            (line  54)
* backtracking:                          ref-sem-sec.         (line  41)
* backtracking <1>:                      ref-sem-sec.         (line 110)
* backtracking (definition):             Glossary.            (line  61)
* backtracking, terminating a loop:      Terminating a Backtracking Loop.
                                                              (line  14)
* backtracks (fd_statistics/2 option):   Statistics Predicates.
                                                              (line  33)
* backtracks (zinc option value):        FlatZinc Exported Predicates.
                                                              (line 267)
* backtracks (zinc option value) <1>:    MiniZinc Exported Predicates.
                                                              (line  81)
* backward-paragraph (emacs command):    Usage.               (line  97)
* bag:                                   lib-bags.            (line   6)
* bagof/3 (built-in):                    ref-all-cba.         (line  10)
* bagof/3 (built-in, ref page):          mpg-ref-bagof.       (line   6)
* bagof_rd_noblock/3 (linda_client):     lib-linda-client.    (line 101)
* bag_add_element/4 (bags):              lib-bags.            (line 198)
* bag_del_element/4 (bags):              lib-bags.            (line 202)
* bag_intersect/2 (bags):                lib-bags.            (line 194)
* bag_intersection/2 (bags):             lib-bags.            (line 184)
* bag_intersection/2 (bags) <1>:         lib-bags.            (line 188)
* bag_max/2 (bags):                      lib-bags.            (line 129)
* bag_max/3 (bags):                      lib-bags.            (line 144)
* bag_min/2 (bags):                      lib-bags.            (line 135)
* bag_min/2 (bags) <1>:                  lib-bags.            (line 150)
* bag_subtract/3 (bags):                 lib-bags.            (line 206)
* bag_to_list/2 (bags):                  lib-bags.            (line  80)
* bag_to_ord_set/2 (bags):               lib-bags.            (line  85)
* bag_to_ord_set/3 (bags):               lib-bags.            (line  91)
* bag_to_set/2 (bags):                   lib-bags.            (line 101)
* bag_to_set/3 (bags):                   lib-bags.            (line 107)
* bag_union/2 (bags):                    lib-bags.            (line 179)
* bag_union/3 (bags):                    lib-bags.            (line 176)
* bbkey (argument type):                 mpg-ref-aty-ety.     (line  11)
* bb_delete/2 (built-in):                ref-mdb-bbd.         (line  36)
* bb_delete/2 (built-in, ref page):      mpg-ref-bb_delete.   (line   6)
* bb_get/2 (built-in):                   ref-mdb-bbd.         (line  30)
* bb_get/2 (built-in, ref page):         mpg-ref-bb_get.      (line   6)
* bb_inf/[3,5] (clpqr):                  CLPQR Solver Predicates.
                                                              (line 134)
* bb_inf/[3,5] (clpqr) <1>:              CLPQR Solver Predicates.
                                                              (line 147)
* bb_put/2 (built-in):                   ref-mdb-bbd.         (line  26)
* bb_put/2 (built-in, ref page):         mpg-ref-bb_put.      (line   6)
* bb_update/3 (built-in):                ref-mdb-bbd.         (line  42)
* bb_update/3 (built-in, ref page):      mpg-ref-bb_update.   (line   6)
* begin_tests/[1,2] (plunit declaration): PlUnit A Unit Test Box.
                                                              (line  10)
* best (labeling/2 option):              Enumeration Predicates.
                                                              (line 208)
* best (maximize/3 option):              Enumeration Predicates.
                                                              (line  49)
* best (minimize/3 option):              Enumeration Predicates.
                                                              (line  49)
* between/3 (between):                   lib-between.         (line  11)
* bid/1 (debugger condition):            Built-in Predicates for Breakpoint Handling.
                                                              (line  53)
* bid/1 (debugger condition) <1>:        Port Tests.          (line  38)
* binary tree:                           lib-assoc.           (line   6)
* binary tree <1>:                       lib-avl.             (line   6)
* binding (definition):                  Glossary.            (line  66)
* bin_packing/2 (clpfd):                 Placement Constraints.
                                                              (line 148)
* bisect (labeling/2 option):            Enumeration Predicates.
                                                              (line 134)
* blackboard:                            ref-mdb-bbd.         (line   6)
* block (predicate property):            mpg-ref-predicate_property.
                                                              (line  48)
* block declaration:                     Block Declarations.  (line   6)
* block/0 (debugger port value):         Port Tests.          (line  13)
* block/1 (built-in, ref page):          mpg-ref-block.       (line   6)
* block/1 (declaration):                 Block Declarations.  (line   6)
* block/1 (predicate property):          ref-lps-app.         (line  32)
* blocked goal:                          Debug Format.        (line  72)
* blocked goal (definition):             Glossary.            (line  70)
* blocked goals (debugger command):      Debug Commands.      (line 250)
* blocked goals (debugger command) <1>:  FDBG Debugger Commands.
                                                              (line   9)
* blocked/1 (plunit option):             PlUnit A Unit Test Box.
                                                              (line  35)
* body (definition):                     Glossary.            (line  73)
* body of a clause:                      ref-sem-pro.         (line  23)
* bof (seek/4 method):                   mpg-ref-seek.        (line  33)
* bool_and/2 (clpfd):                    Arithmetic-Logical Constraints.
                                                              (line 312)
* bool_channel/4 (clpfd):                Arithmetic-Logical Constraints.
                                                              (line 332)
* bool_or/2 (clpfd):                     Arithmetic-Logical Constraints.
                                                              (line 319)
* bool_xor/2 (clpfd):                    Arithmetic-Logical Constraints.
                                                              (line 326)
* bound/1 (cumulatives/3 option):        Scheduling Constraints.
                                                              (line  97)
* bounded (prolog flag):                 ref-lps-flg.         (line  41)
* bounding_box/2 (geost/[2,3,4] option): Placement Constraints.
                                                              (line 286)
* bounds (all_different/2 consistency/1 value): Arithmetic-Logical Constraints.
                                                              (line 137)
* bounds (all_distinct/2 consistency/1 value): Arithmetic-Logical Constraints.
                                                              (line 137)
* bounds (global_cardinality/3 consistency/1 value): Arithmetic-Logical Constraints.
                                                              (line  72)
* bounds (scalar_product/5 consistency/1 value): Arithmetic Constraints.
                                                              (line  70)
* bounds-consistent:                     Definitions.         (line  28)
* bounds-disentailed:                    Definitions.         (line  33)
* bounds-entailed:                       Definitions.         (line  33)
* box, invocation:                       Procedure Box.       (line 102)
* box, invocation (definition):          Glossary.            (line 433)
* box, procedure:                        Procedure Box.       (line   6)
* box, procedure (definition):           Glossary.            (line 641)
* break:                                 Nested.              (line   6)
* break (CHR debug command):             CHR Tracing.         (line  41)
* break (debugger command):              Debug Commands.      (line 318)
* break (top-level command):             Queries.             (line  50)
* break/0 (built-in):                    Nested.              (line   6)
* break/0 (built-in) <1>:                ref-lod-rpx.         (line   6)
* break/0 (built-in) <2>:                ref-ere-int.         (line   9)
* break/0 (built-in, ref page):          mpg-ref-break.       (line   6)
* breakpoint (definition):               Glossary.            (line  77)
* breakpoint action:                     Creating Breakpoints.
                                                              (line  39)
* breakpoint action <1>:                 Breakpoint Actions.  (line   6)
* breakpoint action condition:           Action Conditions.   (line   6)
* breakpoint action execution:           Breakpoint Actions.  (line  89)
* breakpoint condition:                  Creating Breakpoints.
                                                              (line  39)
* breakpoint conditions:                 Breakpoint Conditions.
                                                              (line   6)
* breakpoint handling predicates:        Breakpoint Predicates.
                                                              (line   6)
* breakpoint identifier:                 Creating Breakpoints.
                                                              (line  31)
* breakpoint processing:                 Breakpoint Processing.
                                                              (line   6)
* breakpoint spec:                       Creating Breakpoints.
                                                              (line   6)
* breakpoint spec (definition):          Glossary.            (line  87)
* breakpoint test:                       Creating Breakpoints.
                                                              (line  39)
* breakpoint test condition:             Goal Tests.          (line   6)
* breakpoint, advice:                    Advanced Debugging.  (line   6)
* breakpoint, advice <1>:                Advice-points.       (line   6)
* breakpoint, debugger:                  Advanced Debugging.  (line   6)
* breakpoint, generic:                   Specific and Generic Breakpoints.
                                                              (line   6)
* breakpoint, line:                      Usage.               (line 159)
* breakpoint, setting:                   Usage.               (line 159)
* breakpoint, specific:                  Specific and Generic Breakpoints.
                                                              (line   6)
* breakpoint_expansion/2 (hook, ref page): mpg-ref-breakpoint_expansion.
                                                              (line   6)
* breakpoint_expansion/2 (user, hook):   Hooks Related to Breakpoints.
                                                              (line   8)
* breakpoint_expansion/2 (user, hook) <1>: Condition Macros.  (line  22)
* break_level/1 (debugger condition):    Break Tests.         (line  10)
* break_level/1 (debugger condition) <1>: Past States.        (line  13)
* buffer (definition):                   Glossary.            (line  96)
* builder, application:                  The Application Builder.
                                                              (line  14)
* built-in operators:                    ref-syn-ops-ove.     (line  76)
* built-in operators, list of:           ref-syn-ops-bop.     (line   6)
* built-in predicate (definition):       Glossary.            (line  99)
* built-in predicates, annotations:      mpg-ref-cat.         (line   6)
* built-in predicates, list of:          mpg-top.             (line  32)
* built_in (predicate property):         mpg-ref-predicate_property.
                                                              (line  29)
* built_in/0 (predicate property):       ref-lps-app.         (line  10)
* Button (Tk event type):                Event Handling.      (line  36)
* button (Tk widget):                    Types of Widget.     (line  10)
* ButtonPress (Tk event type):           Event Handling.      (line  37)
* ButtonRelease (Tk event type):         Event Handling.      (line  40)
* byte (argument type):                  mpg-ref-aty-ety.     (line  19)
* byte-list (definition):                Glossary.            (line  93)
* byte_count/2 (built-in):               ref-iou-sfh-opn.     (line  80)
* byte_count/2 (built-in) <1>:           ref-iou-sos.         (line  16)
* byte_count/2 (built-in, ref page):     mpg-ref-byte_count.  (line   6)
* C errors, functions for:               cpg-top-err.         (line   6)
* C functions for Exceptions:            cpg-top-exc.         (line   6)
* C functions for File and Stream Handling: cpg-top-fst.      (line   6)
* C functions for Foreign Interface:     cpg-top-fin.         (line   6)
* C functions for I/O:                   cpg-top-cio.         (line   6)
* C functions for initialization:        cpg-top-main.        (line   6)
* C functions for memory management:     cpg-top-mem.         (line   6)
* C functions for signal handling:       cpg-top-sig.         (line   6)
* C functions for terms:                 cpg-top-tic.         (line   6)
* C functions for type tests:            cpg-top-typ.         (line   6)
* C functions, return values, errors:    cpg-rve.             (line   6)
* cache_size/1 (db_open/5 option):       The Predicates.      (line  54)
* call (CHR port):                       CHR Ports.           (line   9)
* call (leashing mode):                  Basic Debug.         (line  59)
* call errors:                           ref-sem-exc.         (line   9)
* call exceptions:                       ref-sem-exc.         (line   9)
* call, procedure:                       ref-sem-pro.         (line   6)
* call, procedure <1>:                   ref-sem-sec.         (line  98)
* call/0 (debugger port value):          Port Tests.          (line  13)
* call/1 (clpfd:dispatch_global/4 request): The Global Constraint Programming Interface.
                                                              (line  71)
* call/[1,2,...,255] (built-in, ref page): mpg-ref-call.      (line   6)
* callable term (definition):            Glossary.            (line 103)
* callable/1 (built-in, ref page):       mpg-ref-callable.    (line   6)
* calling Prolog asynchronously:         Calling Prolog Asynchronously.
                                                              (line  10)
* calling Prolog from C:                 Calling Prolog from C.
                                                              (line   6)
* CallSpec:                              Terminology.         (line  70)
* call_cleanup/2 (built-in, ref page):   mpg-ref-call_cleanup.
                                                              (line   6)
* call_residue_vars/2 (built-in, ref page): mpg-ref-call_residue_vars.
                                                              (line   6)
* canonical representation of atoms:     Atoms in C.          (line   6)
* canvas (Tk widget):                    Types of Widget.     (line  13)
* card/2, boolean cardinality:           CLPB Introduction.   (line  70)
* case-normalized path:                  ref-fdi-syn.         (line  98)
* case/[3,4] (clpfd):                    Extensional Constraints.
                                                              (line  80)
* cast/1 (structs):                      str-cas.             (line   6)
* Casting:                               str-cas.             (line   6)
* catch/3 (built-in):                    ref-ere-hex-pgo.     (line   6)
* catch/3 (built-in, ref page):          mpg-ref-catch.       (line   6)
* catching unknown procedures:           ref-mdb-dsp.         (line  63)
* ceiling /1, (evaluable):               ref-ari-aex.         (line 195)
* central_moment/3 (statistics):         lib-statistics.      (line  52)
* changing prompt:                       ref-iou-tin-cpr.     (line   6)
* changing type-in module:               ref-mod-tyi.         (line   6)
* char (argument type):                  mpg-ref-aty-ety.     (line  20)
* char/1 (map method):                   Default Map Methods. (line  11)
* character code (definition):           Glossary.            (line 107)
* character code set (definition):       Glossary.            (line 111)
* character codes, arithmetic and:       ref-ari-aex.         (line 304)
* character codes, lists of:             ref-syn-cpt-sli.     (line   6)
* character encoding:                    ref-iou-sfh-enc.     (line  17)
* character escaping:                    ref-syn-ces.         (line   6)
* character I/O, predicates for:         ref-iou-sum.         (line   9)
* character I/O, predicates for <1>:     mpg-top-cio.         (line   6)
* character set:                         ref-syn-syn-tok.     (line   6)
* character set <1>:                     ref-iou-sfh-enc.     (line  17)
* character, EOF:                        Keyboard Characters. (line  13)
* character, interrupt:                  Keyboard Characters. (line  13)
* character-conversion:                  mpg-ref-char_conversion.
                                                              (line  23)
* character-conversion <1>:              mpg-ref-current_char_conversion.
                                                              (line  23)
* character-conversion mapping (definition): Glossary.        (line 117)
* character-type mapping (definition):   Glossary.            (line 128)
* characters, conversion to character code: ref-syn-trm-int.  (line  20)
* characters, conversion to integers:    ref-ari-aex.         (line 307)
* characters, input and output of:       ref-iou-cin.         (line  14)
* characters, strings of:                ref-syn-cpt-sli.     (line   6)
* character_count/2 (built-in):          ref-iou-sfh-opn.     (line  80)
* character_count/2 (built-in) <1>:      ref-iou-sos.         (line  19)
* character_count/2 (built-in, ref page): mpg-ref-character_count.
                                                              (line   6)
* chars (argument type):                 mpg-ref-aty-ety.     (line  21)
* chars (double_quotes flag value):      ref-lps-flg.         (line 110)
* char_code/2 (built-in):                ref-lte-c2t.         (line   6)
* char_code/2 (built-in) <1>:            ref-lte-c2t.         (line  33)
* char_code/2 (built-in, ref page):      mpg-ref-char_code.   (line   6)
* char_conversion (prolog flag):         Glossary.            (line 125)
* char_conversion (prolog flag) <1>:     ref-lps-flg.         (line  46)
* char_conversion/2 (built-in, ref page): mpg-ref-char_conversion.
                                                              (line   6)
* checkbag/2 (bags):                     lib-bags.            (line  51)
* checkbutton (Tk widget):               Types of Widget.     (line  17)
* checker, constraint:                   Automata Constraints.
                                                              (line   6)
* checking indexicals:                   Indexicals.          (line  11)
* check_guard_bindings (CHR option):     CHR Semantics.       (line  86)
* choice (statistics key):               ref-mgc-ove-sta.     (line 121)
* choice stack:                          ref-mgc-ove.         (line  20)
* choicepoints (definition):             Glossary.            (line 133)
* CHOICESTKSIZE (system property):       System Properties and Environment Variables.
                                                              (line 157)
* choice_free (statistics key):          ref-mgc-ove-sta.     (line 190)
* choice_used (statistics key):          ref-mgc-ove-sta.     (line 187)
* chr_constraint/1 (CHR declaration):    CHR Constraint Declaration.
                                                              (line   6)
* chr_flag/3 (chr):                      CHR Debugging Predicates.
                                                              (line  32)
* chr_leash/1 (chr):                     CHR Debugging Predicates.
                                                              (line  23)
* chr_notrace/0 (chr):                   CHR Debugging Predicates.
                                                              (line  17)
* chr_option/2 (CHR declaration):        CHR Semantics.       (line  76)
* chr_show_store/1 (chr):                CHR Debugging Predicates.
                                                              (line  51)
* chr_trace/0 (chr):                     CHR Debugging Predicates.
                                                              (line  11)
* chr_type/1 (CHR declaration):          CHR Constraint Declaration.
                                                              (line  68)
* circuit/1 (assignment/3 option):       Arithmetic-Logical Constraints.
                                                              (line 196)
* circuit/[1,2] (clpfd):                 Graph Constraints.   (line  14)
* clash, name:                           ref-mod-ncl.         (line   6)
* clash, name (definition):              Glossary.            (line 551)
* class/1 (objects):                     obj-exp-class.       (line   6)
* classes, error:                        ref-ere-err.         (line  22)
* Classname, Fully Qualified:            Jasper Library Predicates.
                                                              (line  86)
* class_ancestor/2 (objects):            obj-exp-class_ancestor.
                                                              (line   6)
* class_method/1 (objects):              obj-exp-class_method.
                                                              (line   6)
* class_of/2 (objects):                  obj-exp-class_of.    (line   6)
* class_superclass/2 (objects):          obj-exp-class_superclass.
                                                              (line   6)
* clause:                                ref-sem-pro.         (line  20)
* clause (definition):                   Glossary.            (line 137)
* clause, guarded:                       Conditionals and Disjunction.
                                                              (line  70)
* clause, guarded (definition):          Glossary.            (line 363)
* clause, instance of:                   ref-sem-sec.         (line  12)
* clause, unit:                          ref-sem-pro.         (line  28)
* clause, unit (definition):             Glossary.            (line 891)
* clause/[2,3] (built-in):               ref-mdb-acl.         (line   6)
* clause/[2,3] (built-in, ref page):     mpg-ref-clause.      (line   6)
* clauseref/5 (source information descriptor): mpg-ref-goal_source_info.
                                                              (line  40)
* clauses, database references to:       ref-mdb-dre.         (line   6)
* clauses, declarative interpretation of: ref-sem-sec.        (line   6)
* clauses, printing:                     ref-iou-tou-pcl.     (line   6)
* clauses, procedural interpretation of: ref-sem-sec.         (line   6)
* cleanup/1 (plunit option):             PlUnit A Unit Test Box.
                                                              (line  78)
* close (Tcl command):                   Commands.            (line 596)
* close on SPQuery:                      Jasper Package Class Reference.
                                                              (line 145)
* close/1 (built-in):                    ref-iou-sfh-cst.     (line   6)
* close/[1,2] (built-in, ref page):      mpg-ref-close.       (line   6)
* close_all_streams/0 (file_systems):    lib-file_systems.    (line 124)
* close_client/0 (linda_client):         lib-linda-client.    (line  30)
* closing a file:                        ref-iou-sfh-cst.     (line   6)
* closing a stream:                      ref-iou-sfh-cst.     (line   6)
* clpfd:dispatch_global/4:               The Global Constraint Programming Interface.
                                                              (line  23)
* clpfd:full_answer/0:                   Answer Constraints.  (line  20)
* CLSID:                                 Terminology.         (line  11)
* clumped/2 (lists):                     lib-lists.           (line 788)
* clumps/2 (lists):                      lib-lists.           (line 771)
* code (argument type):                  mpg-ref-aty-ety.     (line  22)
* code, character (definition):          Glossary.            (line 107)
* code, glue (definition):               Glossary.            (line 345)
* code, source (definition):             Glossary.            (line 745)
* code, unreachable:                     Xref Introduction.   (line   6)
* code-list (definition):                Glossary.            (line 142)
* codes (argument type):                 mpg-ref-aty-ety.     (line  23)
* codes (double_quotes flag value):      ref-lps-flg.         (line 107)
* collection, garbage:                   ref-lps-flg.         (line 162)
* collection, garbage (definition):      Glossary.            (line 319)
* colored resource:                      Scheduling Constraints.
                                                              (line 129)
* colored/1 (multi_cumulative/[2,3] resource): Scheduling Constraints.
                                                              (line 156)
* comclient_clsid_from_progid/2 (comclient): COM Client Predicates.
                                                              (line  29)
* comclient_create_instance/2 (comclient): COM Client Predicates.
                                                              (line  56)
* comclient_equal/2 (comclient):         COM Client Predicates.
                                                              (line  25)
* comclient_exception_code/2 (comclient): COM Client Predicates.
                                                              (line 106)
* comclient_exception_culprit/2 (comclient): COM Client Predicates.
                                                              (line 108)
* comclient_exception_description/2 (comclient): COM Client Predicates.
                                                              (line 110)
* comclient_garbage_collect/0 (comclient): COM Client Predicates.
                                                              (line   8)
* comclient_get_active_object/2 (comclient): COM Client Predicates.
                                                              (line  62)
* comclient_iid_from_name/2 (comclient): COM Client Predicates.
                                                              (line  46)
* comclient_invoke_method_fun/3 (comclient): COM Client Predicates.
                                                              (line  69)
* comclient_invoke_method_proc/2 (comclient): COM Client Predicates.
                                                              (line  74)
* comclient_invoke_put/3 (comclient):    COM Client Predicates.
                                                              (line  77)
* comclient_is_exception/1 (comclient):  COM Client Predicates.
                                                              (line  95)
* comclient_is_object/1 (comclient):     COM Client Predicates.
                                                              (line  14)
* comclient_name_from_iid/2 (comclient): COM Client Predicates.
                                                              (line  52)
* comclient_progid_from_clsid/2 (comclient): COM Client Predicates.
                                                              (line  34)
* comclient_release/1 (comclient):       COM Client Predicates.
                                                              (line  81)
* comclient_valid_object/1 (comclient):  COM Client Predicates.
                                                              (line  21)
* ComInArg:                              Terminology.         (line  37)
* ComInArg <1>:                          Terminology.         (line  59)
* comint-interrupt-subjob (emacs command): Usage.             (line 190)
* comint-quit-subjob (emacs command):    Usage.               (line 193)
* command (debugger command):            Debug Commands.      (line 332)
* command-line arguments:                Start.               (line   6)
* command/1 (debugger condition):        Breakpoint Actions.  (line  12)
* command/1 (debugger condition) <1>:    Port Tests.          (line  44)
* command/1 (debugger condition) <2>:    Action Conditions.   (line  12)
* commands, debug:                       Debug Commands.      (line   6)
* comment-dwim (emacs command):          Usage.               (line 112)
* communication, process:                lib-linda.           (line   6)
* communication, process <1>:            lib-sockets.         (line   6)
* compactcode (compiling flag value):    ref-lod-ove.         (line  31)
* compactcode (compiling flag value) <1>: ref-lps-flg.        (line  55)
* compactcode (definition):              Glossary.            (line 149)
* compare/3 (built-in, ref page):        mpg-ref-compare.     (line   6)
* comparison of terms:                   ref-lte-cte.         (line  11)
* comparison, of numbers:                ref-ari-acm.         (line   6)
* compilation, JIT:                      ref-lod-ove.         (line  17)
* compilation, JIT <1>:                  System Properties and Environment Variables.
                                                              (line 233)
* compilation_mode/1 (load_files/2 option): mpg-ref-load_files.
                                                              (line  59)
* compile (definition):                  Glossary.            (line 154)
* compile-buffer (emacs command):        Usage.               (line  64)
* compile-file (emacs command):          Usage.               (line  61)
* compile-predicate (emacs command):     Usage.               (line  70)
* compile-region (emacs command):        Usage.               (line  67)
* compile/1 (built-in):                  ref-mod-lod.         (line   6)
* compile/1 (built-in, ref page):        mpg-ref-compile.     (line   6)
* compiled (predicate property):         mpg-ref-predicate_property.
                                                              (line  29)
* compiled/0 (predicate property):       ref-lps-app.         (line  13)
* compiling:                             Run Intro.           (line  15)
* compiling (prolog flag):               Glossary.            (line 151)
* compiling (prolog flag) <1>:           ref-lod-ove.         (line  28)
* compiling (prolog flag) <2>:           ref-lps-flg.         (line  52)
* complement/2 (ugraphs):                lib-ugraphs.         (line  81)
* compose/3 (ugraphs):                   lib-ugraphs.         (line  86)
* compound term (definition):            Glossary.            (line 161)
* compound, terms:                       ref-syn-cpt.         (line  11)
* compound/1 (built-in, ref page):       mpg-ref-compound.    (line   6)
* computation rule:                      ref-sem-sec.         (line  98)
* ComValue:                              Terminology.         (line  32)
* concat (Tcl command):                  Commands.            (line 159)
* concepts, FDBG:                        FDBG Concepts.       (line   6)
* condition, breakpoint:                 Creating Breakpoints.
                                                              (line  39)
* condition/1 (plunit option):           PlUnit A Unit Test Box.
                                                              (line  49)
* conditional compilation:               ref-lod-cnd.         (line   6)
* conditional compilation (definition):  Glossary.            (line 145)
* conditional spypoint:                  Creating Breakpoints.
                                                              (line  26)
* conditionals:                          Conditionals and Disjunction.
                                                              (line   6)
* conditions, breakpoint:                Breakpoint Conditions.
                                                              (line   6)
* conformance, ANSI:                     Function Prototypes. (line   6)
* conjunction:                           ref-sem-ctr.         (line   6)
* conjunction (definition):              Glossary.            (line 169)
* connection_timeout/1 (odbc_db_open/4 option): ODBC Predicates.
                                                              (line  33)
* cons/3 (lists):                        lib-lists.           (line 352)
* consistency errors:                    ref-ere-err-cns.     (line   6)
* consistency/1 (all_different/2 option): Arithmetic-Logical Constraints.
                                                              (line 128)
* consistency/1 (all_distinct/2 option): Arithmetic-Logical Constraints.
                                                              (line 128)
* consistency/1 (assignment/3 option):   Arithmetic-Logical Constraints.
                                                              (line 193)
* consistency/1 (global_cardinality/3 option): Arithmetic-Logical Constraints.
                                                              (line  67)
* consistency/1 (scalar_product/5 option): Arithmetic Constraints.
                                                              (line  61)
* consistency_error/[3,4] (error class): ref-ere-err.         (line 169)
* consistent store:                      CLPFD Interface.     (line  53)
* console-based executable (definition): Glossary.            (line 173)
* constant:                              ref-syn-trm-ove.     (line   6)
* constant (definition):                 Glossary.            (line 177)
* constraint:                            CLPFD Interface.     (line  16)
* constraint checker:                    Automata Constraints.
                                                              (line   6)
* constraint event:                      FDBG Events.         (line  10)
* constraint, global:                    The Global Constraint Programming Interface.
                                                              (line   6)
* constraints (fd_statistics/2 option):  Statistics Predicates.
                                                              (line  39)
* constraints (zinc option value):       MiniZinc Exported Predicates.
                                                              (line  78)
* constraints (zinc option):             FlatZinc Exported Predicates.
                                                              (line 264)
* constraints, posting:                  Posting Constraints. (line   6)
* consult (definition):                  Glossary.            (line 182)
* consult-buffer (emacs command):        Usage.               (line  52)
* consult-file (emacs command):          Usage.               (line  49)
* consult-predicate (emacs command):     Usage.               (line  58)
* consult-region (emacs command):        Usage.               (line  55)
* consult/1 (built-in, ref page):        mpg-ref-consult.     (line   6)
* consulting:                            Run Intro.           (line  15)
* consulting <1>:                        Reading In.          (line   6)
* consume_layout/1 (read_term/[2,3] option): mpg-ref-read_term.
                                                              (line  82)
* contains_term/2 (terms):               lib-terms.           (line 205)
* contains_var/2 (terms):                lib-terms.           (line 226)
* context errors:                        ref-ere-err-con.     (line   6)
* context, load:                         ref-lps-lco.         (line   6)
* context-free grammars:                 ref-gru-dcg.         (line  38)
* context_error/[2,3] (error class):     ref-ere-err.         (line 148)
* contradictory store:                   CLPFD Interface.     (line  53)
* control constructs in grammar rules:   ref-gru-dcg.         (line  75)
* control structure:                     ref-sem-ctr.         (line   6)
* control structure (definition):        Glossary.            (line 189)
* control, predicates for:               ref-sem-con.         (line   6)
* control, predicates for <1>:           mpg-top-con.         (line   6)
* conversions, term:                     Support Functions.   (line   6)
* converting into module-files:          ref-mod-n2m.         (line   6)
* convlist/3 (lists):                    lib-lists.           (line 565)
* copy_term/[2,3] (built-in):            ref-lte-cpt.         (line   6)
* copy_term/[2,3] (built-in, ref page):  mpg-ref-copy_term.   (line   6)
* core (statistics key):                 ref-mgc-ove-sta.     (line 127)
* corners/1 (geost/[2,3,4] option):      Placement Constraints.
                                                              (line 244)
* correlation/3 (statistics):            lib-statistics.      (line 110)
* correspond/4 (lists):                  lib-lists.           (line  40)
* cos /1, (evaluable):                   ref-ari-aex.         (line 203)
* cosh /1, (evaluable):                  ref-ari-aex.         (line 219)
* cost/2 (assignment/3 option):          Arithmetic-Logical Constraints.
                                                              (line 200)
* cost/2 (global_cardinality/3 option):  Arithmetic-Logical Constraints.
                                                              (line  90)
* cot /1, (evaluable):                   ref-ari-aex.         (line 211)
* coth /1, (evaluable):                  ref-ari-aex.         (line 227)
* count /3, (iterator):                  ref-sem-ctr-dol.     (line 212)
* count/3 (iterator):                    mpg-ref-do.          (line  49)
* count/4 (clpfd):                       Arithmetic-Logical Constraints.
                                                              (line  34)
* counter:                               Execution Profiling. (line   6)
* counterseq/1 (automaton/9 option):     Automata Constraints.
                                                              (line 136)
* covariance/3 (statistics):             lib-statistics.      (line 107)
* coverage analysis:                     Coverage Analysis.   (line   6)
* coverage site:                         Coverage Analysis.   (line   6)
* coverage_data/1 (built-in):            Coverage Analysis.   (line  38)
* coverage_data/1 (built-in, ref page):  mpg-ref-coverage_data.
                                                              (line   6)
* create/2 (objects):                    obj-exp-create.      (line   6)
* create_mutable/2 (built-in):           ref-lte-mut.         (line  35)
* create_mutable/2 (built-in, ref page): mpg-ref-create_mutable.
                                                              (line   6)
* creating new files:                    ref-iou-sfh-opn.     (line  18)
* creep (CHR debug command):             CHR Tracing.         (line  29)
* creep (debugger command):              Debug Commands.      (line  59)
* creep (definition):                    Glossary.            (line 195)
* cross-referencer:                      Xref Introduction.   (line   6)
* cumlist/[4,5,6] (lists):               lib-lists.           (line 413)
* cumulative resource:                   Scheduling Constraints.
                                                              (line 124)
* cumulative/1 (geost/[2,3,4] option):   Placement Constraints.
                                                              (line 201)
* cumulative/1 (multi_cumulative/[2,3] resource): Scheduling Constraints.
                                                              (line 153)
* cumulative/[1,2] (clpfd):              Scheduling Constraints.
                                                              (line  13)
* cumulatives/[2,3] (clpfd):             Scheduling Constraints.
                                                              (line  66)
* current (seek/4 method):               mpg-ref-seek.        (line  36)
* current frame:                         Debug Format.        (line  36)
* current frame <1>:                     Debug Commands.      (line  13)
* current input:                         ref-iou-str.         (line  15)
* current input stream:                  ref-iou-sfh-sob.     (line  37)
* current input streams:                 ref-iou-sfh-opn.     (line  33)
* current input streams <1>:             ref-iou-sfh-cis.     (line   9)
* current input streams <2>:             ref-iou-sfh-cos.     (line   8)
* current operators:                     ref-syn-ops-ops.     (line  16)
* current output:                        ref-iou-str.         (line  15)
* current output stream:                 ref-iou-sfh-sob.     (line  37)
* current output streams:                ref-iou-sfh-opn.     (line  33)
* current output streams <1>:            ref-iou-sfh-cis.     (line   9)
* current output streams <2>:            ref-iou-sfh-cos.     (line   8)
* current stream:                        ref-iou-sfh-bos.     (line   6)
* currently loaded modules:              ref-mod-mpc-cmo.     (line   6)
* currently loaded modules <1>:          ref-mod-ilm.         (line  11)
* current_atom/1 (built-in, ref page):   mpg-ref-current_atom.
                                                              (line   6)
* current_breakpoint/5 (built-in):       Built-in Predicates for Breakpoint Handling.
                                                              (line  71)
* current_breakpoint/5 (built-in) <1>:   Breakpoint Predicates.
                                                              (line  61)
* current_breakpoint/5 (built-in, ref page): mpg-ref-current_breakpoint.
                                                              (line   6)
* current_char_conversion/2 (built-in, ref page): mpg-ref-current_char_conversion.
                                                              (line   6)
* current_class/1 (objects):             obj-exp-current_class.
                                                              (line   6)
* current_directory/[1,2] (file_systems): lib-file_systems.   (line 305)
* current_host/1 (sockets):              lib-sockets.         (line 174)
* current_input/1 (built-in):            ref-iou-sfh-cis.     (line   9)
* current_input/1 (built-in, ref page):  mpg-ref-current_input.
                                                              (line   6)
* current_key/2 (built-in):              ref-mdb-idb.         (line  42)
* current_key/2 (built-in, ref page):    mpg-ref-current_key. (line   6)
* current_module/[1,2] (built-in):       ref-mod-ilm.         (line  15)
* current_module/[1,2] (built-in, ref page): mpg-ref-current_module.
                                                              (line   6)
* current_op/3 (built-in):               ref-syn-ops-ops.     (line  16)
* current_op/3 (built-in, ref page):     mpg-ref-current_op.  (line   6)
* current_output/1 (built-in):           ref-iou-sfh-cos.     (line   8)
* current_output/1 (built-in, ref page): mpg-ref-current_output.
                                                              (line   6)
* current_predicate/2 (built-in):        ref-mod-ilm-def.     (line  11)
* current_predicate/[1,2] (built-in, ref page): mpg-ref-current_predicate.
                                                              (line   6)
* current_prolog_flag/2 (built-in, ref page): mpg-ref-current_prolog_flag.
                                                              (line   6)
* current_stream/3 (built-in):           ref-iou-sfh-bos.     (line   6)
* current_stream/3 (built-in, ref page): mpg-ref-current_stream.
                                                              (line   6)
* cursor (definition):                   Glossary.            (line 200)
* customize-group (emacs command):       Customizing Emacs.   (line   6)
* customize-variable (emacs command):    Customizing Emacs.   (line   6)
* cut:                                   Cut Overview.        (line  10)
* cut (definition):                      Glossary.            (line 205)
* cut and generate-and-test:             Terminating a Backtracking Loop.
                                                              (line   6)
* cut on SPQuery:                        Jasper Package Class Reference.
                                                              (line 151)
* cut, green:                            ref-sem-ctr-cut.     (line  54)
* cut, local:                            ref-sem-ctr-ite.     (line  39)
* cut, placement of:                     Placement of Cuts.   (line   6)
* cut, red:                              ref-sem-ctr-cut.     (line  54)
* cut, soft:                             ref-sem-ctr-ite.     (line  48)
* cycles/1 (read_term/[2,3] option):     mpg-ref-read_term.   (line  58)
* cycles/1 (write_term/[2,3] option):    mpg-ref-write_term.  (line  81)
* cyclic list:                           Glossary.            (line 473)
* cyclic term:                           mpg-ref-read_term.   (line  58)
* cyclic term <1>:                       mpg-ref-write_term.  (line  81)
* cyclic terms:                          ref-sem-occ.         (line   6)
* cyclic_term/1 (terms):                 lib-terms.           (line 197)
* data areas, used by Prolog:            ref-mgc.             (line  16)
* data resource:                         too-spld.            (line 206)
* data tables:                           Data Tables.         (line   6)
* data type:                             ref-syn-trm-ove.     (line   6)
* data types, foreign:                   lib-structs.         (line  19)
* database:                              ref-sls.             (line  12)
* database <1>:                          BDB Basics.          (line  12)
* database (definition):                 Glossary.            (line 211)
* database modification:                 ref-mdb.             (line  19)
* database reference:                    ref-mdb-dre.         (line   6)
* database references to clauses:        ref-mdb-dre.         (line   6)
* database, internal:                    ref-mdb-idb.         (line   6)
* database, loading:                     ref-sls-ove.         (line   6)
* database, predicates for:              ref-mdb-sum.         (line   6)
* database, predicates for <1>:          mpg-top-dat.         (line   6)
* database, saving:                      ref-sls-ove.         (line   6)
* data_file/1 (zinc option):             MiniZinc Exported Predicates.
                                                              (line  11)
* datime/[1,2] (system):                 lib-system.          (line  16)
* db-spec:                               The DB-Spec Informal Description.
                                                              (line   6)
* db_close/1 (bdb):                      The Predicates.      (line  66)
* db_close_env/1 (bdb):                  The Predicates.      (line  23)
* db_compress/[2,3] (bdb):               The Predicates.      (line 126)
* db_current/5 (bdb):                    The Predicates.      (line  70)
* db_current_env/2 (bdb):                The Predicates.      (line  27)
* db_current_iterator/3 (bdb):           The Predicates.      (line 171)
* db_enumerate/3 (bdb):                  The Predicates.      (line 107)
* db_erase/[2,3] (bdb):                  The Predicates.      (line  98)
* db_export/[2,3] (bdb):                 The Predicates.      (line 178)
* db_fetch/3 (bdb):                      The Predicates.      (line  81)
* db_findall/3 (bdb):                    The Predicates.      (line 117)
* db_import/[2,3] (bdb):                 The Predicates.      (line 189)
* db_iterator_done/1 (bdb):              The Predicates.      (line 168)
* db_iterator_next/3 (bdb):              The Predicates.      (line 163)
* db_make_iterator/[2,3] (bdb):          The Predicates.      (line 153)
* db_open/[4,5] (bdb):                   The Predicates.      (line  33)
* db_open_env/[2,3] (bdb):               The Predicates.      (line   9)
* db_reference (definition):             Glossary.            (line 217)
* db_reference/1 (built-in, ref page):   mpg-ref-db_reference.
                                                              (line   6)
* db_store/3 (bdb):                      The Predicates.      (line  76)
* db_sync/1 (bdb):                       The Predicates.      (line 148)
* DCG:                                   ref-gru-dcg.         (line   6)
* dcg, grammar rule expansion:           mpg-ref-term_expansion.
                                                              (line  60)
* dcgc_count (statistics key):           ref-mgc-ove-sta.     (line 247)
* dcgc_time (statistics key):            ref-mgc-ove-sta.     (line 250)
* debug (CHR option):                    CHR Semantics.       (line 100)
* debug (debugging flag value):          ref-lps-flg.         (line  70)
* debug (debugging flag value) <1>:      mpg-ref-debugging.   (line  21)
* debug (definition):                    Glossary.            (line 221)
* debug (FD flag):                       The Global Constraint Programming Interface.
                                                              (line 152)
* debug (prolog flag):                   ref-lps-flg.         (line  79)
* debug (prolog flag) <1>:               Runtime Systems.     (line  19)
* debug commands:                        Debug Commands.      (line   6)
* debug/0 (built-in):                    Basic Debug.         (line  11)
* debug/0 (built-in, ref page):          mpg-ref-debug.       (line   6)
* debug/0 (debugger mode control):       Action Variables.    (line 122)
* debugcode (compiling flag value):      ref-lod-ove.         (line  35)
* debugcode (compiling flag value) <1>:  ref-lps-flg.         (line  59)
* debugcode (definition):                Glossary.            (line 226)
* debugger action variables:             Breakpoint Actions.  (line   6)
* debugger action variables <1>:         Action Variables.    (line   6)
* debugger breakpoint:                   Advanced Debugging.  (line   6)
* debugger port:                         Port Tests.          (line  11)
* debugger, port:                        Procedure Box.       (line  34)
* debugger-ancestor:                     Goal Tests.          (line  46)
* debugger-parent:                       Goal Tests.          (line  46)
* debugger/0 (debugger condition):       Advice-points.       (line  24)
* debugger/0 (debugger condition) <1>:   Other Tests.         (line  13)
* debugger/0 (map method):               Default Map Methods. (line  26)
* debugger_command_hook/2 (hook, ref page): mpg-ref-debugger_command_hook.
                                                              (line   6)
* debugger_command_hook/2 (user, hook):  Hooks Related to Breakpoints.
                                                              (line  73)
* debugger_command_hook/2 (user, hook) <1>: Breakpoint Predicates.
                                                              (line 117)
* debugger_print_options (prolog flag):  ref-lps-flg.         (line 140)
* debugger_print_options (prolog flag) <1>: Debug Intro.      (line  41)
* debugger_print_options (prolog flag) <2>: Debug Commands.   (line 353)
* debugger_print_options (prolog flag) <3>: Breakpoint Actions.
                                                              (line  17)
* debugger_print_options (prolog flag) <4>: Action Variables. (line  17)
* debugger_print_options (prolog flag) <5>: Runtime Systems.  (line  19)
* debugger_print_options (prolog flag) <6>: mpg-ref-portray.  (line  48)
* debugger_print_options (prolog flag) <7>: mpg-ref-write_term.
                                                              (line 119)
* debugging:                             Debug Intro.         (line   6)
* debugging (debugger command):          Debug Commands.      (line 259)
* debugging (prolog flag):               ref-lps-flg.         (line  62)
* debugging (prolog flag) <1>:           Runtime Systems.     (line  19)
* debugging messages:                    Debug Format.        (line   6)
* debugging modules:                     ref-mod-cim.         (line   6)
* debugging predicates:                  Basic Debug.         (line   6)
* debugging, predicates for:             Debug Summary.       (line   6)
* debugging, predicates for <1>:         mpg-top-deb.         (line   6)
* debugging/0 (built-in):                Undefined Predicates.
                                                              (line  27)
* debugging/0 (built-in) <1>:            Basic Debug.         (line 103)
* debugging/0 (built-in, ref page):      mpg-ref-debugging.   (line   6)
* debug_message/0 (objects):             obj-exp-debug_message.
                                                              (line   6)
* dec10 (syntax_errors flag value):      ref-lps-flg.         (line 338)
* dec10 (syntax_errors flag value) <1>:  ref-ere-err-syn.     (line  40)
* declaration (definition):              Glossary.            (line 230)
* declaration (predicate annotation):    mpg-ref-cat.         (line  30)
* declaration, attribute:                lib-atts.            (line  21)
* declaration, block:                    Block Declarations.  (line   6)
* declaration, discontiguous:            Discontiguous Declarations.
                                                              (line   6)
* declaration, dynamic:                  Dynamic Declarations.
                                                              (line   6)
* declaration, include:                  Include Declarations.
                                                              (line   6)
* declaration, meta-predicate:           Meta-Predicate Declarations.
                                                              (line   6)
* declaration, meta_predicate:           ref-mod-met.         (line   6)
* declaration, mode:                     Mode Declarations.   (line   6)
* declaration, module:                   Module Declarations. (line   6)
* declaration, module <1>:               ref-mod-lod.         (line  34)
* declaration, multifile:                Multifile Declarations.
                                                              (line   6)
* declaration, operator:                 ref-lod-dcl.         (line  17)
* declaration, predicate:                ref-lod-dcl.         (line   6)
* declaration, public:                   Public Declarations. (line   6)
* declaration, volatile:                 Volatile Declarations.
                                                              (line   6)
* declarations, mode:                    ref-mod-met.         (line 101)
* declarative semantics:                 ref-sem-sec.         (line   6)
* declaring nondeterminacy:              Declaring Nondeterminacy.
                                                              (line   6)
* declaring operators:                   ref-syn-ops-ops.     (line   6)
* decreasing_prefix/[3,4] (lists):       lib-lists.           (line 766)
* default (open/4 if_exists value):      mpg-ref-open.        (line 204)
* default (table/3 method/1 value):      Extensional Constraints.
                                                              (line  62)
* define_method/3 (objects):             obj-exp-define_method.
                                                              (line   6)
* definite clause grammars:              ref-gru-dcg.         (line   6)
* definition, procedure:                 ref-sem-sec.         (line  93)
* defragmentation (statistics key):      ref-mgc-ove-sta.     (line 159)
* defrag_count (statistics key):         ref-mgc-ove-sta.     (line 235)
* defrag_time (statistics key):          ref-mgc-ove-sta.     (line 238)
* deinit function:                       Conversion Declarations.
                                                              (line  10)
* deinit function (definition):          Glossary.            (line 234)
* delete (delete_directory/2 if_nonempty option value): lib-file_systems.
                                                              (line  85)
* delete/[3,4] (lists):                  lib-lists.           (line  46)
* delete_directory/[1,2] (file_systems): lib-file_systems.    (line  73)
* delete_file/1 (file_systems):          lib-file_systems.    (line  69)
* del_edges/3 (ugraphs):                 lib-ugraphs.         (line  68)
* del_edges/3 (wgraphs):                 lib-wgraphs.         (line  85)
* del_element/3 (sets):                  lib-sets.            (line  18)
* del_vertices/3 (ugraphs):              lib-ugraphs.         (line  60)
* del_vertices/3 (wgraphs):              lib-wgraphs.         (line  77)
* deprecated (predicate annotation):     mpg-ref-cat.         (line  42)
* depth/1 (debugger condition):          Breakpoint Tests.    (line 120)
* depth/1 (debugger condition) <1>:      Goal Tests.          (line  13)
* depth_bound/2 (terms):                 lib-terms.           (line 252)
* descendant_of/2 (objects):             obj-exp-descendant_of.
                                                              (line   6)
* destroy/1 (objects):                   obj-exp-destroy.     (line   6)
* destructive assignment:                ref-lte-mut.         (line   6)
* determinacy checker:                   The Determinacy Checker.
                                                              (line   6)
* determinacy detection, last clause:    Last Clause Determinacy Detection.
                                                              (line   6)
* determinacy detection, via indexing:   Determinacy Detection.
                                                              (line   6)
* determinate (definition):              Glossary.            (line 238)
* development (predicate annotation):    mpg-ref-cat.         (line  35)
* development system:                    Development and Runtime Systems.
                                                              (line   6)
* development system (definition):       Glossary.            (line 241)
* dialect (prolog flag):                 ref-lod-cnd.         (line  81)
* dialect (prolog flag) <1>:             ref-lps-flg.         (line 146)
* dif/2 (built-in):                      ref-lte-met-usu.     (line  35)
* dif/2 (built-in, ref page):            mpg-ref-dif.         (line   6)
* direction/1 (close/2 option):          mpg-ref-close.       (line  35)
* directive:                             Start.               (line  44)
* directive <1>:                         Queries and Directives.
                                                              (line   6)
* directive <2>:                         ref-sem-pro.         (line  20)
* directive <3>:                         ref-sem-pro.         (line  53)
* directive (definition):                Glossary.            (line 247)
* directives, in files being compiled:   ref-lod-lod.         (line 126)
* directories:                           lib-file_systems.    (line   6)
* directory (absolute_file_name/3 file type): mpg-ref-absolute_file_name.
                                                              (line  87)
* directory (load context key):          ref-lps-lco.         (line  21)
* directory specification:               ref-fdi-fsp.         (line  66)
* directory_exists/1 (file_systems):     lib-file_systems.    (line  90)
* directory_exists/2 (file_systems):     lib-file_systems.    (line  90)
* directory_members_of_directory/[1,2,3] (file_systems): lib-file_systems.
                                                              (line 152)
* directory_member_of_directory/2 (file_systems): lib-file_systems.
                                                              (line 129)
* directory_member_of_directory/3 (file_systems): lib-file_systems.
                                                              (line 136)
* directory_member_of_directory/4 (file_systems): lib-file_systems.
                                                              (line 144)
* directory_must_exist/1 (file_systems): lib-file_systems.    (line 118)
* directory_must_exist/2 (file_systems): lib-file_systems.    (line 118)
* directory_property/[2,3] (file_systems): lib-file_systems.  (line 209)
* direct_message/4 (objects):            obj-exp-direct_message.
                                                              (line   6)
* disable this (debugger command):       Debug Commands.      (line 290)
* disable_breakpoints/1 (built-in):      Breakpoint Predicates.
                                                              (line  78)
* disable_breakpoints/1 (built-in, ref page): mpg-ref-disable_breakpoints.
                                                              (line   6)
* discontiguous declaration:             Discontiguous Declarations.
                                                              (line   6)
* discontiguous/1 (built-in, ref page):  mpg-ref-discontiguous.
                                                              (line   6)
* discontiguous/1 (declaration):         Discontiguous Declarations.
                                                              (line   6)
* discontiguous_warnings (prolog flag):  ref-lod-lod.         (line  89)
* discontiguous_warnings (prolog flag) <1>: Discontiguous Declarations.
                                                              (line  13)
* discontiguous_warnings (prolog flag) <2>: ref-lps-flg.      (line 152)
* discontiguous_warnings (prolog flag) <3>: Runtime Systems.  (line  30)
* discrepancy/1 (labeling/2 option):     Enumeration Predicates.
                                                              (line 242)
* disjoint/2 (sets):                     lib-sets.            (line  28)
* disjoint1/[1,2] (clpfd):               Placement Constraints.
                                                              (line   9)
* disjoint2/[1,2] (clpfd):               Placement Constraints.
                                                              (line  46)
* disjoint_union/3 (sets):               lib-sets.            (line 145)
* disjunction:                           ref-sem-ctr-dis.     (line   6)
* disjunction <1>:                       Conditionals and Disjunction.
                                                              (line   6)
* disjunction (definition):              Glossary.            (line 252)
* disjunctive/1 (geost/[2,3,4] option):  Placement Constraints.
                                                              (line 205)
* dispatch_global/4 (clpfd):             The Global Constraint Programming Interface.
                                                              (line  23)
* display (debugger command):            Debug Commands.      (line 180)
* display/0 (debugger show control):     Action Variables.    (line  21)
* display/1 (built-in):                  ref-iou-tou-dsp.     (line   6)
* display/1 (built-in, ref page):        mpg-ref-display.     (line   6)
* display/1 (tk_new/2 option):           Basic Functions.     (line  46)
* displaying statistics:                 ref-mgc-ove-sta.     (line   6)
* dispose/1 (structs):                   str-cdf.             (line   6)
* distinctions among write predicates:   ref-iou-tou-dis.     (line   6)
* div /2, integer floored division (evaluable): ref-ari-aex.  (line  69)
* do-loop:                               ref-sem-ctr-dol.     (line   6)
* do-loop (definition):                  Glossary.            (line 256)
* do/2 (built-in, ref page):             mpg-ref-do.          (line   6)
* do/2, do-loop:                         ref-sem-ctr-dol.     (line   6)
* dom (all_different/2 on/1 value):      Arithmetic-Logical Constraints.
                                                              (line 150)
* dom (all_distinct/2 on/1 value):       Arithmetic-Logical Constraints.
                                                              (line 150)
* dom (global_cardinality/3 on/1 value): Arithmetic-Logical Constraints.
                                                              (line  82)
* dom/1 (fd_global/[3,4] option):        The Global Constraint Programming Interface.
                                                              (line  91)
* domain (all_different/2 consistency/1 value): Arithmetic-Logical Constraints.
                                                              (line 131)
* domain (all_distinct/2 consistency/1 value): Arithmetic-Logical Constraints.
                                                              (line 131)
* domain (global_cardinality/3 consistency/1 value): Arithmetic-Logical Constraints.
                                                              (line  69)
* domain (scalar_product/5 consistency/1 value): Arithmetic Constraints.
                                                              (line  64)
* domain errors:                         ref-ere-err-dom.     (line   6)
* domain variable:                       CLPFD Interface.     (line  16)
* domain, finite:                        CLPFD Interface.     (line  16)
* domain-consistent:                     Definitions.         (line  19)
* domain-disentailed:                    Definitions.         (line  23)
* domain-entailed:                       Definitions.         (line  23)
* domain/3 (clpfd):                      Membership Constraints.
                                                              (line   8)
* domain_error/[2,4] (error class):      ref-ere-err.         (line 132)
* double_quotes (prolog flag):           Glossary.            (line 830)
* double_quotes (prolog flag) <1>:       ref-syn-cpt-sli.     (line  20)
* double_quotes (prolog flag) <2>:       ref-lps-flg.         (line 103)
* down (labeling/2 option):              Enumeration Predicates.
                                                              (line 178)
* dpgc_count (statistics key):           ref-mgc-ove-sta.     (line 241)
* dpgc_time (statistics key):            ref-mgc-ove-sta.     (line 244)
* dump/3 (clpqr):                        CLPQR Solver Predicates.
                                                              (line 187)
* dynamic (predicate property):          mpg-ref-predicate_property.
                                                              (line  34)
* dynamic code, indexing of:             ref-mdb-dsp.         (line  82)
* dynamic code, semantics of:            ref-mdb-bas.         (line  30)
* dynamic creation of modules:           ref-mod-dmo.         (line   6)
* dynamic declaration:                   Dynamic Declarations.
                                                              (line   6)
* dynamic predicate (definition):        Glossary.            (line 260)
* dynamic predicates, importing:         ref-mod-idp.         (line   6)
* dynamic resource:                      Foreign Resources.   (line  33)
* dynamic, procedures and declarations:  ref-mdb-dsp.         (line   6)
* dynamic/0 (predicate property):        ref-lps-app.         (line  23)
* dynamic/1 (built-in, ref page):        mpg-ref-dynamic.     (line   6)
* dynamic/1 (declaration):               Dynamic Declarations.
                                                              (line   6)
* dynamic_programming/1 (geost/[2,3,4] option): Placement Constraints.
                                                              (line 256)
* Eclipse:                               SPIDER.              (line   6)
* edges/2 (ugraphs):                     lib-ugraphs.         (line  44)
* edges/2 (wgraphs):                     lib-wgraphs.         (line  34)
* efficiency and specifying streams:     ref-iou-str-not.     (line   6)
* efficiency, increasing:                Writing Efficient Programs.
                                                              (line   6)
* element/3 (clpfd):                     Extensional Constraints.
                                                              (line   8)
* elif/1 (conditional directive):        ref-lod-cnd.         (line   6)
* else/0 (conditional directive):        ref-lod-cnd.         (line   6)
* Emacs initialization file .emacs:      Quick-Start.         (line  12)
* emacs interface:                       Emacs Interface.     (line   6)
* empty list (definition):               Glossary.            (line 473)
* empty_assoc/1 (assoc):                 lib-assoc.           (line  15)
* empty_avl/1 (avl):                     lib-avl.             (line  15)
* empty_bag/1 (bags):                    lib-bags.            (line 112)
* empty_fdset/1 (clpfd):                 FD Set Operations.   (line  18)
* empty_interval/2 (clpfd):              FD Set Operations.   (line  33)
* empty_queue/1 (queues):                lib-queues.          (line  23)
* enable this (debugger command):        Debug Commands.      (line 297)
* enable_breakpoints/1 (built-in):       Breakpoint Predicates.
                                                              (line  78)
* enable_breakpoints/1 (built-in, ref page): mpg-ref-enable_breakpoints.
                                                              (line   6)
* enabling and disabling garbage collection: ref-mgc-egc.     (line   6)
* encoded string:                        CPL Notes.           (line  44)
* encoded string (definition):           Glossary.            (line 266)
* encoding:                              ref-iou-sfh-enc.     (line  17)
* encoding, UTF-8:                       CPL Notes.           (line  44)
* encoding/1 (open/4 option):            mpg-ref-open.        (line  81)
* encoding/1 (stream property):          mpg-ref-stream_property.
                                                              (line  85)
* encoding_signature/1 (open/4 option):  mpg-ref-open.        (line  90)
* encoding_signature/1 (stream property): mpg-ref-stream_property.
                                                              (line  98)
* end of line:                           mpg-ref-at_end_of_line.
                                                              (line  31)
* end of stream:                         mpg-ref-at_end_of_stream.
                                                              (line  14)
* end-of-file on character input:        ref-iou-cin.         (line  14)
* end-of-file, characters:               mpg-ref-break.       (line  27)
* endif/0 (conditional directive):       ref-lod-cnd.         (line   6)
* end_class/[0,1] (objects):             obj-exp-end_class.   (line   6)
* end_of_file:                           ref-iou-tin-trm.     (line  41)
* end_of_file atom:                      mpg-ref-read.        (line  50)
* end_of_stream/1 (stream property):     mpg-ref-stream_property.
                                                              (line  59)
* end_tests/1 (plunit declaration):      PlUnit A Unit Test Box.
                                                              (line  13)
* ensure_loaded/1 (built-in):            ref-mod-lod.         (line   6)
* ensure_loaded/1 (built-in, ref page):  mpg-ref-ensure_loaded.
                                                              (line   6)
* entailed/1 (clpqr):                    CLPQR Solver Predicates.
                                                              (line  72)
* entailments (fd_statistics/2 option):  Statistics Predicates.
                                                              (line  26)
* Enter (Tk event type):                 Event Handling.      (line  43)
* entry (Tk widget):                     Types of Widget.     (line  20)
* enum (labeling/2 option):              Enumeration Predicates.
                                                              (line 130)
* enumerating solutions to a goal:       ref-all-cse.         (line  10)
* enumerating solutions to a goal <1>:   ref-all-cba.         (line  10)
* enumerating solutions to a goal <2>:   ref-all-cba-cal.     (line   6)
* environ/[2,3] (system):                lib-system.          (line  29)
* environment:                           The Environment.     (line   6)
* environment variables:                 System Properties and Environment Variables.
                                                              (line   6)
* environment/1 (db_open/5 option):      The Predicates.      (line  51)
* eof (seek/4 method):                   mpg-ref-seek.        (line  39)
* eof (Tcl command):                     Commands.            (line 633)
* EOF character:                         Keyboard Characters. (line  13)
* eof_action/1 (open/4 option):          mpg-ref-open.        (line  64)
* eof_action/1 (stream property):        mpg-ref-stream_property.
                                                              (line  68)
* eof_code (open/4 eof_action value):    mpg-ref-open.        (line  73)
* eol/1 (open/4 option):                 mpg-ref-open.        (line 157)
* eol/1 (stream property):               mpg-ref-stream_property.
                                                              (line  94)
* Epoch:                                 lib-file_systems.    (line 232)
* equality of floats:                    ref-ari-acm.         (line   6)
* equality, arithmetic:                  ref-ari-acm.         (line  19)
* equality, unification:                 ref-lte-met-usu.     (line  10)
* erase/1 (built-in):                    ref-mdb-rcd.         (line  19)
* erase/1 (built-in, ref page):          mpg-ref-erase.       (line   6)
* error (absolute_file_name/3 fileerrors value): ref-ere-err-exi.
                                                              (line  39)
* error (absolute_file_name/3 fileerrors): mpg-ref-absolute_file_name.
                                                              (line 190)
* error (delete_directory/2 if_nonempty option value): lib-file_systems.
                                                              (line  83)
* error (open/4 eof_action value):       mpg-ref-open.        (line  70)
* error (open/4 if_exists value):        mpg-ref-open.        (line 208)
* error (overflow FD flag value):        The Global Constraint Programming Interface.
                                                              (line 146)
* error (syntax_errors flag value):      ref-lps-flg.         (line 341)
* error (syntax_errors flag value) <1>:  ref-ere-err-syn.     (line  51)
* error (unknown flag value):            ref-lps-flg.         (line 384)
* error (unknown flag value) <1>:        ref-ere-hex-hup.     (line  34)
* error classes:                         ref-ere-err.         (line  22)
* error handling:                        Exceptions Debug.    (line   6)
* error term:                            ref-ere-rex.         (line   6)
* error, syntax:                         Syntax Errors.       (line   6)
* error/1 (plunit option):               PlUnit A Unit Test Box.
                                                              (line 168)
* error/2 (plunit option):               PlUnit A Unit Test Box.
                                                              (line 168)
* errors:                                ref-ere.             (line  16)
* errors, arithmetics:                   ref-ari-exc.         (line   9)
* errors, calls:                         ref-sem-exc.         (line   9)
* errors, consistency:                   ref-ere-err-cns.     (line   6)
* errors, context:                       ref-ere-err-con.     (line   6)
* errors, domain:                        ref-ere-err-dom.     (line   6)
* errors, evaluation:                    ref-ere-err-eva.     (line   6)
* errors, existence:                     ref-ere-err-exi.     (line   6)
* errors, instantiation:                 ref-ere-err-ins.     (line   6)
* errors, permission:                    ref-ere-err-per.     (line   6)
* errors, representation:                ref-ere-err-rep.     (line   6)
* errors, resource:                      ref-ere-err-res.     (line   6)
* errors, streams:                       ref-iou-sfh-est.     (line   9)
* errors, syntax:                        ref-ere-err-syn.     (line   6)
* errors, system:                        ref-ere-err-sys.     (line   6)
* errors, type:                          ref-ere-err-typ.     (line   6)
* errors, uninstantiation:               ref-ere-err-uns.     (line   6)
* error_exception/1 (hook, ref page):    mpg-ref-error_exception.
                                                              (line   6)
* error_exception/1 (user, hook):        ref-ere-hex.         (line  24)
* error_exception/1 (user, hook) <1>:    Exceptions Debug.    (line  16)
* escape sequence:                       ref-syn-syn-esc.     (line   6)
* escape sequence (definition):          Glossary.            (line 270)
* escaping, character:                   ref-syn-ces.         (line   6)
* eval (Tcl command):                    Commands.            (line 351)
* evaluating arithmetic expressions:     ref-ari-eae.         (line   6)
* evaluation errors:                     ref-ere-err-eva.     (line   6)
* evaluation_error/[2,4] (error class):  ref-ere-err.         (line 159)
* event, constraint:                     FDBG Events.         (line  10)
* event, FDBG:                           FDBG Events.         (line   6)
* event, labeling:                       FDBG Events.         (line  13)
* exception (leashing mode):             Basic Debug.         (line  71)
* exception handling:                    Exceptions Debug.    (line   6)
* exception handling in C:               Exception Handling in C.
                                                              (line   6)
* exception term:                        ref-ere-rex.         (line   6)
* exception term <1>:                    Exception Handling in C.
                                                              (line   6)
* exception/1 (debugger port value):     Port Tests.          (line  13)
* exception/1 (plunit option):           PlUnit A Unit Test Box.
                                                              (line 161)
* exceptions:                            ref-ere.             (line  17)
* exceptions, arithmetic:                ref-ari-exc.         (line   9)
* Exceptions, C functions for:           cpg-top-exc.         (line   6)
* exceptions, calls:                     ref-sem-exc.         (line   9)
* exceptions, global handler:            ref-ere-hex-hup.     (line   6)
* exceptions, module name expansion:     mpg-ref-cat.         (line  61)
* exceptions, streams:                   ref-iou-sfh-est.     (line   9)
* exclude/[3,4,5] (lists):               lib-lists.           (line 583)
* executable (absolute_file_name/3 access): mpg-ref-absolute_file_name.
                                                              (line 144)
* executable (absolute_file_name/3 file type): mpg-ref-absolute_file_name.
                                                              (line  83)
* executable, console-based (definition): Glossary.           (line 173)
* executable, stand-alone:               Stand-Alone Executables.
                                                              (line   6)
* executable, stand-alone (definition):  Glossary.            (line 778)
* executable, windowed (definition):     Glossary.            (line 915)
* execute (absolute_file_name/3 access): mpg-ref-absolute_file_name.
                                                              (line 144)
* execution:                             Execution.           (line   6)
* execution profiling:                   Execution Profiling. (line   6)
* execution state, predicates for:       ref-ere-sum.         (line   6)
* execution state, predicates for <1>:   mpg-top-est.         (line   6)
* execution, nested:                     Nested.              (line   6)
* execution_state/[1,2] (built-in):      Built-in Predicates for Breakpoint Handling.
                                                              (line  17)
* execution_state/[1,2] (built-in) <1>:  Accessing Past Debugger States.
                                                              (line  21)
* execution_state/[1,2] (built-in) <2>:  Breakpoint Predicates.
                                                              (line  86)
* execution_state/[1,2] (built-in, ref page): mpg-ref-execution_state.
                                                              (line   6)
* exist (absolute_file_name/3 access):   mpg-ref-absolute_file_name.
                                                              (line 140)
* existence errors:                      ref-ere-err-exi.     (line   6)
* existence_error/[2,5] (error class):   ref-ere-err.         (line 138)
* existential quantifier:                ref-all-cse-equ.     (line   6)
* existential quantifier <1>:            mpg-ref-exists.      (line   6)
* exit (CHR port):                       CHR Ports.           (line  12)
* exit (leashing mode):                  Basic Debug.         (line  62)
* exit/0 (clpfd:dispatch_global/4 request): The Global Constraint Programming Interface.
                                                              (line  53)
* exit/1 (debugger port value):          Port Tests.          (line  13)
* exited/1 (debugger condition):         Accessing Past Debugger States.
                                                              (line  81)
* exited/1 (debugger condition) <1>:     Goal Tests.          (line  32)
* exiting:                               Exiting.             (line   6)
* exp /1, exponent (evaluable):          ref-ari-aex.         (line 282)
* exp /2, float power (evaluable):       ref-ari-aex.         (line 291)
* expand_term/2 (built-in):              ref-lod-exp.         (line  63)
* expand_term/2 (built-in, ref page):    mpg-ref-expand_term. (line   6)
* expansion, macro:                      mpg-ref-goal_expansion.
                                                              (line  42)
* expansion, module name:                Mode Spec.           (line  11)
* expansion, module name <1>:            Meta-Predicate Declarations.
                                                              (line  16)
* expansion, module name (definition):   Glossary.            (line 526)
* explicit unification:                  ref-lte-met-usu.     (line  10)
* export (definition):                   Glossary.            (line 274)
* exported (predicate property):         mpg-ref-predicate_property.
                                                              (line  51)
* exported/0 (predicate property):       ref-lps-app.         (line  41)
* exporting predicates from a module:    ref-mod-def.         (line   6)
* expr (argument type):                  mpg-ref-aty-ety.     (line  41)
* expr (Tcl command):                    Commands.            (line  63)
* expression, arithmetic:                ref-ari-aex.         (line   6)
* extended runtime system (definition):  Glossary.            (line 277)
* extended_characters/1 (xml_parse/3 option): lib-xml.        (line  83)
* extendible (predicate annotation):     mpg-ref-cat.         (line  24)
* extendible predicate (definition):     Glossary.            (line 373)
* extendible predicates (definition):    ref-sem-typ-rpr.     (line   6)
* extensions/1 (absolute_file_name/3 option): mpg-ref-absolute_file_name.
                                                              (line  36)
* fact (definition):                     Glossary.            (line 283)
* fail (absolute_file_name/3 fileerrors value): ref-ere-err-exi.
                                                              (line  43)
* fail (absolute_file_name/3 fileerrors): mpg-ref-absolute_file_name.
                                                              (line 197)
* fail (CHR debug command):              CHR Tracing.         (line  47)
* fail (CHR port):                       CHR Ports.           (line  17)
* fail (debugger command):               Debug Commands.      (line 144)
* fail (delete_directory/2 if_nonempty option value): lib-file_systems.
                                                              (line  81)
* fail (leashing mode):                  Basic Debug.         (line  68)
* fail (overflow FD flag value):         The Global Constraint Programming Interface.
                                                              (line 149)
* fail (syntax_errors flag value):       ref-lps-flg.         (line 344)
* fail (syntax_errors flag value) <1>:   ref-ere-err-syn.     (line  46)
* fail (unknown flag value):             ref-lps-flg.         (line 392)
* fail (unknown flag value) <1>:         ref-ere-hex-hup.     (line  42)
* fail/0 (built-in, ref page):           mpg-ref-fail.        (line   6)
* fail/0 (clpfd:dispatch_global/4 request): The Global Constraint Programming Interface.
                                                              (line  56)
* fail/0 (debugger port value):          Port Tests.          (line  13)
* fail/1 (debugger command control):     Action Variables.    (line 101)
* fail/1 (plunit option):                PlUnit A Unit Test Box.
                                                              (line 156)
* false/0 (built-in, ref page):          mpg-ref-false.       (line   6)
* false/0 (debugger condition):          Other Tests.         (line  35)
* FD predicate:                          User-Defined Constraints.
                                                              (line  17)
* FD predicate <1>:                      FD Predicates.       (line   6)
* FD set:                                FD Set Operations.   (line   6)
* FDBG concepts:                         FDBG Concepts.       (line   6)
* FDBG event:                            FDBG Events.         (line   6)
* FDBG output stream:                    FDBG The fdbg_output Stream.
                                                              (line   6)
* fdbg_annotate/[3,4] (fdbg):            FDBG Writing Visualizers.
                                                              (line  69)
* fdbg_assign_name/2 (fdbg):             FDBG Naming Terms.   (line  10)
* fdbg_current_name/2 (fdbg):            FDBG Naming Terms.   (line  16)
* fdbg_get_name/2 (fdbg):                FDBG Naming Terms.   (line  20)
* fdbg_guard/3 (fdbg):                   FDBG Debugging Global Constraints.
                                                              (line  15)
* fdbg_labeling_step/2 (fdbg):           FDBG Annotation.     (line  25)
* fdbg_label_show/3 (fdbg):              FDBG Built-In Visualizers.
                                                              (line  35)
* fdbg_legend/[1,2] (fdbg):              FDBG Writing Visualizers.
                                                              (line  88)
* fdbg_off/0 (fdbg):                     FDBG Options.        (line  17)
* fdbg_on/[0,1] (fdbg):                  FDBG Options.        (line   8)
* fdbg_output:                           FDBG The fdbg_output Stream.
                                                              (line   6)
* fdbg_show/2 (fdbg):                    FDBG Built-In Visualizers.
                                                              (line  14)
* fdbg_start_labeling/1 (fdbg):          FDBG Annotation.     (line  21)
* fdbg_transform_actions/3 (fdbg):       FDBG Writing Legend Printers.
                                                              (line  15)
* fdset_add_element/3 (clpfd):           FD Set Operations.   (line  81)
* fdset_complement/2 (clpfd):            FD Set Operations.   (line 130)
* fdset_del_element/3 (clpfd):           FD Set Operations.   (line  85)
* fdset_disjoint/2 (clpfd):              FD Set Operations.   (line  89)
* fdset_eq/2 (clpfd):                    FD Set Operations.   (line 109)
* fdset_intersect/2 (clpfd):             FD Set Operations.   (line  93)
* fdset_intersection/[2,3] (clpfd):      FD Set Operations.   (line  97)
* fdset_interval/3 (clpfd):              FD Set Operations.   (line  37)
* fdset_max/2 (clpfd):                   FD Set Operations.   (line  50)
* fdset_member/2 (clpfd):                FD Set Operations.   (line 104)
* fdset_min/2 (clpfd):                   FD Set Operations.   (line  46)
* fdset_parts/4 (clpfd):                 FD Set Operations.   (line  22)
* fdset_singleton/2 (clpfd):             FD Set Operations.   (line  41)
* fdset_size/2 (clpfd):                  FD Set Operations.   (line  55)
* fdset_subset/2 (clpfd):                FD Set Operations.   (line 114)
* fdset_subtract/3 (clpfd):              FD Set Operations.   (line 118)
* fdset_to_list/2 (clpfd):               FD Set Operations.   (line  66)
* fdset_to_range/2 (clpfd):              FD Set Operations.   (line  76)
* fdset_union/[2,3] (clpfd):             FD Set Operations.   (line 123)
* fdvar_portray/3 (fdbg, hook):          FDBG Customizing Output.
                                                              (line   9)
* fd_batch/1 (clpfd):                    Posting Constraints. (line  31)
* fd_closure/2 (clpfd):                  Reflection Predicates.
                                                              (line  65)
* fd_constraint (predicate property):    mpg-ref-predicate_property.
                                                              (line  29)
* fd_constraint/0 (predicate property):  ref-lps-app.         (line  19)
* fd_degree/2 (clpfd):                   Reflection Predicates.
                                                              (line  47)
* fd_dom/2 (clpfd):                      Reflection Predicates.
                                                              (line  41)
* fd_flag/3 (clpfd):                     The Global Constraint Programming Interface.
                                                              (line 137)
* fd_global/[3,4] (clpfd):               The Global Constraint Programming Interface.
                                                              (line  83)
* fd_max/2 (clpfd):                      Reflection Predicates.
                                                              (line  23)
* fd_min/2 (clpfd):                      Reflection Predicates.
                                                              (line  17)
* fd_neighbors/2 (clpfd):                Reflection Predicates.
                                                              (line  60)
* fd_set/2 (clpfd):                      Reflection Predicates.
                                                              (line  35)
* fd_size/2 (clpfd):                     Reflection Predicates.
                                                              (line  29)
* fd_statistics/[0,2] (clpfd):           Statistics Predicates.
                                                              (line  11)
* fd_var/1 (clpfd):                      Reflection Predicates.
                                                              (line  12)
* fetch_slot/2 (objects):                obj-exp-fetch_slot.  (line   6)
* ff (labeling/2 option):                Enumeration Predicates.
                                                              (line  85)
* ffc (labeling/2 option):               Enumeration Predicates.
                                                              (line  97)
* file (load context key):               ref-lps-lco.         (line  16)
* File and Stream Handling, C functions for: cpg-top-fst.     (line   6)
* file and stream handling, predicates for: ref-iou-sum.      (line  80)
* file and stream handling, predicates for <1>: mpg-top-fsh.  (line   6)
* file specification:                    ref-fdi-fsp.         (line  66)
* file specification <1>:                ref-fdi-syn.         (line   6)
* file specification (definition):       Glossary.            (line 294)
* file, closing:                         ref-iou-sfh-cst.     (line   6)
* file, initialization:                  ref-fdi-fsp-ffs.     (line   6)
* file, PO (definition):                 Glossary.            (line 653)
* file/1 (debugger condition):           Breakpoint Tests.    (line 223)
* file/1 (debugger condition) <1>:       Source Tests.        (line  12)
* fileerrors (prolog flag):              ref-lod-lod.         (line  49)
* fileerrors (prolog flag) <1>:          ref-iou-sfh-sem.     (line   6)
* fileerrors (prolog flag) <2>:          ref-lps-flg.         (line 157)
* fileerrors (prolog flag) <3>:          ref-ere-err-exi.     (line  31)
* fileerrors (prolog flag) <4>:          ref-ere-err-per.     (line  37)
* fileerrors (prolog flag) <5>:          mpg-ref-absolute_file_name.
                                                              (line 187)
* fileerrors (prolog flag) <6>:          mpg-ref-absolute_file_name.
                                                              (line 367)
* fileerrors (prolog flag) <7>:          mpg-ref-restore.     (line  43)
* fileerrors (prolog flag) <8>:          mpg-ref-see.         (line  46)
* fileerrors (prolog flag) <9>:          mpg-ref-tell.        (line  48)
* fileerrors/1 (absolute_file_name/3 option): mpg-ref-absolute_file_name.
                                                              (line 186)
* fileerrors/1 (read_term/[2,3] option): ref-ere-err-exi.     (line  31)
* fileerrors/1 (read_term/[2,3] option) <1>: ref-ere-err-per. (line  37)
* filename manipulation, predicates for: ref-fdi-pre.         (line   8)
* filename manipulation, predicates for <1>: mpg-top-fnm.     (line   6)
* fileref/2 (source information descriptor): mpg-ref-goal_source_info.
                                                              (line  37)
* files:                                 lib-file_systems.    (line   6)
* files, appending to existing:          ref-iou-sfh-opn.     (line  18)
* files, creating new:                   ref-iou-sfh-opn.     (line  18)
* files, opening:                        ref-iou-sfh-opn.     (line   6)
* files, searching for in a library:     ref-fdi-fsp.         (line  12)
* file_errors/1 (absolute_file_name/3 option): mpg-ref-absolute_file_name.
                                                              (line 186)
* file_errors/1 (read_term/[2,3] option): ref-ere-err-exi.    (line  31)
* file_exists/1 (file_systems):          lib-file_systems.    (line 102)
* file_exists/2 (file_systems):          lib-file_systems.    (line 102)
* file_members_of_directory/[1,2,3] (file_systems): lib-file_systems.
                                                              (line 191)
* file_member_of_directory/[2,3,4] (file_systems): lib-file_systems.
                                                              (line 172)
* file_must_exist/1 (file_systems):      lib-file_systems.    (line 110)
* file_must_exist/2 (file_systems):      lib-file_systems.    (line 110)
* file_name/1 (stream property):         mpg-ref-stream_property.
                                                              (line  25)
* file_property/[2,3] (file_systems):    lib-file_systems.    (line 294)
* file_search_path/2 (hook, ref page):   mpg-ref-file_search_path.
                                                              (line   6)
* file_search_path/2 (user, hook):       ref-fdi-fsp-def.     (line   6)
* file_spec (argument type):             mpg-ref-aty-ety.     (line  40)
* file_type/1 (absolute_file_name/3 option): mpg-ref-absolute_file_name.
                                                              (line  53)
* find this (debugger command):          Debug Commands.      (line 301)
* findall/[3,4] (built-in):              ref-all-cba-cal.     (line   6)
* findall/[3,4] (built-in, ref page):    mpg-ref-findall.     (line   6)
* finding nondeterminacy:                The Determinacy Checker.
                                                              (line   6)
* find_chr_constraint/1 (chr):           CHR Debugging Predicates.
                                                              (line  56)
* finite domain:                         CLPFD Interface.     (line  16)
* first (absolute_file_name/3 solutions): mpg-ref-absolute_file_name.
                                                              (line 209)
* first_bound/2 (clpfd):                 Enumeration Predicates.
                                                              (line  28)
* first_bound/2 (clpfd) <1>:             Enumeration Predicates.
                                                              (line 156)
* first_fail (labeling/2 option):        Enumeration Predicates.
                                                              (line  86)
* fixall/2 (geost/[2,3,4] option):       Placement Constraints.
                                                              (line 297)
* fixme/1 (plunit option):               PlUnit A Unit Test Box.
                                                              (line  43)
* flit/0 (debugger command control):     Action Variables.    (line  38)
* flit/2 (debugger command control):     Action Variables.    (line  72)
* float (CHR type):                      CHR Constraint Declaration.
                                                              (line  56)
* float /1, coercion (evaluable):        ref-ari-aex.         (line 101)
* float/1 (built-in, ref page):          mpg-ref-float.       (line   6)
* floats, equality of:                   ref-ari-acm.         (line   6)
* floats, range of:                      ref-ari-ove.         (line  15)
* floats, syntax of:                     ref-syn-trm-flo.     (line   6)
* float_format/1 (write_term/[2,3] option): mpg-ref-write_term.
                                                              (line 101)
* float_fractional_part /1, fractional part (evaluable): ref-ari-aex.
                                                              (line  95)
* float_integer_part /1, coercion (evaluable): ref-ari-aex.   (line  91)
* floor /1, (evaluable):                 ref-ari-aex.         (line 191)
* floundered query (definition):         Glossary.            (line 299)
* floundering:                           ref-sem-sec.         (line 137)
* flushing output:                       ref-iou-sfh-flu.     (line   6)
* flush_output/1 (built-in):             ref-iou-sfh-flu.     (line   6)
* flush_output/[0,1] (built-in, ref page): mpg-ref-flush_output.
                                                              (line   6)
* for (Tcl command):                     Commands.            (line 270)
* for /3, (iterator):                    ref-sem-ctr-dol.     (line 203)
* for/3 (iterator):                      mpg-ref-do.          (line  56)
* forall/1 (plunit option):              PlUnit A Unit Test Box.
                                                              (line  63)
* forall/2 (aggregate):                  lib-aggregate.       (line 115)
* force/1 (abolish/2 option):            mpg-ref-abolish.     (line  31)
* force/1 (close/2 option):              mpg-ref-close.       (line  29)
* foreach (Tcl command):                 Commands.            (line 287)
* foreach /2, (iterator):                ref-sem-ctr-dol.     (line 182)
* foreach/2 (aggregate):                 lib-aggregate.       (line 121)
* foreach/2 (iterator):                  mpg-ref-do.          (line  35)
* foreacharg /2, (iterator):             ref-sem-ctr-dol.     (line 189)
* foreacharg /3, (iterator):             ref-sem-ctr-dol.     (line 196)
* foreacharg/2 (iterator):               mpg-ref-do.          (line  42)
* foreacharg/3 (iterator):               mpg-ref-do.          (line  42)
* foreign data types:                    lib-structs.         (line  19)
* Foreign Interface, C functions for:    cpg-top-fin.         (line   6)
* foreign interface, predicates for:     mpg-top-fin.         (line   6)
* foreign language interface:            Mixing C and Prolog. (line   6)
* foreign language interface <1>:        Calling C from Prolog.
                                                              (line   6)
* foreign predicate (definition):        Glossary.            (line 302)
* foreign resource:                      Foreign Resources.   (line   6)
* foreign resource (definition):         Glossary.            (line 307)
* foreign resource linker:               The Foreign Resource Linker.
                                                              (line   6)
* foreign resource, linked:              Foreign Resources.   (line   6)
* foreign resource, linked <1>:          Creating the Linked Foreign Resource.
                                                              (line   6)
* foreign resource, prelinked (definition): Glossary.         (line 606)
* foreign terms (definition):            lib-structs.         (line  27)
* foreign/[2,3] (hook, ref page):        mpg-ref-foreign.     (line   6)
* foreign/[2,3] (Module, hook):          Conversion Declarations.
                                                              (line  30)
* foreign_arg (argument type):           mpg-ref-aty-ety.     (line  33)
* foreign_resource (absolute_file_name/3 file type): mpg-ref-absolute_file_name.
                                                              (line  79)
* foreign_resource/2 (hook, ref page):   mpg-ref-foreign_resource.
                                                              (line   6)
* foreign_resource/2 (Module, hook):     Conversion Declarations.
                                                              (line  10)
* foreign_spec (argument type):          mpg-ref-aty-ety.     (line  32)
* foreign_type/2 (structs):              str-fty-dty.         (line   6)
* formal syntax:                         ref-syn-syn.         (line  16)
* format (Tcl command):                  Commands.            (line 375)
* format-command:                        Message Phases.      (line  14)
* format/1 (xml_parse/3 option):         lib-xml.             (line  80)
* format/[2,3] (built-in):               ref-iou-cou-fou.     (line   6)
* format/[2,3] (built-in, ref page):     mpg-ref-format.      (line   6)
* formatted printing:                    ref-iou-cou-fou.     (line   6)
* format_to_codes/[3,4] (codesio):       lib-codesio.         (line  15)
* forward-paragraph (emacs command):     Usage.               (line 100)
* fractile/3 (statistics):               lib-statistics.      (line 120)
* frame (Tk widget):                     Types of Widget.     (line  23)
* frame, current:                        Debug Format.        (line  36)
* frame, current <1>:                    Debug Commands.      (line  13)
* freeze/2 (built-in, ref page):         mpg-ref-freeze.      (line   6)
* free_of_term/2 (terms):                lib-terms.           (line 210)
* free_of_var/2 (terms):                 lib-terms.           (line 232)
* free_variables/4 (aggregate):          lib-aggregate.       (line 155)
* fromto /4, (iterator):                 ref-sem-ctr-dol.     (line 176)
* fromto/4 (iterator):                   mpg-ref-do.          (line  29)
* frozen/2 (built-in, ref page):         mpg-ref-frozen.      (line   6)
* full-stop:                             ref-sem-sec.         (line   6)
* full-stop, use of:                     ref-iou-tin-trm.     (line  23)
* full-stop, use of <1>:                 ref-iou-tou-cha.     (line   6)
* full-stop, use of <2>:                 mpg-ref-read.        (line  39)
* Fully Qualified Classname:             Jasper Library Predicates.
                                                              (line  86)
* full_answer/0 (clpfd):                 Answer Constraints.  (line  20)
* function prototype:                    Function Prototypes. (line   6)
* function, deinit:                      Conversion Declarations.
                                                              (line  10)
* function, deinit (definition):         Glossary.            (line 234)
* function, init:                        Conversion Declarations.
                                                              (line  10)
* function, init (definition):           Glossary.            (line 412)
* functions for C errors:                cpg-top-err.         (line   6)
* functor (definition):                  Glossary.            (line 310)
* functor, principal:                    ref-lte-act.         (line   6)
* functor, principal (definition):       ref-syn-cpt.         (line  11)
* functor/3 (built-in):                  ref-lte-act.         (line   6)
* functor/3 (built-in, ref page):        mpg-ref-functor.     (line   6)
* functors:                              ref-syn-cpt.         (line  11)
* functors, arithmetic:                  ref-ari-aex.         (line  21)
* fzn_dump/[2,3] (zinc):                 FlatZinc Exported Predicates.
                                                              (line 330)
* fzn_file/1 (zinc option):              MiniZinc Exported Predicates.
                                                              (line  46)
* fzn_identifier/3 (zinc):               FlatZinc Exported Predicates.
                                                              (line 150)
* fzn_load_file/2 (zinc):                FlatZinc Exported Predicates.
                                                              (line  36)
* fzn_load_stream/2 (zinc):              FlatZinc Exported Predicates.
                                                              (line  28)
* fzn_objective/2 (zinc):                FlatZinc Exported Predicates.
                                                              (line 178)
* fzn_output/1 (zinc):                   FlatZinc Exported Predicates.
                                                              (line 120)
* fzn_post/1 (zinc):                     FlatZinc Exported Predicates.
                                                              (line 108)
* fzn_run_file/[1,2] (zinc):             FlatZinc Exported Predicates.
                                                              (line 310)
* fzn_run_stream/[1,2] (zinc):           FlatZinc Exported Predicates.
                                                              (line 282)
* fzn_solve/1 (zinc):                    FlatZinc Exported Predicates.
                                                              (line 113)
* garbage collection:                    ref-lps-flg.         (line 162)
* garbage collection <1>:                ref-mgc-ove.         (line  48)
* garbage collection <2>:                ref-mgc-gcp.         (line   6)
* garbage collection <3>:                mpg-ref-abolish.     (line  60)
* garbage collection (definition):       Glossary.            (line 319)
* garbage collection, atoms:             ref-mgc-ago.         (line  13)
* garbage collection, enabling and disabling: ref-mgc-egc.    (line   6)
* garbage collection, invoking directly: ref-mgc-gcd.         (line   6)
* garbage collection, monitoring:        ref-mgc-mgc.         (line   6)
* garbage_collect/0 (built-in):          ref-mgc-gcd.         (line  21)
* garbage_collect/0 (built-in, ref page): mpg-ref-garbage_collect.
                                                              (line   6)
* garbage_collection (statistics key):   ref-mgc-ove-sta.     (line 139)
* garbage_collect_atoms/0 (built-in):    ref-mgc-ago-agc.     (line  18)
* garbage_collect_atoms/0 (built-in, ref page): mpg-ref-garbage_collect_atoms.
                                                              (line   6)
* gauge:                                 lib-gauge.           (line   6)
* gc (prolog flag):                      ref-lps-flg.         (line 161)
* gc (prolog flag) <1>:                  ref-mgc-egc.         (line  16)
* gcd /2, greatest common divisor (evaluable): ref-ari-aex.   (line 162)
* gc_count (statistics key):             ref-mgc-ove-sta.     (line 214)
* gc_freed (statistics key):             ref-mgc-ove-sta.     (line 217)
* gc_margin (prolog flag):               ref-lps-flg.         (line 165)
* gc_margin (prolog flag) <1>:           ref-mgc-gch.         (line  64)
* gc_time (statistics key):              ref-mgc-ove-sta.     (line 220)
* gc_trace (prolog flag):                ref-lps-flg.         (line 171)
* gc_trace (prolog flag) <1>:            ref-mgc-egc.         (line  16)
* gc_trace (prolog flag) <2>:            ref-mgc-mgc.         (line  15)
* generalization/1 (cumulatives/3 option): Scheduling Constraints.
                                                              (line 108)
* generalized predicate spec (definition): Glossary.          (line 324)
* generate-and-test, use with cut:       Terminating a Backtracking Loop.
                                                              (line   6)
* generate_debug_info (CHR flag):        CHR Debugging Predicates.
                                                              (line  42)
* generate_message/3 (built-in, ref page): mpg-ref-generate_message.
                                                              (line   6)
* generate_message/3 (SU_messages):      Message Handling Predicates.
                                                              (line  25)
* generate_message_hook/3 (hook, ref page): mpg-ref-generate_message_hook.
                                                              (line   6)
* generate_message_hook/3 (user, hook):  Message Handling Predicates.
                                                              (line  19)
* generate_unique_name (open/4 if_exists value): mpg-ref-open.
                                                              (line 211)
* generic breakpoint:                    Specific and Generic Breakpoints.
                                                              (line   6)
* gen_assoc/3 (assoc):                   lib-assoc.           (line  24)
* gen_int/1 (between):                   lib-between.         (line  23)
* gen_label/3 (trees):                   lib-trees.           (line  11)
* gen_nat/1 (between):                   lib-between.         (line  17)
* geometric_mean/2 (statistics):         lib-statistics.      (line  46)
* geost/[2,3,4] (clpfd):                 Placement Constraints.
                                                              (line 167)
* get/1 (debugger condition):            Port Tests.          (line  61)
* getrand/1 (random):                    lib-random.          (line  18)
* gets (Tcl command):                    Commands.            (line 614)
* get_address/3 (structs):               str-afd.             (line  11)
* get_assoc/3 (assoc):                   lib-assoc.           (line  34)
* get_atts/2 (Module):                   lib-atts.            (line  38)
* get_byte/[1,2] (built-in):             ref-iou-cin-cha.     (line   6)
* get_byte/[1,2] (built-in, ref page):   mpg-ref-get_byte.    (line   6)
* get_char/[1,2] (built-in):             ref-iou-cin-cha.     (line  12)
* get_char/[1,2] (built-in, ref page):   mpg-ref-get_char.    (line   6)
* get_code/[1,2] (built-in):             ref-iou-cin-cha.     (line   9)
* get_code/[1,2] (built-in, ref page):   mpg-ref-get_code.    (line   6)
* get_contents/3 (structs):              str-afd.             (line   6)
* get_label/3 (trees):                   lib-trees.           (line  16)
* get_mutable/2 (built-in):              ref-lte-mut.         (line  39)
* get_mutable/2 (built-in, ref page):    mpg-ref-get_mutable. (line   6)
* get_next_assoc/4 (assoc):              lib-assoc.           (line  47)
* get_prev_assoc/4:                      lib-assoc.           (line  59)
* glob/1 (absolute_file_name/3 option):  mpg-ref-absolute_file_name.
                                                              (line  98)
* global (Tcl command):                  Commands.            (line 808)
* global constraint:                     The Global Constraint Programming Interface.
                                                              (line   6)
* global exception handler:              ref-ere-hex-hup.     (line   6)
* global stack:                          ref-mgc-ove.         (line  24)
* global stack, expansion:               ref-mgc-ove.         (line  48)
* global/1 (cumulative/2 option):        Scheduling Constraints.
                                                              (line  50)
* global/1 (disjoint1/2 option):         Placement Constraints.
                                                              (line  19)
* global/1 (disjoint2/2 option):         Placement Constraints.
                                                              (line  60)
* global/1 (lex_chain/2 option):         Arithmetic-Logical Constraints.
                                                              (line 302)
* GLOBALSTKSIZE (system property):       System Properties and Environment Variables.
                                                              (line 147)
* global_cardinality/[2,3] (clpfd):      Arithmetic-Logical Constraints.
                                                              (line  49)
* global_stack (statistics key):         ref-mgc-ove-sta.     (line 105)
* global_stack_free (statistics key):    ref-mgc-ove-sta.     (line 172)
* global_stack_used (statistics key):    ref-mgc-ove-sta.     (line 169)
* glue code (definition):                Glossary.            (line 345)
* GNU Emacs:                             Emacs Interface.     (line   6)
* goal:                                  ref-sem-pro.         (line   6)
* goal (definition):                     Glossary.            (line 350)
* goal, ancestor:                        Debug Format.        (line  40)
* goal, blocked:                         Debug Format.        (line  72)
* goal, blocked (definition):            Glossary.            (line  70)
* goal, skeletal (definition):           Glossary.            (line 735)
* goal, unblocked (definition):          Glossary.            (line 865)
* goal/1 (debugger condition):           Breakpoint Tests.    (line  12)
* goal/1 (debugger condition) <1>:       Goal Tests.          (line  15)
* goals, enumerating solutions:          ref-all-cse.         (line  10)
* goals, enumerating solutions <1>:      ref-all-cba.         (line  10)
* goals, enumerating solutions <2>:      ref-all-cba-cal.     (line   6)
* goal_expansion/5 (hook, ref page):     mpg-ref-goal_expansion.
                                                              (line   6)
* goal_expansion/5 (Module, hook):       ref-lod-exp.         (line  45)
* goal_private/1 (debugger condition):   Storing User Information in the Backtrace.
                                                              (line   6)
* goal_private/1 (debugger condition) <1>: Goal Tests.        (line  27)
* goal_source_info/3 (built-in):         ref-ere-err.         (line 113)
* goal_source_info/3 (built-in) <1>:     Message Handling Predicates.
                                                              (line  42)
* goal_source_info/3 (built-in, ref page): mpg-ref-goal_source_info.
                                                              (line   6)
* grammar rules, control constructs in:  ref-gru-dcg.         (line  75)
* grammar rules, predicates for:         ref-gru-sum.         (line   6)
* grammar rules, predicates for <1>:     mpg-top-gru.         (line   6)
* grammar rules, semantics of:           ref-gru-tra.         (line   6)
* grammars, context-free:                ref-gru-dcg.         (line  38)
* grammars, definite clause:             ref-gru-dcg.         (line   6)
* greedy/1 (multi_cumulatives/3 option): Scheduling Constraints.
                                                              (line 161)
* green cut:                             ref-sem-ctr-cut.     (line  54)
* ground (definition):                   Glossary.            (line 359)
* ground/1 (built-in, ref page):         mpg-ref-ground.      (line   6)
* ground/1 (when/2 condition):           mpg-ref-when.        (line  21)
* group/[3,4,5] (lists):                 lib-lists.           (line 658)
* GROWTHFACTOR (system property):        System Properties and Environment Variables.
                                                              (line 167)
* guarded clause:                        Conditionals and Disjunction.
                                                              (line  70)
* guarded clause (definition):           Glossary.            (line 363)
* halt/[0,1] (built-in):                 ref-ere-int.         (line  12)
* halt/[0,1] (built-in, ref page):       mpg-ref-halt.        (line   6)
* handling, error:                       Exceptions Debug.    (line   6)
* handling, exception:                   Exceptions Debug.    (line   6)
* handling, interrupt:                   Calling Prolog Asynchronously.
                                                              (line  10)
* handling, signal:                      Calling Prolog Asynchronously.
                                                              (line  10)
* harmonic_mean/2 (statistics):          lib-statistics.      (line  49)
* head (definition):                     Glossary.            (line 367)
* head of a clause:                      ref-sem-pro.         (line  23)
* head/2 (lists):                        lib-lists.           (line 362)
* heap (statistics key):                 ref-mgc-ove-sta.     (line 134)
* help (CHR debug command):              CHR Tracing.         (line  50)
* help (debugger command):               Debug Commands.      (line 371)
* help (top-level command):              Queries.             (line  75)
* hidden module:                         ref-mod-def.         (line  21)
* hidden/1 (module/3 option):            ref-mod-def.         (line  21)
* hidden/1 (module/3 option) <1>:        mpg-ref-module.      (line  33)
* hide/0 (debugger condition):           Condition Macros.    (line  12)
* hook (function annotation):            cpg-rve.             (line  22)
* hook (predicate annotation):           mpg-ref-cat.         (line  17)
* hook predicate:                        Multifile Declarations.
                                                              (line  15)
* hook predicate (definition):           Glossary.            (line 377)
* hook predicate (definition) <1>:       ref-sem-typ-hok.     (line   6)
* hook predicates:                       mpg-top-hok.         (line   6)
* hookable (predicate annotation):       mpg-ref-cat.         (line  11)
* hookable predicate (definition):       Glossary.            (line 383)
* host_type (prolog flag):               ref-fdi-fsp-pre.     (line  13)
* host_type (prolog flag) <1>:           ref-lps-flg.         (line 183)
* host_type (prolog flag, volatile):     mpg-ref-file_search_path.
                                                              (line  63)
* I/O, C functions for:                  cpg-top-cio.         (line   6)
* id/1 (stream property):                mpg-ref-stream_property.
                                                              (line  31)
* id3 (table/3 order/1 value):           Extensional Constraints.
                                                              (line  54)
* idempotent/1 (fd_global/[3,4] option): The Global Constraint Programming Interface.
                                                              (line 117)
* identifier, breakpoint:                Creating Breakpoints.
                                                              (line  31)
* if (Tcl command):                      Commands.            (line 242)
* if/1 (conditional directive):          ref-lod-cnd.         (line   6)
* if/1 (load_files/2 option):            mpg-ref-load_files.  (line  32)
* if/3 (built-in, ref page):             mpg-ref-if.          (line   6)
* if/3, soft cut:                        ref-sem-ctr-ite.     (line  48)
* if_exists/1 (open/4 option):           mpg-ref-open.        (line 199)
* if_nonempty/1 (delete_directory/2 option): lib-file_systems.
                                                              (line  77)
* if_user/1 (absolute_file_name/3 option): mpg-ref-absolute_file_name.
                                                              (line 238)
* ignore (delete_directory/2 if_nonempty option value): lib-file_systems.
                                                              (line  79)
* ignore_ops/1 (write_term/[2,3] option): mpg-ref-write_term. (line  43)
* IID:                                   Terminology.         (line  18)
* illarg/[3,4] (types):                  lib-types.           (line  80)
* import (definition):                   Glossary.            (line 392)
* importation:                           ref-mod-bas.         (line  19)
* importation <1>:                       ref-mod-lod.         (line  34)
* importation, predicates from another module: ref-mod-lod.   (line   6)
* imported_from (predicate property):    mpg-ref-predicate_property.
                                                              (line  51)
* imported_from/1 (predicate property):  ref-lps-app.         (line  44)
* importing dynamic predicates:          ref-mod-idp.         (line   6)
* importing predicates into modules:     ref-mod-lod.         (line   6)
* imports/1 (load_files/2 option):       mpg-ref-load_files.  (line  55)
* in/1 (linda_client):                   lib-linda-client.    (line  66)
* in/2 (clpfd):                          Membership Constraints.
                                                              (line  15)
* in/2 (clpfd:dispatch_global/4 request): The Global Constraint Programming Interface.
                                                              (line  63)
* in/2 (linda_client):                   lib-linda-client.    (line  79)
* IName:                                 Terminology.         (line  23)
* include declaration:                   Include Declarations.
                                                              (line   6)
* include/1 (built-in, ref page):        mpg-ref-include.     (line   6)
* include/1 (declaration):               Include Declarations.
                                                              (line   6)
* include/[3,4,5] (lists):               lib-lists.           (line 615)
* incr (Tcl command):                    Commands.            (line  52)
* increasing efficiency:                 Writing Efficient Programs.
                                                              (line   6)
* increasing/0 (lex_chain/2 option):     Arithmetic-Logical Constraints.
                                                              (line 291)
* increasing_prefix/[3,4] (lists):       lib-lists.           (line 761)
* indented/1 (write_term/[2,3] option):  mpg-ref-write_term.  (line  86)
* indexed term:                          The DB-Spec Informal Description.
                                                              (line  15)
* indexical:                             Indexicals.          (line   6)
* indexicals, checking:                  Indexicals.          (line  11)
* indexicals, propagating:               Indexicals.          (line  11)
* indexing:                              Indexing.            (line   6)
* indexing (definition):                 Glossary.            (line 402)
* indexing of dynamic code:              ref-mdb-dsp.         (line  82)
* indexing, determinacy detection via:   Determinacy Detection.
                                                              (line   6)
* indomain/1 (clpfd):                    Enumeration Predicates.
                                                              (line  15)
* inf, minus infinity:                   CLPFD Interface.     (line  22)
* inf/[2,4] (clpqr):                     CLPQR Solver Predicates.
                                                              (line  86)
* infix operators:                       ref-syn-cpt.         (line  50)
* infix operators <1>:                   ref-syn-ops-ove.     (line  25)
* information, source:                   Usage.               (line  18)
* information, source <1>:               ref-lps-flg.         (line 321)
* informational (prolog flag):           ref-lps-flg.         (line 187)
* informational (prolog flag) <1>:       Runtime Systems.     (line  30)
* informational (prolog flag) <2>:       too-sicstus.         (line  50)
* inherit/1 (objects):                   obj-exp-inherit.     (line   6)
* init function:                         Conversion Declarations.
                                                              (line  10)
* init function (definition):            Glossary.            (line 412)
* initialization:                        Initializations.     (line   6)
* initialization (definition):           Glossary.            (line 416)
* initialization file:                   ref-fdi-fsp-ffs.     (line   6)
* initialization of saved-states:        ref-sls-sst.         (line  36)
* initialization, C functions for:       cpg-top-main.        (line   6)
* initialization/1 (built-in, ref page): mpg-ref-initialization.
                                                              (line   6)
* initialization/1 (declaration):        Initializations.     (line   6)
* input:                                 ref-iou.             (line  19)
* input and output of characters:        ref-iou-cin.         (line  13)
* input and output of terms:             ref-iou-bas.         (line  13)
* input and output, streams:             ref-iou-bas.         (line  10)
* input stream, current:                 ref-iou-sfh-sob.     (line  37)
* input, current:                        ref-iou-str.         (line  15)
* input, term:                           ref-iou-tin.         (line  11)
* input/0 (stream property):             mpg-ref-stream_property.
                                                              (line  39)
* input_encoding/1 (stream property):    mpg-ref-stream_property.
                                                              (line  77)
* input_order (labeling/2 option):       Enumeration Predicates.
                                                              (line  72)
* insert (CHR port):                     CHR Ports.           (line  29)
* instance of clause:                    ref-sem-sec.         (line  12)
* instance/2 (built-in):                 ref-mdb-acl.         (line   6)
* instance/2 (built-in, ref page):       mpg-ref-instance.    (line   6)
* instance_method/1 (objects):           obj-exp-instance_method.
                                                              (line   6)
* instantiation (definition):            Glossary.            (line 422)
* instantiation errors:                  ref-ere-err-ins.     (line   6)
* instantiation_error/[0,2] (error class): ref-ere-err.       (line 118)
* int (CHR type):                        CHR Constraint Declaration.
                                                              (line  52)
* integer /1, coercion (evaluable):      ref-ari-aex.         (line  86)
* integer, large (definition):           Glossary.            (line 440)
* integer, small (definition):           Glossary.            (line 739)
* integer/1 (built-in, ref page):        mpg-ref-integer.     (line   6)
* integers, range of:                    ref-ari-ove.         (line   6)
* integers, syntax of:                   ref-syn-trm-int.     (line   6)
* integer_rounding_function (prolog flag): ref-lps-flg.       (line 193)
* interactive stream (definition):       Glossary.            (line 387)
* interactive/0 (stream property):       mpg-ref-stream_property.
                                                              (line 118)
* interface, Eclipse:                    SPIDER.              (line   6)
* interface, emacs:                      Emacs Interface.     (line   6)
* interface, foreign language:           Mixing C and Prolog. (line   6)
* interface, foreign language <1>:       Calling C from Prolog.
                                                              (line   6)
* interf_arg_type (argument type):       mpg-ref-aty-ety.     (line  35)
* internal database:                     ref-mdb-idb.         (line   6)
* interoperability:                      Mixing C and Prolog. (line   6)
* interpret (definition):                Glossary.            (line 426)
* interpretation of clauses, declarative: ref-sem-sec.        (line   6)
* interpretation of clauses, procedural: ref-sem-sec.         (line   6)
* interpreted (predicate property):      mpg-ref-predicate_property.
                                                              (line  29)
* interpreted/0 (predicate property):    ref-lps-app.         (line  16)
* interrupt character:                   Keyboard Characters. (line  13)
* interrupt handling:                    Calling Prolog Asynchronously.
                                                              (line  10)
* intersect/2 (sets):                    lib-sets.            (line  44)
* intersection/[2,3] (sets):             lib-sets.            (line  79)
* inv/1 (debugger condition):            Breakpoint Tests.    (line 120)
* inv/1 (debugger condition) <1>:        Goal Tests.          (line  10)
* inv/1 (debugger condition) <2>:        Past States.         (line  19)
* invocation box:                        Procedure Box.       (line 102)
* invocation box (definition):           Glossary.            (line 433)
* invoking garbage collection directly:  ref-mgc-gcd.         (line   6)
* in_noblock/1 (linda_client):           lib-linda-client.    (line  72)
* in_set/2 (clpfd):                      Membership Constraints.
                                                              (line  20)
* in_set/2 (clpfd:dispatch_global/4 request): The Global Constraint Programming Interface.
                                                              (line  67)
* is/2 (built-in):                       ref-ari-eae.         (line  14)
* is/2 (built-in, ref page):             mpg-ref-is.          (line   6)
* ISO (predicate annotation):            mpg-ref-cat.         (line  39)
* is_assoc/1 (assoc):                    lib-assoc.           (line  65)
* is_avl/1 (avl):                        lib-avl.             (line  24)
* is_bag/1 (bags):                       lib-bags.            (line  38)
* is_fdset/1 (clpfd):                    FD Set Operations.   (line  14)
* is_list/1 (lists):                     lib-lists.           (line  69)
* is_ordset/1 (ordsets):                 lib-ordsets.         (line  24)
* is_process/1 (process):                lib-process.         (line 454)
* is_queue/1 (queues):                   lib-queues.          (line  38)
* is_set/1 (sets):                       lib-sets.            (line  33)
* iterator (definition):                 Glossary.            (line 436)
* jasper_call/4 (jasper):                Jasper Library Predicates.
                                                              (line  74)
* jasper_create_global_ref/3 (jasper):   Jasper Library Predicates.
                                                              (line 152)
* jasper_create_local_ref/3 (jasper):    Jasper Library Predicates.
                                                              (line 161)
* jasper_deinitialize/1 (jasper):        Jasper Library Predicates.
                                                              (line  69)
* jasper_delete_global_ref/2 (jasper):   Jasper Library Predicates.
                                                              (line 157)
* jasper_delete_local_ref/2 (jasper):    Jasper Library Predicates.
                                                              (line 166)
* jasper_initialize/[1,2] (jasper):      Jasper Library Predicates.
                                                              (line   9)
* jasper_is_instance_of/3 (jasper):      Jasper Library Predicates.
                                                              (line 193)
* jasper_is_jvm/1 (jasper):              Jasper Library Predicates.
                                                              (line 170)
* jasper_is_object/[1,2] (jasper):       Jasper Library Predicates.
                                                              (line 175)
* jasper_is_same_object/3 (jasper):      Jasper Library Predicates.
                                                              (line 185)
* jasper_new_object/5 (jasper):          Jasper Library Predicates.
                                                              (line 115)
* jasper_new_object/5 (jasper) <1>:      Deprecated Jasper Predicates.
                                                              (line   8)
* jasper_null/2 (jasper):                Jasper Library Predicates.
                                                              (line 204)
* jasper_null/2 (jasper) <1>:            Jasper Library Predicates.
                                                              (line 208)
* jasper_object_class_name/3 (jasper):   Jasper Library Predicates.
                                                              (line 199)
* Java Virtual Machine:                  Jasper Overview.     (line  12)
* JIT compilation:                       ref-lod-ove.         (line  17)
* JIT compilation <1>:                   System Properties and Environment Variables.
                                                              (line 233)
* jittable (predicate property):         mpg-ref-predicate_property.
                                                              (line  43)
* jitted (predicate property):           mpg-ref-predicate_property.
                                                              (line  46)
* jit_count (statistics key):            ref-mgc-ove-sta.     (line 260)
* jit_time (statistics key):             ref-mgc-ove-sta.     (line 264)
* JNDI:                                  PB Features.         (line  25)
* join (Tcl command):                    Commands.            (line 210)
* jump to port (debugger command):       Debug Commands.      (line 176)
* JVM:                                   Jasper Overview.     (line  12)
* kernel, runtime (definition):          Glossary.            (line 704)
* Key (Tk event type):                   Event Handling.      (line  29)
* keyboard:                              Keyboard Characters. (line   6)
* keyclumped/2 (lists):                  lib-lists.           (line 795)
* keyclumps/2 (lists):                   lib-lists.           (line 779)
* keymerge/3 (samsort):                  lib-samsort.         (line  37)
* KeyPress (Tk event type):              Event Handling.      (line  30)
* KeyRelease (Tk event type):            Event Handling.      (line  33)
* keys, recorded:                        ref-mdb-idb.         (line  42)
* keys/1 (keysorting/3 option):          Arithmetic-Logical Constraints.
                                                              (line 262)
* keysort/2 (built-in):                  ref-lte-cte-sor.     (line   6)
* keysort/2 (built-in, ref page):        mpg-ref-keysort.     (line   6)
* keysorting/[2,3] (clpfd):              Arithmetic-Logical Constraints.
                                                              (line 242)
* keys_and_values/3 (lists):             lib-lists.           (line  75)
* kurtosis/2 (statistics):               lib-statistics.      (line  64)
* label (Tk widget):                     Types of Widget.     (line  26)
* labeling:                              FDBG Annotation.     (line  17)
* labeling event:                        FDBG Events.         (line  13)
* labeling levels:                       FDBG Labeling Levels.
                                                              (line   6)
* labeling/1 (clpb):                     CLPB Interface.      (line  28)
* labeling/2 (clpfd):                    Enumeration Predicates.
                                                              (line  20)
* large integer (definition):            Glossary.            (line 440)
* largest (labeling/2 option):           Enumeration Predicates.
                                                              (line  81)
* last call optimization:                Last Call Optimization.
                                                              (line   6)
* last clause determinacy detection:     Last Clause Determinacy Detection.
                                                              (line   6)
* last/2 (lists):                        lib-lists.           (line  93)
* last/3 (lists):                        lib-lists.           (line 356)
* later_bound/2 (clpfd):                 Enumeration Predicates.
                                                              (line  28)
* later_bound/2 (clpfd) <1>:             Enumeration Predicates.
                                                              (line 156)
* layout term:                           mpg-ref-read_term.   (line  78)
* layout term (definition):              Glossary.            (line 443)
* layout/1 (read_term/[2,3] option):     mpg-ref-read_term.   (line  78)
* leap (debugger command):               Debug Commands.      (line  70)
* leap (definition):                     Glossary.            (line 458)
* leash/0 (debugger condition):          Condition Macros.    (line  14)
* leash/1 (built-in):                    Basic Debug.         (line  48)
* leash/1 (built-in, ref page):          mpg-ref-leash.       (line   6)
* leashing (definition):                 Glossary.            (line 464)
* Leave (Tk event type):                 Event Handling.      (line  46)
* leftmost (labeling/2 option):          Enumeration Predicates.
                                                              (line  71)
* leftmost (table/3 order/1 value):      Extensional Constraints.
                                                              (line  51)
* legacy_char_classification (prolog flag): ref-syn-syn-tok.  (line  14)
* legacy_char_classification (prolog flag) <1>: ref-lod-lod.  (line  68)
* legacy_char_classification (prolog flag) <2>: ref-lps-flg.  (line 199)
* legacy_numbervars/1 (write_term/[2,3] option): mpg-ref-write_term.
                                                              (line  68)
* legend:                                FDBG Legend.         (line   6)
* legend_portray/3 (fdbg, hook):         FDBG Customizing Output.
                                                              (line  24)
* length/2 (built-in):                   ref-lte-acl.         (line  13)
* length/2 (built-in, ref page):         mpg-ref-length.      (line   6)
* length/3 (bags):                       lib-bags.            (line 158)
* length_bound/2 (terms):                lib-terms.           (line 258)
* levels, labeling:                      FDBG Labeling Levels.
                                                              (line   6)
* lex/1 (geost/[2,3,4] option):          Placement Constraints.
                                                              (line 194)
* lex_chain/[1,2] (clpfd):               Arithmetic-Logical Constraints.
                                                              (line 275)
* library:                               The Prolog Library.  (line   6)
* library, searching for a file in:      ref-fdi-fsp.         (line  12)
* library_directory/1 (hook, ref page):  mpg-ref-library_directory.
                                                              (line   6)
* limit/1 (cumulative/2 option):         Scheduling Constraints.
                                                              (line  36)
* limits, arithmetic:                    ref-ari-ove.         (line   6)
* Linda:                                 lib-linda.           (line   6)
* linda/[0,1] (linda):                   lib-linda-server.    (line  18)
* linda_client/1 (linda_client):         lib-linda-client.    (line  19)
* linda_timeout/2 (linda_client):        lib-linda-client.    (line  54)
* lindex (Tcl command):                  Commands.            (line 165)
* line breakpoint:                       Usage.               (line 159)
* line, end of:                          mpg-ref-at_end_of_line.
                                                              (line  31)
* line/0 (input method):                 Default Input Methods.
                                                              (line  11)
* line/1 (debugger condition):           Breakpoint Tests.    (line 223)
* line/1 (debugger condition) <1>:       Source Tests.        (line  18)
* line/2 (debugger condition):           Breakpoint Tests.    (line 223)
* line/2 (debugger condition) <1>:       Source Tests.        (line  15)
* line_count/2 (built-in):               ref-iou-sfh-opn.     (line  80)
* line_count/2 (built-in) <1>:           ref-iou-sos.         (line  24)
* line_count/2 (built-in, ref page):     mpg-ref-line_count.  (line   6)
* line_position/2 (built-in):            ref-iou-sfh-opn.     (line  80)
* line_position/2 (built-in) <1>:        ref-iou-sos.         (line  29)
* line_position/2 (built-in, ref page):  mpg-ref-line_position.
                                                              (line   6)
* linked foreign resource:               Foreign Resources.   (line   6)
* linked foreign resource <1>:           Creating the Linked Foreign Resource.
                                                              (line   6)
* linked foreign resource (definition):  Glossary.            (line 469)
* linker, foreign resource:              The Foreign Resource Linker.
                                                              (line   6)
* linsert (Tcl command):                 Commands.            (line 170)
* list (definition):                     Glossary.            (line 473)
* list (Tcl command):                    Commands.            (line 175)
* list constructor (definition):         Glossary.            (line 473)
* list of Type (argument type):          mpg-ref-aty-ety.     (line  14)
* list of variables:                     FDBG Legend.         (line   6)
* list processing, predicates for:       ref-lte-sum.         (line 152)
* list processing, predicates for <1>:   mpg-top-lis.         (line   6)
* list separator, '|':                   ref-syn-cpt-lis.     (line  29)
* list syntax:                           Glossary.            (line 473)
* list, association:                     lib-assoc.           (line   6)
* list, association <1>:                 lib-avl.             (line   6)
* list, cyclic:                          Glossary.            (line 473)
* list, empty (definition):              Glossary.            (line 473)
* list, partial (definition):            Glossary.            (line 473)
* list, proper (definition):             Glossary.            (line 473)
* listbox (Tk widget):                   Types of Widget.     (line  29)
* listing/[0,1] (built-in):              Syntax Errors.       (line  28)
* listing/[0,1] (built-in) <1>:          ref-mod-idp.         (line  23)
* listing/[0,1] (built-in, ref page):    mpg-ref-listing.     (line   6)
* lists, predicates for processing:      ref-lte-acl.         (line   6)
* lists, syntax of:                      ref-syn-cpt-lis.     (line   6)
* list_queue/2 (queues):                 lib-queues.          (line  88)
* list_to_assoc/2 (assoc):               lib-assoc.           (line  74)
* list_to_avl/2 (avl):                   lib-avl.             (line 130)
* list_to_bag/2 (bags):                  lib-bags.            (line  96)
* list_to_fdset/2 (clpfd):               FD Set Operations.   (line  61)
* list_to_ord_set/2 (ordsets):           lib-ordsets.         (line  31)
* list_to_set/2 (sets):                  lib-sets.            (line  70)
* list_to_tree/2 (trees):                lib-trees.           (line  22)
* llength (Tcl command):                 Commands.            (line 179)
* load (--main option value):            too-spld.            (line 100)
* load (definition):                     Glossary.            (line 501)
* load context:                          ref-lps-lco.         (line   6)
* loading database:                      ref-sls-ove.         (line   6)
* loading module-files:                  ref-mod-lod.         (line  34)
* loading modules:                       ref-mod-lod.         (line   6)
* loading PO files:                      ref-sls-ssl.         (line   6)
* loading programs:                      ref-sem-con.         (line  79)
* loading programs, predicates for:      ref-lod-lis.         (line   8)
* loading programs, predicates for <1>:  mpg-top-lod.         (line   6)
* load_files/[1,2] (built-in):           ref-sls-ssl.         (line   6)
* load_files/[1,2] (built-in, ref page): mpg-ref-load_files.  (line   6)
* load_foreign_resource/1 (built-in):    Interface Predicates.
                                                              (line   8)
* load_foreign_resource/1 (built-in, ref page): mpg-ref-load_foreign_resource.
                                                              (line   6)
* load_type/1 (load_files/2 option):     mpg-ref-load_files.  (line  49)
* local cut:                             ref-sem-ctr-ite.     (line  39)
* local cut <1>:                         mpg-ref-or.          (line  56)
* local stack:                           ref-mgc-ove.         (line  15)
* LOCALSTKSIZE (system property):        System Properties and Environment Variables.
                                                              (line 152)
* local_stack (statistics key):          ref-mgc-ove-sta.     (line 111)
* local_stack_free (statistics key):     ref-mgc-ove-sta.     (line 178)
* local_stack_used (statistics key):     ref-mgc-ove-sta.     (line 175)
* locks, mutual exclusion:               OS Threads.          (line  11)
* log /1, logarithm (evaluable):         ref-ari-aex.         (line 274)
* log /2, logarithm (evaluable):         ref-ari-aex.         (line 278)
* logic programming:                     Intro.               (line  12)
* logical loop:                          ref-sem-ctr-dol.     (line   6)
* login_timeout/1 (odbc_db_open/4 option): ODBC Predicates.   (line  28)
* longest_hole/2 (geost/[2,3,4] option): Placement Constraints.
                                                              (line 210)
* loop, logical:                         ref-sem-ctr-dol.     (line   6)
* lrange (Tcl command):                  Commands.            (line 183)
* lreplace (Tcl command):                Commands.            (line 188)
* lsearch (Tcl command):                 Commands.            (line 193)
* lsort (Tcl command):                   Commands.            (line 200)
* macro (function annotation):           cpg-rve.             (line  26)
* macro expansion:                       mpg-ref-goal_expansion.
                                                              (line  42)
* main thread:                           Calling Prolog Asynchronously.
                                                              (line  10)
* make_directory/1 (file_systems):       lib-file_systems.    (line  97)
* make_sub_bag/2 (bags):                 lib-bags.            (line 163)
* mapbag/2 (bags):                       lib-bags.            (line  55)
* mapbag/3 (bags):                       lib-bags.            (line  61)
* maplist/[2,3,4] (lists):               lib-lists.           (line 449)
* map_assoc/2 (assoc):                   lib-assoc.           (line  87)
* map_assoc/3 (assoc):                   lib-assoc.           (line  94)
* map_list_queue/3 (queues):             lib-queues.          (line 125)
* map_product/5 (lists):                 lib-lists.           (line 483)
* map_queue/[2,3] (queues):              lib-queues.          (line 114)
* map_queue_list/3 (queues):             lib-queues.          (line 120)
* map_tree/3 (trees):                    lib-trees.           (line  27)
* margin/3 (disjoint1/2 option):         Placement Constraints.
                                                              (line  30)
* margin/4 (disjoint2/2 option):         Placement Constraints.
                                                              (line  82)
* mark-paragraph (emacs command):        Usage.               (line 103)
* max (all_different/2 on/1 value):      Arithmetic-Logical Constraints.
                                                              (line 156)
* max (all_distinct/2 on/1 value):       Arithmetic-Logical Constraints.
                                                              (line 156)
* max (labeling/2 option):               Enumeration Predicates.
                                                              (line  80)
* max /2, maximum value (evaluable):     ref-ari-aex.         (line 170)
* max/1 (fd_global/[3,4] option):        The Global Constraint Programming Interface.
                                                              (line  97)
* max/2 (statistics):                    lib-statistics.      (line  21)
* maximize/1 (clpqr):                    CLPQR Solver Predicates.
                                                              (line 122)
* maximize/1 (labeling/2 option):        Enumeration Predicates.
                                                              (line 193)
* maximize/[2,3] (clpfd):                Enumeration Predicates.
                                                              (line  36)
* maximum/2 (clpfd):                     Arithmetic Constraints.
                                                              (line  84)
* max_arity (prolog flag):               ref-lps-flg.         (line 212)
* max_assoc/3 (assoc):                   lib-assoc.           (line 105)
* max_cliques/2 (ugraphs):               lib-ugraphs.         (line 160)
* max_depth/1 (write_term/[2,3] option): mpg-ref-write_term.  (line  91)
* max_integer (prolog flag):             ref-lps-flg.         (line 216)
* max_inv/1 (debugger condition):        Accessing Past Debugger States.
                                                              (line  81)
* max_inv/1 (debugger condition) <1>:    Break Tests.         (line  13)
* max_member/[2,3] (lists):              lib-lists.           (line 687)
* max_path/5 (ugraphs):                  lib-ugraphs.         (line 121)
* max_path/5 (wgraphs):                  lib-wgraphs.         (line 110)
* max_regret (labeling/2 option):        Enumeration Predicates.
                                                              (line 104)
* max_tagged_integer (prolog flag):      Glossary.            (line 742)
* max_tagged_integer (prolog flag) <1>:  ref-lps-flg.         (line 221)
* maybe/[0,1,2] (random):                lib-random.          (line  29)
* mean/2 (statistics):                   lib-statistics.      (line  39)
* median (labeling/2 option):            Enumeration Predicates.
                                                              (line 140)
* median/2 (statistics):                 lib-statistics.      (line 113)
* member/2 (built-in):                   ref-lte-acl.         (line  21)
* member/2 (built-in, ref page):         mpg-ref-member.      (line   6)
* member/3 (bags):                       lib-bags.            (line 116)
* memberchk/2 (built-in):                ref-lte-acl.         (line  18)
* memberchk/2 (built-in, ref page):      mpg-ref-memberchk.   (line   6)
* memberchk/3 (bags):                    lib-bags.            (line 121)
* memory (statistics key):               ref-mgc-ove-sta.     (line 126)
* Memory management, C functions for:    cpg-top-mem.         (line   6)
* memory statistics:                     ref-mgc-ove-sta.     (line   6)
* memory, general description:           ref-mgc.             (line  17)
* memory, predicates for:                ref-mgc-sum.         (line   6)
* memory, predicates for <1>:            mpg-top-mem.         (line   6)
* memory, reclamation:                   mpg-ref-abolish.     (line  60)
* memory_buckets (statistics key):       ref-mgc-ove-sta.     (line 256)
* memory_culprit (statistics key):       ref-mgc-ove-sta.     (line 253)
* memory_free (statistics key):          ref-mgc-ove-sta.     (line 166)
* memory_used (statistics key):          ref-mgc-ove-sta.     (line 163)
* menu (Tk widget):                      Types of Widget.     (line  32)
* menubutton (Tk widget):                Types of Widget.     (line  35)
* merge/[3,4] (samsort):                 lib-samsort.         (line  15)
* message (Tk widget):                   Types of Widget.     (line  38)
* message/4 (objects):                   obj-exp-message.     (line   6)
* messages and queries, predicates for:  Message Summary.     (line   6)
* messages and queries, predicates for <1>: mpg-top-msg.      (line   6)
* messages, debugging:                   Debug Format.        (line   6)
* message_hook/3 (hook, ref page):       mpg-ref-message_hook.
                                                              (line   6)
* message_hook/3 (user, hook):           Message Handling Predicates.
                                                              (line  30)
* meta-call:                             ref-sem-cal.         (line   6)
* meta-call (definition):                Glossary.            (line 505)
* meta-logical (definition):             ref-lte-met.         (line  11)
* meta-logical predicate (definition):   Glossary.            (line 509)
* meta-logical predicates:               ref-lte-met.         (line  11)
* meta-predicate (definition):           Glossary.            (line 515)
* meta-predicate declaration:            Meta-Predicate Declarations.
                                                              (line   6)
* meta-predicates (definition):          mpg-ref-cat.         (line  49)
* meta_predicate (predicate property):   mpg-ref-predicate_property.
                                                              (line  55)
* meta_predicate declaration:            ref-mod-met.         (line   6)
* meta_predicate/1 (built-in, ref page): mpg-ref-meta_predicate.
                                                              (line   6)
* meta_predicate/1 (declaration):        Meta-Predicate Declarations.
                                                              (line   6)
* meta_predicate/1 (declaration) <1>:    ref-mod-met.         (line   6)
* meta_predicate/1 (predicate property): ref-lps-app.         (line  35)
* method/1 (table/3 option):             Extensional Constraints.
                                                              (line  59)
* method/3 (Java method identifier):     Jasper Library Predicates.
                                                              (line  81)
* middle (labeling/2 option):            Enumeration Predicates.
                                                              (line 145)
* min (all_different/2 on/1 value):      Arithmetic-Logical Constraints.
                                                              (line 154)
* min (all_distinct/2 on/1 value):       Arithmetic-Logical Constraints.
                                                              (line 154)
* min (labeling/2 option):               Enumeration Predicates.
                                                              (line  75)
* min /2, minimum value (evaluable):     ref-ari-aex.         (line 166)
* min/1 (fd_global/[3,4] option):        The Global Constraint Programming Interface.
                                                              (line  94)
* min/2 (statistics):                    lib-statistics.      (line  18)
* minimize/1 (clpqr):                    CLPQR Solver Predicates.
                                                              (line 116)
* minimize/1 (labeling/2 option):        Enumeration Predicates.
                                                              (line 193)
* minimize/[2,3] (clpfd):                Enumeration Predicates.
                                                              (line  36)
* minimum/2 (clpfd):                     Arithmetic Constraints.
                                                              (line  78)
* minmax (all_different/2 on/1 value):   Arithmetic-Logical Constraints.
                                                              (line 158)
* minmax (all_distinct/2 on/1 value):    Arithmetic-Logical Constraints.
                                                              (line 158)
* minmax (global_cardinality/3 on/1 value): Arithmetic-Logical Constraints.
                                                              (line  85)
* minmax/1 (fd_global/[3,4] option):     The Global Constraint Programming Interface.
                                                              (line 100)
* minus infinity, inf:                   CLPFD Interface.     (line  22)
* min_assoc/3 (assoc):                   lib-assoc.           (line 111)
* min_integer (prolog flag):             ref-lps-flg.         (line 225)
* min_max/3 (statistics):                lib-statistics.      (line  24)
* min_member/[2,3] (lists):              lib-lists.           (line 698)
* min_path/5 (ugraphs):                  lib-ugraphs.         (line 126)
* min_path/5 (wgraphs):                  lib-wgraphs.         (line 115)
* min_paths/3 (ugraphs):                 lib-ugraphs.         (line 130)
* min_paths/3 (wgraphs):                 lib-wgraphs.         (line 120)
* min_tagged_integer (prolog flag):      Glossary.            (line 742)
* min_tagged_integer (prolog flag) <1>:  ref-lps-flg.         (line 230)
* min_tree/3 (ugraphs):                  lib-ugraphs.         (line 156)
* min_tree/3 (wgraphs):                  lib-wgraphs.         (line 150)
* mixing C/C++ and Prolog:               Mixing C and Prolog. (line   6)
* ml_standard_deviation/2 (statistics):  lib-statistics.      (line  89)
* ml_variance/2 (statistics):            lib-statistics.      (line  73)
* mod /2, integer floored remainder (evaluable): ref-ari-aex. (line  80)
* mode annotations:                      mpg-ref-mod.         (line   6)
* mode declaration:                      Mode Declarations.   (line   6)
* mode declarations:                     ref-mod-met.         (line 101)
* mode spec:                             Mode Spec.           (line   6)
* mode/1 (built-in, ref page):           mpg-ref-mode.        (line   6)
* mode/1 (debugger condition):           Breakpoint Actions.  (line  12)
* mode/1 (debugger condition) <1>:       Port Tests.          (line  41)
* mode/1 (debugger condition) <2>:       Action Conditions.   (line  10)
* mode/1 (declaration):                  Mode Declarations.   (line   6)
* mode/1 (stream property):              mpg-ref-stream_property.
                                                              (line  28)
* mode/2 (statistics):                   lib-statistics.      (line  31)
* modification, database:                ref-mdb.             (line  18)
* modularity, procedural:                ref-mod-ove.         (line  26)
* module (definition):                   Glossary.            (line 521)
* module (definition) <1>:               ref-mod-ove.         (line   6)
* module (load context key):             ref-lps-lco.         (line  25)
* module declaration:                    Module Declarations. (line   6)
* module declaration <1>:                ref-mod-lod.         (line  34)
* module name expansion:                 Mode Spec.           (line  11)
* module name expansion <1>:             Meta-Predicate Declarations.
                                                              (line  16)
* module name expansion <2>:             ref-mod-mne.         (line   6)
* module name expansion (definition):    Glossary.            (line 526)
* module name expansion, exceptions:     mpg-ref-cat.         (line  61)
* module prefixes on clauses:            ref-mod-mpc.         (line  10)
* module, declaration:                   ref-mod-def.         (line   6)
* module, hidden:                        ref-mod-def.         (line  21)
* module, source:                        ref-mod-som.         (line   6)
* module, source (definition):           Glossary.            (line 749)
* module, type-in:                       ref-lps-flg.         (line 368)
* module, type-in <1>:                   ref-mod-som.         (line   6)
* module, type-in (definition):          Glossary.            (line 862)
* module-file (definition):              Glossary.            (line 530)
* module-files:                          ref-mod-def.         (line   6)
* module-files, converting into:         ref-mod-n2m.         (line   6)
* module-files, loading:                 ref-mod-lod.         (line   6)
* module-files, loading <1>:             ref-mod-lod.         (line  34)
* module/1 (debugger condition):         Goal Tests.          (line  24)
* module/[2,3] (built-in, ref page):     mpg-ref-module.      (line   6)
* module/[2,3] (declaration):            Module Declarations. (line   6)
* module/[2,3] (declaration) <1>:        ref-mod-lod.         (line  34)
* modules, currently loaded:             ref-mod-mpc-cmo.     (line   6)
* modules, currently loaded <1>:         ref-mod-ilm.         (line  11)
* modules, debugging:                    ref-mod-cim.         (line   6)
* modules, defining:                     ref-mod-def.         (line   6)
* modules, dynamic creation of:          ref-mod-dmo.         (line   6)
* modules, exporting predicates from:    ref-mod-def.         (line   6)
* modules, importing predicates into:    ref-mod-lod.         (line   6)
* modules, loading:                      ref-mod-lod.         (line   6)
* modules, name clashes:                 ref-mod-ncl.         (line   6)
* modules, predicates defined in:        ref-mod-ilm-def.     (line   6)
* modules, predicates exported from:     ref-mod-ilm-def.     (line  13)
* modules, predicates for:               ref-mod-sum.         (line   6)
* modules, predicates for <1>:           mpg-top-mod.         (line   6)
* modules, predicates imported into:     ref-mod-ilm-vis.     (line   6)
* modules, source:                       ref-mod-mne.         (line   6)
* modules, visibility rules:             ref-mod-vis.         (line   6)
* monitoring garbage collection:         ref-mgc-mgc.         (line   6)
* most general unifier:                  ref-sem-sec.         (line  98)
* most_constrained (labeling/2 option):  Enumeration Predicates.
                                                              (line  98)
* Motion (Tk event type):                Event Handling.      (line  49)
* msb /1, most significant bit (evaluable): ref-ari-aex.      (line 174)
* multifile (predicate property):        mpg-ref-predicate_property.
                                                              (line  37)
* multifile declaration:                 Multifile Declarations.
                                                              (line   6)
* multifile predicate (definition):      Glossary.            (line 541)
* multifile/0 (predicate property):      ref-lps-app.         (line  29)
* multifile/1 (built-in, ref page):      mpg-ref-multifile.   (line   6)
* multifile/1 (declaration):             Multifile Declarations.
                                                              (line   6)
* multiset:                              lib-bags.            (line   6)
* multi_cumulative/[2,3] (clpfd):        Scheduling Constraints.
                                                              (line 142)
* must_be/4 (types):                     lib-types.           (line  65)
* mutable:                               Terminology.         (line  65)
* mutable term:                          ref-lte-mut.         (line  21)
* mutable term (definition):             Glossary.            (line 546)
* mutable/1 (built-in):                  ref-lte-mut.         (line  48)
* mutable/1 (built-in, ref page):        mpg-ref-mutable.     (line   6)
* mutex:                                 OS Threads.          (line  11)
* mutual exclusion locks:                OS Threads.          (line  11)
* mzn-sicstus(1) (command line tool):    too-mzn-sicstus.     (line   6)
* mzn_load_file/[2,3] (zinc):            MiniZinc Exported Predicates.
                                                              (line 223)
* mzn_load_file/[2,3] (zinc) <1>:        MiniZinc Exported Predicates.
                                                              (line 246)
* mzn_run_file/[1,2] (zinc):             MiniZinc Exported Predicates.
                                                              (line 108)
* mzn_run_model/[1,2] (zinc):            MiniZinc Exported Predicates.
                                                              (line 135)
* mzn_to_fzn/[2,3] (zinc):               MiniZinc Exported Predicates.
                                                              (line 295)
* name auto-generation:                  FDBG Name Auto-Generation.
                                                              (line   6)
* name clash:                            ref-mod-ncl.         (line   6)
* name clash (definition):               Glossary.            (line 551)
* name expansion, module:                ref-mod-mne.         (line   6)
* name variable (debugger command):      FDBG Debugger Commands.
                                                              (line  30)
* name, of a functor:                    ref-syn-cpt.         (line  11)
* name/1 (tk_new/2 option):              Basic Functions.     (line  40)
* name/2 (built-in):                     ref-lte-c2t.         (line   6)
* name/2 (built-in) <1>:                 ref-lte-c2t.         (line  26)
* name/2 (built-in, ref page):           mpg-ref-name.        (line   6)
* names of terms:                        FDBG Names of Terms. (line   6)
* names of terms <1>:                    FDBG Naming Terms.   (line   6)
* natural (CHR type):                    CHR Constraint Declaration.
                                                              (line  62)
* neighbors/3 (ugraphs):                 lib-ugraphs.         (line  77)
* neighbors/3 (wgraphs):                 lib-wgraphs.         (line  34)
* neighbours/3 (ugraphs):                lib-ugraphs.         (line  77)
* neighbours/3 (wgraphs):                lib-wgraphs.         (line  34)
* nested execution:                      Nested.              (line   6)
* network path:                          ref-fdi-syn.         (line  69)
* new/[2,3] (structs):                   str-cdf.             (line   6)
* newProlog on Jasper:                   Java Threads.        (line  17)
* newProlog on SICStus:                  Java Threads.        (line  30)
* nextSolution on SPQuery:               Jasper Package Class Reference.
                                                              (line 135)
* nextto/3 (lists):                      lib-lists.           (line  99)
* nl/[0,1] (built-in):                   ref-iou-cou-nln.     (line   6)
* nl/[0,1] (built-in, ref page):         mpg-ref-nl.          (line   6)
* noaux (table/3 method/1 value):        Extensional Constraints.
                                                              (line  65)
* nodebug (CHR debug command):           CHR Tracing.         (line  38)
* nodebug (debugger command):            Debug Commands.      (line 255)
* nodebug/0 (built-in):                  Basic Debug.         (line  98)
* nodebug/0 (built-in, ref page):        mpg-ref-nodebug.     (line   6)
* nodebug_message/0 (objects):           obj-exp-nodebug_message.
                                                              (line   6)
* non-backtraced tests:                  Breakpoint Conditions.
                                                              (line  13)
* nondet/0 (plunit option):              PlUnit A Unit Test Box.
                                                              (line  57)
* nondeterminacy, declaring:             Declaring Nondeterminacy.
                                                              (line   6)
* nondeterminacy, finding:               The Determinacy Checker.
                                                              (line   6)
* none (--main option value):            too-spld.            (line 110)
* none (absolute_file_name/3 access):    mpg-ref-absolute_file_name.
                                                              (line 155)
* nonmember/2 (built-in):                ref-lte-acl.         (line  24)
* nonmember/2 (built-in, ref page):      mpg-ref-nonmember.   (line   6)
* nonvar/1 (built-in, ref page):         mpg-ref-nonvar.      (line   6)
* nonvar/1 (when/2 condition):           mpg-ref-when.        (line  18)
* normalize/2 (statistics):              lib-statistics.      (line 126)
* nospy this (debugger command):         Debug Commands.      (line 274)
* nospy/1 (built-in):                    Plain Spypoint.      (line  43)
* nospy/1 (built-in, ref page):          mpg-ref-nospy.       (line   6)
* nospyall/0 (built-in):                 Plain Spypoint.      (line  50)
* nospyall/0 (built-in, ref page):       mpg-ref-nospyall.    (line   6)
* notation:                              Notation.            (line   6)
* notation <1>:                          ref-syn-syn-not.     (line   6)
* notrace/0 (built-in):                  Basic Debug.         (line  98)
* notrace/0 (built-in, ref page):        mpg-ref-notrace.     (line   6)
* now/1 (system):                        lib-system.          (line  13)
* nozip/0 (built-in):                    Basic Debug.         (line  98)
* nozip/0 (built-in, ref page):          mpg-ref-nozip.       (line   6)
* nth0/[3,4] (lists):                    lib-lists.           (line 106)
* nth1/[3,4] (lists):                    lib-lists.           (line 112)
* null streams:                          ref-iou-sfh-opn.     (line  80)
* null_foreign_term/2 (structs):         str-nul.             (line   6)
* number (CHR type):                     CHR Constraint Declaration.
                                                              (line  59)
* number/1 (built-in, ref page):         mpg-ref-number.      (line   6)
* numbers, comparison of:                ref-ari-acm.         (line   6)
* numbervars:                            lib-varnumbers.      (line   6)
* numbervars/1 (varnumbers):             lib-varnumbers.      (line  40)
* numbervars/1 (write_term/[2,3] option): mpg-ref-write_term. (line  62)
* numbervars/3 (built-in):               ref-lte-anv.         (line   6)
* numbervars/3 (built-in, ref page):     mpg-ref-numbervars.  (line   6)
* number_chars/2 (built-in):             ref-lte-c2t.         (line   6)
* number_chars/2 (built-in) <1>:         ref-lte-c2t.         (line  22)
* number_chars/2 (built-in, ref page):   mpg-ref-number_chars.
                                                              (line   6)
* number_codes/2 (built-in):             ref-lte-c2t.         (line   6)
* number_codes/2 (built-in) <1>:         ref-lte-c2t.         (line  16)
* number_codes/2 (built-in, ref page):   mpg-ref-number_codes.
                                                              (line   6)
* numlist/[2,3,5] (between):             lib-between.         (line  34)
* nvalue/2 (clpfd):                      Arithmetic-Logical Constraints.
                                                              (line 165)
* Object:                                Terminology.         (line  29)
* object (absolute_file_name/3 file type): mpg-ref-absolute_file_name.
                                                              (line  71)
* object, stream:                        ref-iou-sfh-sob.     (line   6)
* object, stream position:               ref-iou-raf.         (line  20)
* objects (library package):             lib-objects.         (line  16)
* occurrence (labeling/2 option):        Enumeration Predicates.
                                                              (line  93)
* occurrences_of_term/3 (terms):         lib-terms.           (line 218)
* occurrences_of_var/3 (terms):          lib-terms.           (line 238)
* occurs-check:                          ref-sem-occ.         (line   6)
* occurs-check (definition):             Glossary.            (line 555)
* odbc_db_open/3 (odbc):                 ODBC Predicates.     (line  12)
* odbc_db_open/4 (odbc):                 ODBC Predicates.     (line  17)
* odbc_db_open/5 (odbc):                 ODBC Predicates.     (line  43)
* odbc_env_open/1 (odbc):                ODBC Predicates.     (line   8)
* odbc_list_DSN/2 (odbc):                ODBC Predicates.     (line  50)
* off (debug flag value):                ref-lps-flg.         (line  83)
* off (debugging flag value):            ref-lps-flg.         (line  76)
* off (debugging flag value) <1>:        mpg-ref-debugging.   (line  39)
* off (fileerrors flag value):           ref-ere-err-exi.     (line  43)
* off (gc_trace flag value):             ref-lps-flg.         (line 180)
* off (profiling flag value):            ref-lps-flg.         (line  94)
* off (redefine_warnings flag value):    ref-lps-flg.         (line 303)
* off/0 (debugger mode control):         Action Variables.    (line 126)
* on (debug flag value):                 ref-lps-flg.         (line  86)
* on (fileerrors flag value):            ref-ere-err-exi.     (line  39)
* on (profiling flag value):             ref-lps-flg.         (line  97)
* on (redefine_warnings flag value):     ref-lps-flg.         (line 300)
* on/1 (all_different/2 option):         Arithmetic-Logical Constraints.
                                                              (line 148)
* on/1 (all_distinct/2 option):          Arithmetic-Logical Constraints.
                                                              (line 148)
* on/1 (assignment/3 option):            Arithmetic-Logical Constraints.
                                                              (line 190)
* on/1 (global_cardinality/3 option):    Arithmetic-Logical Constraints.
                                                              (line  80)
* once/1:                                ref-sem-ctr-ite.     (line  39)
* once/1 (built-in, ref page):           mpg-ref-once.        (line   6)
* one of List (argument type):           mpg-ref-aty-ety.     (line  16)
* one-char atom (definition):            Glossary.            (line 559)
* one_longer/2 (lists):                  lib-lists.           (line 136)
* on_exception/3 (built-in):             ref-ere-leg.         (line  12)
* on_exception/3 (built-in, ref page):   mpg-ref-on_exception.
                                                              (line   6)
* op/1 (lex_chain/2 option):             Arithmetic-Logical Constraints.
                                                              (line 285)
* op/3 (built-in):                       ref-syn-ops-ops.     (line   6)
* op/3 (built-in, ref page):             mpg-ref-op.          (line   6)
* open (Tcl command):                    Commands.            (line 578)
* open/[3,4] (built-in):                 ref-iou-sfh-sob.     (line  37)
* open/[3,4] (built-in) <1>:             ref-iou-sfh-opn.     (line   6)
* open/[3,4] (built-in, ref page):       mpg-ref-open.        (line   6)
* opening a file:                        ref-iou-sfh-opn.     (line   6)
* openQuery on SICStus:                  Jasper Package Class Reference.
                                                              (line 106)
* openQuery on SICStus <1>:              Jasper Package Class Reference.
                                                              (line 121)
* openQuery on SICStus <2>:              Jasper Package Class Reference.
                                                              (line 127)
* open_codes_stream/2 (codesio):         lib-codesio.         (line  44)
* open_null_stream/1 (built-in):         ref-iou-sfh-opn.     (line  80)
* open_null_stream/1 (built-in, ref page): mpg-ref-open_null_stream.
                                                              (line   6)
* operator (definition):                 Glossary.            (line 562)
* operator declaration:                  ref-lod-dcl.         (line  17)
* operators:                             mpg-ref-op.          (line  46)
* operators, associativity of:           ref-syn-ops-ove.     (line  38)
* operators, built-in:                   ref-syn-ops-ove.     (line  78)
* operators, built-in <1>:               ref-syn-ops-bop.     (line   6)
* operators, built-in predicates for handling: ref-syn-ops-ops.
                                                              (line   6)
* operators, current:                    ref-syn-ops-ops.     (line  15)
* operators, declaring:                  ref-syn-ops-ops.     (line   6)
* operators, infix:                      ref-syn-cpt.         (line  52)
* operators, infix <1>:                  ref-syn-ops-ove.     (line  25)
* operators, list of:                    ref-syn-ops-bop.     (line   6)
* operators, postfix:                    ref-syn-cpt.         (line  52)
* operators, postfix <1>:                ref-syn-ops-ove.     (line  25)
* operators, precedence of:              ref-syn-ops-ove.     (line  25)
* operators, prefix:                     ref-syn-cpt.         (line  52)
* operators, prefix <1>:                 ref-syn-ops-ove.     (line  25)
* operators, reference page convention:  mpg-ref-cat.         (line  75)
* operators, syntax restrictions on:     ref-syn-ops-res.     (line   6)
* operators, type of:                    ref-syn-ops-ove.     (line  38)
* optimality (labeling/2 time_out/2 option value): Enumeration Predicates.
                                                              (line 254)
* optimise/1 (zinc option):              MiniZinc Exported Predicates.
                                                              (line  57)
* optimization, last call:               Last Call Optimization.
                                                              (line   6)
* optimize (CHR flag):                   CHR Debugging Predicates.
                                                              (line  46)
* optimize (CHR option):                 CHR Semantics.       (line  94)
* optimize/1 (zinc option):              MiniZinc Exported Predicates.
                                                              (line  57)
* or:                                    ref-sem-ctr-dis.     (line   6)
* order (argument type):                 mpg-ref-aty-ety.     (line  24)
* order on terms, standard:              ref-lte-cte-sot.     (line   6)
* order/1 (table/3 option):              Extensional Constraints.
                                                              (line  48)
* ordered/[1,2] (lists):                 lib-lists.           (line 674)
* ordering/1 (clpqr):                    CLPQR Solver Predicates.
                                                              (line 182)
* ordering/1 (clpqr) <1>:                CLPQR Variable Ordering.
                                                              (line   6)
* ordset_order/3 (ordsets):              lib-ordsets.         (line 124)
* ord_add_element/3 (ordsets):           lib-ordsets.         (line  37)
* ord_del_element/3 (ordsets):           lib-ordsets.         (line  40)
* ord_disjoint/2 (ordsets):              lib-ordsets.         (line  44)
* ord_disjoint_union/3 (ordsets):        lib-ordsets.         (line 101)
* ord_intersect/2 (ordsets):             lib-ordsets.         (line  47)
* ord_intersection/[2,3,4] (ordsets):    lib-ordsets.         (line  51)
* ord_list_to_assoc/2 (assoc):           lib-assoc.           (line  82)
* ord_list_to_avl/2 (avl):               lib-avl.             (line 124)
* ord_member/2 (ordsets):                lib-ordsets.         (line  62)
* ord_nonmember/2 (ordsets):             lib-ordsets.         (line  65)
* ord_seteq/2 (ordsets):                 lib-ordsets.         (line  68)
* ord_setproduct/3 (ordsets):            lib-ordsets.         (line  72)
* ord_subset/2 (ordsets):                lib-ordsets.         (line  89)
* ord_subtract/3 (ordsets):              lib-ordsets.         (line  93)
* ord_symdiff/3 (ordsets):               lib-ordsets.         (line  97)
* ord_union/[2,3,4] (ordsets):           lib-ordsets.         (line 109)
* os_data (prolog flag):                 ref-lps-flg.         (line 235)
* otherwise/0 (built-in, ref page):      mpg-ref-otherwise.   (line   6)
* out (debugger command):                Debug Commands.      (line  98)
* out/1 (linda_client):                  lib-linda-client.    (line  62)
* output:                                ref-iou.             (line  18)
* output stream, current:                ref-iou-sfh-sob.     (line  37)
* output, current:                       ref-iou-str.         (line  15)
* output, flushing:                      ref-iou-sfh-flu.     (line   6)
* output, term:                          ref-iou-tou.         (line  15)
* output/0 (stream property):            mpg-ref-stream_property.
                                                              (line  43)
* output/1 (zinc option):                FlatZinc Exported Predicates.
                                                              (line 235)
* output/1 (zinc option) <1>:            MiniZinc Exported Predicates.
                                                              (line  41)
* output_encoding/1 (stream property):   mpg-ref-stream_property.
                                                              (line  77)
* overflow (FD flag):                    The Global Constraint Programming Interface.
                                                              (line 142)
* overlap/1 (geost/[2,3,4] option):      Placement Constraints.
                                                              (line 276)
* overlap/1 (geost/[2,3,4] option) <1>:  Placement Constraints.
                                                              (line 282)
* ozn_file/1 (zinc option):              FlatZinc Exported Predicates.
                                                              (line 240)
* ozn_file/1 (zinc option) <1>:          MiniZinc Exported Predicates.
                                                              (line  51)
* pair (argument type):                  mpg-ref-aty-ety.     (line  25)
* pair (definition):                     Glossary.            (line 593)
* pairfrom/4 (sets):                     lib-sets.            (line  37)
* pallet_loading/1 (geost/[2,3,4] option): Placement Constraints.
                                                              (line 270)
* param /1, (iterator):                  ref-sem-ctr-dol.     (line 220)
* param/1 (iterator):                    mpg-ref-do.          (line  64)
* parameter, accumulating:               Accumulating Parameters.
                                                              (line   6)
* parameters/1 (zinc option):            MiniZinc Exported Predicates.
                                                              (line  15)
* parconflict/1 (geost/[2,3,4] option):  Placement Constraints.
                                                              (line 222)
* parent (definition):                   Glossary.            (line 597)
* parent_clause/1 (debugger condition):  Breakpoint Tests.    (line 263)
* parent_clause/1 (debugger condition) <1>: Source Tests.     (line  20)
* parent_clause/2 (debugger condition):  Breakpoint Tests.    (line 263)
* parent_clause/2 (debugger condition) <1>: Source Tests.     (line  22)
* parent_clause/3 (debugger condition):  Breakpoint Tests.    (line 263)
* parent_clause/3 (debugger condition) <1>: Source Tests.     (line  25)
* parent_inv/1 (debugger condition):     Accessing Past Debugger States.
                                                              (line 123)
* parent_inv/1 (debugger condition) <1>: Goal Tests.          (line  36)
* parent_pred/1 (debugger condition):    Breakpoint Tests.    (line 236)
* parent_pred/1 (debugger condition) <1>: Source Tests.       (line  30)
* parent_pred/2 (debugger condition):    Breakpoint Tests.    (line 236)
* parent_pred/2 (debugger condition) <1>: Source Tests.       (line  32)
* parsing phrases:                       mpg-ref-phrase.      (line  41)
* partial list (definition):             Glossary.            (line 473)
* partition/5 (lists):                   lib-lists.           (line 652)
* passive/1 (CHR pragma):                CHR Semantics.       (line  69)
* password/1 (odbc_db_open/4 option):    ODBC Predicates.     (line  24)
* path root:                             ref-fdi-syn.         (line  60)
* path, absolute:                        ref-fdi-syn.         (line  60)
* path, absolute <1>:                    ref-fdi-syn.         (line  78)
* path, case-normalized:                 ref-fdi-syn.         (line  98)
* path, network:                         ref-fdi-syn.         (line  69)
* path, UNC:                             ref-fdi-syn.         (line  69)
* path/3 (ugraphs):                      lib-ugraphs.         (line 135)
* path/3 (wgraphs):                      lib-wgraphs.         (line 125)
* peek_byte/[1,2] (built-in):            ref-iou-cin-pee.     (line   9)
* peek_byte/[1,2] (built-in, ref page):  mpg-ref-peek_byte.   (line   6)
* peek_char/[1,2] (built-in):            ref-iou-cin-pee.     (line  16)
* peek_char/[1,2] (built-in, ref page):  mpg-ref-peek_char.   (line   6)
* peek_code/[1,2] (built-in):            ref-iou-cin-pee.     (line  12)
* peek_code/[1,2] (built-in, ref page):  mpg-ref-peek_code.   (line   6)
* perm/2 (lists):                        lib-lists.           (line 143)
* perm2/4 (lists):                       lib-lists.           (line 157)
* permission errors:                     ref-ere-err-per.     (line   6)
* permission_error/[3,5] (error class):  ref-ere-err.         (line 143)
* permutation/1 (keysorting/3 option):   Arithmetic-Logical Constraints.
                                                              (line 266)
* permutation/2 (lists):                 lib-lists.           (line 149)
* phrase/[2,3] (built-in):               ref-gru-exa.         (line  30)
* phrase/[2,3] (built-in, ref page):     mpg-ref-phrase.      (line   6)
* pi /0, pi (evaluable):                 ref-ari-aex.         (line 301)
* placement of cut:                      Placement of Cuts.   (line   6)
* plain spypoint:                        Plain Spypoint.      (line   6)
* plain spypoint <1>:                    Creating Breakpoints.
                                                              (line  16)
* platform_data (prolog flag):           ref-lps-flg.         (line 261)
* pltrace-break (emacs command):         Usage.               (line 157)
* plus infinity, sup:                    CLPFD Interface.     (line  22)
* PO file (definition):                  Glossary.            (line 653)
* PO files:                              ref-sls-ove.         (line   6)
* PO files, loading:                     ref-sls-ssl.         (line   6)
* PO files, saving:                      ref-sls-ssl.         (line   6)
* pointer_object/2 (objects):            obj-exp-pointer_object.
                                                              (line   6)
* polymorphism/1 (geost/[2,3,4] option): Placement Constraints.
                                                              (line 263)
* population_standard_deviation/2 (statistics): lib-statistics.
                                                              (line  89)
* population_variance/2 (statistics):    lib-statistics.      (line  73)
* port (definition):                     Glossary.            (line 602)
* port debugger:                         Procedure Box.       (line  34)
* port, debugger:                        Port Tests.          (line  11)
* port/1 (debugger condition):           Breakpoint Tests.    (line 301)
* port/1 (debugger condition) <1>:       Port Tests.          (line  23)
* port/1 (start/1 option):               PB Prolog Server Interface.
                                                              (line  20)
* portable (quoted_charset flag value):  ref-lps-flg.         (line 120)
* portray/1 (hook, ref page):            mpg-ref-portray.     (line   6)
* portray/1 (user, hook):                ref-iou-tou-por.     (line   6)
* portray/1 (user, hook) <1>:            CLPQR Fragments and Bits.
                                                              (line  12)
* portrayed/1 (write_term/[2,3] option): mpg-ref-write_term.  (line  48)
* portray_assoc/1 (assoc):               lib-assoc.           (line 117)
* portray_avl/1 (avl):                   lib-avl.             (line  65)
* portray_bag/1 (bags):                  lib-bags.            (line  42)
* portray_clause/[1,2] (built-in):       ref-iou-tou-pcl.     (line   6)
* portray_clause/[1,2] (built-in, ref page): mpg-ref-portray_clause.
                                                              (line   6)
* portray_message/2 (hook, ref page):    mpg-ref-portray_message.
                                                              (line   6)
* portray_message/2 (user, hook):        Message Handling Predicates.
                                                              (line  14)
* portray_queue/1 (queues):              lib-queues.          (line  31)
* position in a stream:                  ref-iou-raf.         (line   6)
* position, stream:                      ref-iou-sos.         (line  10)
* position, stream (definition):         Glossary.            (line 809)
* position/1 (stream property):          mpg-ref-stream_property.
                                                              (line  50)
* post/1 (zinc option):                  MiniZinc Exported Predicates.
                                                              (line  21)
* postfix operators:                     ref-syn-cpt.         (line  52)
* postfix operators <1>:                 ref-syn-ops-ove.     (line  25)
* posting constraints:                   Posting Constraints. (line   6)
* power_set/2 (sets):                    lib-sets.            (line  75)
* precedence (definition):               Glossary.            (line 610)
* precedence, of operators:              ref-syn-ops-ove.     (line  25)
* precedences/1 (cumulative/2 option):   Scheduling Constraints.
                                                              (line  39)
* precedences/1 (multi_cumulatives/3 option): Scheduling Constraints.
                                                              (line 170)
* pred/1 (debugger condition):           Creating Breakpoints.
                                                              (line  16)
* pred/1 (debugger condition) <1>:       Goal Tests.          (line  20)
* predicate:                             ref-sem-pro.         (line   6)
* predicate (definition):                Glossary.            (line 619)
* predicate declaration:                 ref-lod-dcl.         (line   6)
* predicate spec (definition):           Glossary.            (line 627)
* predicate spec, generalized (definition): Glossary.         (line 324)
* predicate, built-in (definition):      Glossary.            (line  99)
* predicate, dynamic (definition):       Glossary.            (line 260)
* predicate, extendible (definition):    Glossary.            (line 373)
* predicate, FD:                         User-Defined Constraints.
                                                              (line  17)
* predicate, FD <1>:                     FD Predicates.       (line   6)
* predicate, foreign (definition):       Glossary.            (line 302)
* predicate, hook:                       Multifile Declarations.
                                                              (line  15)
* predicate, hook (definition):          Glossary.            (line 377)
* predicate, hookable (definition):      Glossary.            (line 383)
* predicate, meta-logical (definition):  Glossary.            (line 509)
* predicate, multifile (definition):     Glossary.            (line 541)
* predicate, public:                     ref-mod-def.         (line   6)
* predicate, static (definition):        Glossary.            (line 786)
* predicate, steadfast (definition):     Glossary.            (line 790)
* predicate, undefined:                  Undefined Predicates.
                                                              (line   6)
* predicate, undefined <1>:              ref-lps-flg.         (line 371)
* predicate, undefined <2>:              mpg-ref-unknown_predicate_handler.
                                                              (line  15)
* predicates defined in modules:         ref-mod-ilm-def.     (line   6)
* predicates exported from modules:      ref-mod-ilm-def.     (line  13)
* predicates for all solutions:          ref-all-sum.         (line   6)
* predicates for all solutions <1>:      mpg-top-all.         (line   6)
* predicates for arithmetic:             ref-ari-sum.         (line   6)
* predicates for arithmetic <1>:         mpg-top-ari.         (line   6)
* predicates for character I/O:          ref-iou-sum.         (line   9)
* predicates for character I/O <1>:      mpg-top-cio.         (line   6)
* predicates for control:                ref-sem-con.         (line   6)
* predicates for control <1>:            mpg-top-con.         (line   6)
* predicates for database:               ref-mdb-sum.         (line   6)
* predicates for database <1>:           mpg-top-dat.         (line   6)
* predicates for debugging:              Debug Summary.       (line   6)
* predicates for debugging <1>:          mpg-top-deb.         (line   6)
* predicates for execution state:        ref-ere-sum.         (line   6)
* predicates for execution state <1>:    mpg-top-est.         (line   6)
* predicates for file and stream handling: ref-iou-sum.       (line  80)
* predicates for file and stream handling <1>: mpg-top-fsh.   (line   6)
* predicates for filename manipulation:  ref-fdi-pre.         (line   8)
* predicates for filename manipulation <1>: mpg-top-fnm.      (line   6)
* predicates for foreign interface:      mpg-top-fin.         (line   6)
* predicates for grammar rules:          ref-gru-sum.         (line   6)
* predicates for grammar rules <1>:      mpg-top-gru.         (line   6)
* predicates for list processing:        ref-lte-sum.         (line 152)
* predicates for list processing <1>:    mpg-top-lis.         (line   6)
* predicates for loading programs:       ref-lod-lis.         (line   8)
* predicates for loading programs <1>:   mpg-top-lod.         (line   6)
* predicates for looking at terms:       ref-lte.             (line  18)
* predicates for memory:                 ref-mgc-sum.         (line   6)
* predicates for memory <1>:             mpg-top-mem.         (line   6)
* predicates for messages and queries:   Message Summary.     (line   6)
* predicates for messages and queries <1>: mpg-top-msg.       (line   6)
* predicates for modules:                ref-mod-sum.         (line   6)
* predicates for modules <1>:            mpg-top-mod.         (line   6)
* predicates for processing lists:       ref-lte-acl.         (line   6)
* predicates for program state:          ref-lps-sum.         (line   6)
* predicates for program state <1>:      mpg-top-sta.         (line   6)
* predicates for saving programs:        ref-sls-lis.         (line   8)
* predicates for saving programs <1>:    mpg-top-eqs.         (line   6)
* predicates for term comparison:        ref-lte-sum.         (line  46)
* predicates for term comparison <1>:    mpg-top-tcm.         (line   6)
* predicates for term handling:          ref-lte-sum.         (line  69)
* predicates for term handling <1>:      mpg-top-tha.         (line   6)
* predicates for term I/O:               ref-iou-sum.         (line 158)
* predicates for term I/O <1>:           mpg-top-tio.         (line   6)
* predicates for type tests:             ref-lte-met-typ.     (line   6)
* predicates for type tests <1>:         ref-lte-met-typ.     (line  10)
* predicates for type tests <2>:         ref-lte-sum.         (line   6)
* predicates for type tests <3>:         mpg-top-typ.         (line   6)
* predicates imported into modules:      ref-mod-ilm-vis.     (line   6)
* predicates, annotations:               mpg-ref-cat.         (line   6)
* predicates, assertion and retraction:  ref-mdb-bas.         (line   6)
* predicates, breakpoint handling:       Breakpoint Predicates.
                                                              (line   6)
* predicates, debugging:                 Basic Debug.         (line   6)
* predicates, hook:                      mpg-top-hok.         (line   6)
* predicates, importing dynamic:         ref-mod-idp.         (line   6)
* predicates, meta-logical:              ref-lte-met.         (line  11)
* predicates, private:                   ref-mod-bas.         (line   9)
* predicates, public:                    ref-mod-bas.         (line   9)
* predicates, read:                      ref-iou-tin-trm.     (line   6)
* predicates, write:                     ref-iou-tou-wrt.     (line   6)
* predicate_property/2 (built-in):       ref-lps-app.         (line   6)
* predicate_property/2 (built-in) <1>:   ref-mod-ilm-vis.     (line  12)
* predicate_property/2 (built-in) <2>:   ref-mod-ilm-vis.     (line  17)
* predicate_property/2 (built-in) <3>:   ref-mod-ilm-vis.     (line  42)
* predicate_property/2 (built-in, ref page): mpg-ref-predicate_property.
                                                              (line   6)
* pred_spec (argument type):             mpg-ref-aty-ety.     (line  27)
* pred_spec_forest (argument type):      mpg-ref-aty-ety.     (line  28)
* pred_spec_tree (argument type):        mpg-ref-aty-ety.     (line  31)
* prefix operators:                      ref-syn-cpt.         (line  52)
* prefix operators <1>:                  ref-syn-ops-ove.     (line  25)
* prefix/2 (lists):                      lib-lists.           (line 370)
* prefix_length/3 (lists):               lib-lists.           (line 286)
* preinit (function annotation):         cpg-rve.             (line  29)
* prelinked foreign resource (definition): Glossary.          (line 606)
* prelinked resource:                    Foreign Resources.   (line  42)
* principal functor:                     ref-lte-act.         (line   6)
* principal functor (definition):        ref-syn-cpt.         (line  11)
* print (debugger command):              Debug Commands.      (line 185)
* print/0 (debugger show control):       Action Variables.    (line  16)
* print/[1,2] (built-in):                ref-iou-tou-dsp.     (line   6)
* print/[1,2] (built-in, ref page):      mpg-ref-print.       (line   6)
* printing clauses:                      ref-iou-tou-pcl.     (line   6)
* printing, formatted:                   ref-iou-cou-fou.     (line   6)
* print_coverage/[0,1] (built-in):       Coverage Analysis.   (line  44)
* print_coverage/[0,1] (built-in, ref page): mpg-ref-print_coverage.
                                                              (line   6)
* print_message/2 (built-in):            Message Handling Predicates.
                                                              (line   8)
* print_message/2 (built-in, ref page):  mpg-ref-print_message.
                                                              (line   6)
* print_message_lines/3 (built-in):      Message Handling Predicates.
                                                              (line  37)
* print_message_lines/3 (built-in, ref page): mpg-ref-print_message_lines.
                                                              (line   6)
* print_profile/[0,1] (built-in):        Execution Profiling. (line  57)
* print_profile/[0,1] (built-in, ref page): mpg-ref-print_profile.
                                                              (line   6)
* priority/1 (write_term/[2,3] option):  mpg-ref-write_term.  (line 106)
* private predicates:                    ref-mod-bas.         (line   9)
* private/1 (debugger condition):        Storing User Information in the Backtrace.
                                                              (line   6)
* private/1 (debugger condition) <1>:    Break Tests.         (line  17)
* proc (Tcl command):                    Commands.            (line 651)
* procedural modularity:                 ref-mod-ove.         (line  26)
* procedural semantics:                  ref-sem-sec.         (line   6)
* procedural semantics <1>:              ref-sem-sec.         (line  30)
* procedure:                             ref-sem-pro.         (line  96)
* procedure (definition):                Glossary.            (line 631)
* procedure box:                         Procedure Box.       (line   6)
* procedure box (definition):            Glossary.            (line 641)
* procedure call:                        ref-sem-pro.         (line   6)
* procedure call <1>:                    ref-sem-sec.         (line  98)
* procedure definition:                  ref-sem-sec.         (line  93)
* procedures, dynamic and static:        ref-mdb-dsp.         (line   6)
* procedures, redefining during execution: ref-lod-rpx.       (line   6)
* procedures, removing properties:       mpg-ref-abolish.     (line  51)
* procedures, self-modifying:            ref-mdb-bas.         (line  15)
* procedures, self-modifying <1>:        ref-mdb-exa.         (line  12)
* proceed (redefine_warnings flag value): ref-lps-flg.        (line 310)
* proceed/0 (debugger command control):  Action Variables.    (line  35)
* proceed/2 (debugger command control):  Action Variables.    (line  43)
* process communication:                 lib-linda.           (line   6)
* process communication <1>:             lib-sockets.         (line   6)
* processing, breakpoint:                Breakpoint Processing.
                                                              (line   6)
* process_create/[2,3] (process):        lib-process.         (line 275)
* process_id/1 (process):                lib-process.         (line 448)
* process_id/2 (process):                lib-process.         (line 451)
* process_kill/[1,2] (process):          lib-process.         (line 470)
* process_release/1 (process):           lib-process.         (line 458)
* process_wait/[2,3] (process):          lib-process.         (line 406)
* profile_data/1 (built-in):             Execution Profiling. (line  51)
* profile_data/1 (built-in, ref page):   mpg-ref-profile_data.
                                                              (line   6)
* profile_reset/0 (built-in):            Execution Profiling. (line  47)
* profile_reset/0 (built-in) <1>:        Coverage Analysis.   (line  33)
* profile_reset/0 (built-in, ref page):  mpg-ref-profile_reset.
                                                              (line   6)
* profiling:                             lib-gauge.           (line   6)
* profiling (definition):                Glossary.            (line 645)
* profiling (prolog flag):               ref-lps-flg.         (line  90)
* profiling (prolog flag) <1>:           Runtime Systems.     (line  35)
* profiling, execution:                  Execution Profiling. (line   6)
* ProgID:                                Terminology.         (line   7)
* program (definition):                  Glossary.            (line 650)
* program (statistics key):              ref-mgc-ove-sta.     (line 133)
* program space:                         ref-mgc-ove.         (line  32)
* program state:                         Saving.              (line   6)
* program state, predicates for:         ref-lps-sum.         (line   6)
* program state, predicates for <1>:     mpg-top-sta.         (line   6)
* program, loading:                      ref-sem-con.         (line  78)
* programming in logic:                  Intro.               (line  12)
* projecting_assert/1 (clpqr):           CLPQR Solver Predicates.
                                                              (line 222)
* project_attributes/2 (Module):         lib-atts.            (line 134)
* prolog (--main option value):          too-spld.            (line  78)
* prolog (quoted_charset flag value):    ref-lps-flg.         (line 125)
* prolog-backward-list (emacs command):  Usage.               (line 109)
* prolog-beginning-of-clause (emacs command): Usage.          (line  78)
* prolog-beginning-of-predicate (emacs command): Usage.       (line  88)
* prolog-debug-on (emacs command):       Usage.               (line 122)
* prolog-end-of-clause (emacs command):  Usage.               (line  82)
* prolog-end-of-predicate (emacs command): Usage.             (line  91)
* prolog-forward-list (emacs command):   Usage.               (line 106)
* prolog-help-on-predicate (emacs command): Usage.            (line 179)
* prolog-insert-next-clause (emacs command): Usage.           (line 169)
* prolog-insert-predicate-template (emacs command): Usage.    (line 165)
* prolog-insert-predspec (emacs command): Usage.              (line 162)
* prolog-mark-clause (emacs command):    Usage.               (line  85)
* prolog-mark-predicate (emacs command): Usage.               (line  94)
* prolog-trace-on (emacs command):       Usage.               (line 118)
* prolog-variables-to-anonymous (emacs command): Usage.       (line 175)
* prolog-zip-on (emacs command):         Usage.               (line 126)
* PROLOGINCSIZE (system property):       System Properties and Environment Variables.
                                                              (line 196)
* PROLOGINITSIZE (system property):      ref-mgc-ove-rsp.     (line  16)
* PROLOGINITSIZE (system property) <1>:  System Properties and Environment Variables.
                                                              (line 181)
* PROLOGKEEPSIZE (system property):      ref-mgc-ove-rsp.     (line  16)
* PROLOGKEEPSIZE (system property) <1>:  System Properties and Environment Variables.
                                                              (line 202)
* PROLOGMAXSIZE (system property):       System Properties and Environment Variables.
                                                              (line 188)
* prolog_flag/[2,3] (built-in):          ref-iou-tin-trm.     (line  40)
* prolog_flag/[2,3] (built-in, ref page): mpg-ref-prolog_flag.
                                                              (line   6)
* prolog_load_context/2 (built-in, ref page): mpg-ref-prolog_load_context.
                                                              (line   6)
* prompt, changing:                      ref-iou-tin-cpr.     (line   6)
* prompt/2 (built-in):                   ref-iou-tin-cpr.     (line   6)
* prompt/2 (built-in, ref page):         mpg-ref-prompt.      (line   6)
* propagating indexicals:                Indexicals.          (line  11)
* proper list (definition):              Glossary.            (line 473)
* property, stream:                      mpg-ref-stream_property.
                                                              (line  24)
* property, stream (definition):         Glossary.            (line 818)
* proper_length/2 (lists):               lib-lists.           (line 161)
* proper_prefix/2 (lists):               lib-lists.           (line 376)
* proper_prefix_length/3 (lists):        lib-lists.           (line 296)
* proper_segment/2 (lists):              lib-lists.           (line 404)
* proper_suffix/2 (lists):               lib-lists.           (line 388)
* proper_suffix_length/3 (lists):        lib-lists.           (line 316)
* prototype, function:                   Function Prototypes. (line   6)
* prune/1 (cumulatives/3 option):        Scheduling Constraints.
                                                              (line 102)
* prunings (fd_statistics/2 option):     Statistics Predicates.
                                                              (line  30)
* prunings (zinc option value):          FlatZinc Exported Predicates.
                                                              (line 271)
* prunings (zinc option value) <1>:      MiniZinc Exported Predicates.
                                                              (line  85)
* public declaration:                    Public Declarations. (line   6)
* public predicate:                      ref-mod-def.         (line   6)
* public predicates:                     ref-mod-bas.         (line   9)
* public/1 (built-in, ref page):         mpg-ref-public.      (line   6)
* public/1 (declaration):                Public Declarations. (line   6)
* puts (Tcl command):                    Commands.            (line 624)
* put_assoc/4 (assoc):                   lib-assoc.           (line 124)
* put_atts/2 (Module):                   lib-atts.            (line  52)
* put_byte/[1,2] (built-in):             ref-iou-cou-cha.     (line   6)
* put_byte/[1,2] (built-in, ref page):   mpg-ref-put_byte.    (line   6)
* put_char/[1,2] (built-in):             ref-iou-cou-cha.     (line  12)
* put_char/[1,2] (built-in, ref page):   mpg-ref-put_char.    (line   6)
* put_code/[1,2] (built-in):             ref-iou-cou-cha.     (line   9)
* put_code/[1,2] (built-in, ref page):   mpg-ref-put_code.    (line   6)
* put_contents/3 (structs):              str-afd.             (line   6)
* put_label/[4,5] (trees):               lib-trees.           (line  32)
* qskip/1 (debugger mode control):       Action Variables.    (line 109)
* quantifier, existential:               ref-all-cse-equ.     (line   6)
* quasi-skip (debugger command):         Debug Commands.      (line 106)
* query:                                 Start.               (line  44)
* query <1>:                             Queries and Directives.
                                                              (line   6)
* query <2>:                             ref-sem-pro.         (line  53)
* query (definition):                    Glossary.            (line 660)
* query on SICStus:                      Jasper Package Class Reference.
                                                              (line  41)
* query on SICStus <1>:                  Jasper Package Class Reference.
                                                              (line  51)
* query on SICStus <2>:                  Jasper Package Class Reference.
                                                              (line  82)
* query, floundered (definition):        Glossary.            (line 299)
* queryCutFail on SICStus:               Jasper Package Class Reference.
                                                              (line  85)
* queryCutFail on SICStus <1>:           Jasper Package Class Reference.
                                                              (line  96)
* queryCutFail on SICStus <2>:           Jasper Package Class Reference.
                                                              (line 102)
* query_abbreviation/3 (built-in, ref page): mpg-ref-query_abbreviation.
                                                              (line   6)
* query_abbreviation/3 (SU_messages):    Query Handling Predicates.
                                                              (line  34)
* query_class/5 (built-in, ref page):    mpg-ref-query_class. (line   6)
* query_class/5 (SU_messages):           Query Handling Predicates.
                                                              (line  30)
* query_class_hook/5 (hook, ref page):   mpg-ref-query_class_hook.
                                                              (line   6)
* query_class_hook/5 (user, hook):       Query Handling Predicates.
                                                              (line  23)
* query_hook/6 (hook, ref page):         mpg-ref-query_hook.  (line   6)
* query_hook/6 (user, hook):             Query Handling Predicates.
                                                              (line  16)
* query_input/3 (built-in, ref page):    mpg-ref-query_input. (line   6)
* query_input/3 (SU_messages):           Query Handling Predicates.
                                                              (line  46)
* query_input_hook/3 (hook, ref page):   mpg-ref-query_input_hook.
                                                              (line   6)
* query_input_hook/3 (user, hook):       Query Handling Predicates.
                                                              (line  39)
* query_map/4 (built-in, ref page):      mpg-ref-query_map.   (line   6)
* query_map/4 (SU_messages):             Query Handling Predicates.
                                                              (line  58)
* query_map_hook/4 (hook, ref page):     mpg-ref-query_map_hook.
                                                              (line   6)
* query_map_hook/4 (user, hook):         Query Handling Predicates.
                                                              (line  51)
* queue_append/3 (queues):               lib-queues.          (line  82)
* queue_cons/3 (queues):                 lib-queues.          (line  55)
* queue_head/2 (queues):                 lib-queues.          (line  44)
* queue_last/[2,3] (queues):             lib-queues.          (line  63)
* queue_length/2 (queues):               lib-queues.          (line  98)
* queue_list/2 (queues):                 lib-queues.          (line  93)
* queue_member/2 (queues):               lib-queues.          (line 103)
* queue_memberchk/2 (queues):            lib-queues.          (line 109)
* queue_tail/2 (queues):                 lib-queues.          (line  49)
* quiet (syntax_errors flag value):      ref-lps-flg.         (line 347)
* quiet (syntax_errors flag value) <1>:  ref-ere-err-syn.     (line  36)
* quote characters, in atoms:            ref-syn-trm-ato.     (line  19)
* quoted/1 (write_term/[2,3] option):    mpg-ref-write_term.  (line  33)
* quoted/1, write_term/[2,3] option:     ref-iou-tou-dis.     (line  38)
* quoted_charset (prolog flag):          ref-lps-flg.         (line 116)
* quoted_charset (prolog flag) <1>:      mpg-ref-write_term.  (line  95)
* quoted_charset/1 (write_term/[2,3] option): mpg-ref-write_term.
                                                              (line  95)
* radiobutton (Tk widget):               Types of Widget.     (line  41)
* raise exception (debugger command):    Debug Commands.      (line 347)
* raise/1 (debugger command control):    Action Variables.    (line  81)
* raise_exception/1 (built-in):          ref-ere-leg.         (line  12)
* raise_exception/1 (built-in, ref page): mpg-ref-raise_exception.
                                                              (line   6)
* random access to streams:              ref-iou-raf.         (line   6)
* random/[1,3] (random):                 lib-random.          (line  42)
* random_member/2 (random):              lib-random.          (line  49)
* random_numlist/4 (random):             lib-random.          (line  78)
* random_perm2/4 (random):               lib-random.          (line  73)
* random_permutation/2 (random):         lib-random.          (line  67)
* random_select/3 (random):              lib-random.          (line  53)
* random_subseq/3 (random):              lib-random.          (line  59)
* random_ugraph/3 (ugraphs):             lib-ugraphs.         (line 152)
* random_wgraph/4 (wgraphs):             lib-wgraphs.         (line 145)
* range of floats:                       ref-ari-ove.         (line  15)
* range of integers:                     ref-ari-ove.         (line   6)
* range/2 (statistics):                  lib-statistics.      (line  27)
* range_to_fdset/2 (clpfd):              FD Set Operations.   (line  71)
* raw/1 (odbc_db_open/4 option):         ODBC Predicates.     (line  38)
* rd/[1,2] (linda_client):               lib-linda-client.    (line  86)
* rd_noblock/1 (linda_client):           lib-linda-client.    (line  92)
* reachable/3 (ugraphs):                 lib-ugraphs.         (line 148)
* reachable/3 (wgraphs):                 lib-wgraphs.         (line 140)
* read (absolute_file_name/3 access):    mpg-ref-absolute_file_name.
                                                              (line 132)
* read (open/[3,4] mode):                mpg-ref-open.        (line  29)
* read (Tcl command):                    Commands.            (line 607)
* read predicates:                       ref-iou-tin-trm.     (line   6)
* read/[1,2] (built-in):                 ref-iou-tin-trm.     (line   6)
* read/[1,2] (built-in, ref page):       mpg-ref-read.        (line   6)
* reading a goal from a string:          Reading a goal from a string.
                                                              (line   6)
* reading in:                            Reading In.          (line   6)
* read_from_codes/2 (codesio):           lib-codesio.         (line  34)
* read_line/[1,2] (built-in, ref page):  mpg-ref-read_line.   (line   6)
* read_record/[1,2] (csv):               lib-csv.             (line 100)
* read_records/[1,2] (csv):              lib-csv.             (line 106)
* read_record_from_codes/[2,3] (csv):    lib-csv.             (line 112)
* read_term/[2,3] (built-in):            ref-iou-tin-trm.     (line   6)
* read_term/[2,3] (built-in, ref page):  mpg-ref-read_term.   (line   6)
* read_term_from_codes/3 (codesio):      lib-codesio.         (line  39)
* reclamation, space:                    ref-mgc-ove-rsp.     (line   6)
* reconsult:                             Consult.             (line   6)
* reconsult/1 (built-in, ref page):      mpg-ref-reconsult.   (line   6)
* recorda/3 (built-in):                  ref-mdb-idb.         (line  31)
* recorda/3 (built-in, ref page):        mpg-ref-recorda.     (line   6)
* recorded keys:                         ref-mdb-idb.         (line  42)
* recorded/3 (built-in, ref page):       mpg-ref-recorded.    (line   6)
* recordz/3 (built-in):                  ref-mdb-idb.         (line  35)
* recordz/3 (built-in, ref page):        mpg-ref-recordz.     (line   6)
* recursion (definition):                Glossary.            (line 678)
* red cut:                               ref-sem-ctr-cut.     (line  54)
* redefine_warnings (prolog flag):       ref-lod-lod.         (line  76)
* redefine_warnings (prolog flag) <1>:   ref-lps-flg.         (line 285)
* redefine_warnings (prolog flag) <2>:   Runtime Systems.     (line  30)
* redefining procedures, during execution: ref-lod-rpx.       (line   6)
* redo (CHR port):                       CHR Ports.           (line  20)
* redo (leashing mode):                  Basic Debug.         (line  65)
* redo/0 (debugger port value):          Port Tests.          (line  13)
* redo/1 (debugger command control):     Action Variables.    (line  96)
* reduce/2 (ugraphs):                    lib-ugraphs.         (line 139)
* reduce/2 (wgraphs):                    lib-wgraphs.         (line 130)
* reexit/1 (debugger command control):   Action Variables.    (line  90)
* reference page conventions:            mpg-ref-ove.         (line   6)
* reference, term:                       Mixing C and Prolog. (line  16)
* regexp (Tcl command):                  Commands.            (line 424)
* region (definition):                   Glossary.            (line 683)
* register_event_listener/[2,3] (prologbeans): PB Prolog Server Interface.
                                                              (line 135)
* register_query/[2,3] (prologbeans):    PB Prolog Server Interface.
                                                              (line  73)
* regsub (Tcl command):                  Commands.            (line 467)
* reification:                           Reified Constraints. (line  14)
* reject (redefine_warnings flag value): ref-lps-flg.         (line 307)
* reject (top-level command):            Queries.             (line  44)
* relation/3 (clpfd):                    Extensional Constraints.
                                                              (line  20)
* relative_to/1 (absolute_file_name/3 option): mpg-ref-absolute_file_name.
                                                              (line 220)
* rem /2, integer truncated remainder (evaluable): ref-ari-aex.
                                                              (line  74)
* remove (CHR port):                     CHR Ports.           (line  33)
* remove this (debugger command):        Debug Commands.      (line 282)
* remove_attribute_prefixes/1 (xml_parse/3 option): lib-xml.  (line  87)
* remove_breakpoints/1 (built-in):       Built-in Predicates for Breakpoint Handling.
                                                              (line  43)
* remove_breakpoints/1 (built-in) <1>:   Breakpoint Predicates.
                                                              (line  78)
* remove_breakpoints/1 (built-in, ref page): mpg-ref-remove_breakpoints.
                                                              (line   6)
* remove_dups/2 (lists):                 lib-lists.           (line 166)
* rem_add_link/4 (rem):                  lib-rem.             (line  23)
* rem_create/2 (rem):                    lib-rem.             (line  11)
* rem_equivalent/3 (rem):                lib-rem.             (line  19)
* rem_head/3 (random):                   lib-rem.             (line  15)
* rename_directory/2 (file_systems):     lib-file_systems.    (line  63)
* rename_file/2 (file_systems):          lib-file_systems.    (line  57)
* repeat/0 (built-in, ref page):         mpg-ref-repeat.      (line   6)
* repeat/1 (between):                    lib-between.         (line  29)
* reposition/1 (open/4 option):          mpg-ref-open.        (line  52)
* reposition/1 (stream property):        mpg-ref-stream_property.
                                                              (line 112)
* representation errors:                 ref-ere-err-rep.     (line   6)
* representation_error/[1,3] (error class): ref-ere-err.      (line 163)
* reset (open/4 eof_action value):       mpg-ref-open.        (line  77)
* reset printdepth (debugger command):   Debug Commands.      (line 353)
* reset printdepth (top-level command):  Queries.             (line  53)
* reset subterm (debugger command):      Debug Commands.      (line 367)
* reset subterm (top-level command):     Queries.             (line  63)
* resource errors:                       ref-ere-err-res.     (line   6)
* resource, colored:                     Scheduling Constraints.
                                                              (line 129)
* resource, cumulative:                  Scheduling Constraints.
                                                              (line 124)
* resource, data:                        too-spld.            (line 206)
* resource, dynamic:                     Foreign Resources.   (line  33)
* resource, foreign:                     Foreign Resources.   (line   6)
* resource, foreign (definition):        Glossary.            (line 307)
* resource, linked foreign (definition): Glossary.            (line 469)
* resource, prelinked:                   Foreign Resources.   (line  42)
* resource, static:                      Foreign Resources.   (line  33)
* resource_error/[1,2] (error class):    ref-ere-err.         (line 175)
* rest of list, '|':                     ref-syn-cpt-lis.     (line  29)
* restart (labeling/2 option):           Enumeration Predicates.
                                                              (line 227)
* restore (--main option value):         too-spld.            (line  89)
* restore/1 (built-in):                  Saving.              (line  23)
* restore/1 (built-in) <1>:              ref-sls-sst.         (line   6)
* restore/1 (built-in, ref page):        mpg-ref-restore.     (line   6)
* restoring:                             Saving.              (line   6)
* restrictions, operator syntax:         ref-syn-ops-res.     (line   6)
* resumptions (fd_statistics/2 option):  Statistics Predicates.
                                                              (line  23)
* retract/1 (built-in):                  ref-mdb-rcd.         (line  19)
* retract/1 (built-in, ref page):        mpg-ref-retract.     (line   6)
* retractall/1 (built-in):               ref-mdb-rcd.         (line  19)
* retractall/1 (built-in, ref page):     mpg-ref-retractall.  (line   6)
* retry (debugger command):              Debug Commands.      (line 129)
* retry/1 (debugger command control):    Action Variables.    (line  85)
* return (Tcl command):                  Commands.            (line 725)
* rev/2 (lists):                         lib-lists.           (line 181)
* reverse/2 (lists):                     lib-lists.           (line 174)
* rewriting, syntactic:                  ref-fdi-syn.         (line  11)
* rotate_list/[2,3] (lists):             lib-lists.           (line 326)
* round /1, (evaluable):                 ref-ari-aex.         (line 181)
* rule (definition):                     Glossary.            (line 687)
* rule, computation:                     ref-sem-sec.         (line  98)
* rule, search:                          ref-sem-sec.         (line  98)
* run-prolog (emacs command):            Usage.               (line 185)
* running:                               Start.               (line   6)
* runtime (statistics key):              ref-mgc-ove-sta.     (line  85)
* runtime (zinc option value):           FlatZinc Exported Predicates.
                                                              (line 253)
* runtime (zinc option value) <1>:       MiniZinc Exported Predicates.
                                                              (line  67)
* runtime kernel (definition):           Glossary.            (line 704)
* runtime system:                        Development and Runtime Systems.
                                                              (line   6)
* runtime system <1>:                    Stand-Alone Executables.
                                                              (line   6)
* runtime system (definition):           Glossary.            (line 708)
* runtime system, extended (definition): Glossary.            (line 277)
* runtime_entry/1 (user, hook):          too-spld.            (line  74)
* run_tests/[0,1,2] (plunit):            PlUnit Running the Test-Suite.
                                                              (line  11)
* same_functor/[2,3,4] (terms):          lib-terms.           (line 300)
* same_length/[2,3] (lists):             lib-lists.           (line 187)
* samkeysort/2 (samsort):                lib-samsort.         (line  30)
* sample_standard_deviation/2 (statistics): lib-statistics.   (line  96)
* sample_variance/2 (statistics):        lib-statistics.      (line  79)
* samsort/[2,3] (samsort):               lib-samsort.         (line  10)
* sat/1 (clpb):                          CLPB Interface.      (line  10)
* satisfy (labeling/2 option):           Enumeration Predicates.
                                                              (line 188)
* saved-state:                           Saving.              (line   6)
* saved-state <1>:                       ref-sls-sst.         (line   6)
* saved-state (definition):              Glossary.            (line 714)
* saved-states, initialization of:       ref-sls-sst.         (line  36)
* saved_state (absolute_file_name/3 file type): mpg-ref-absolute_file_name.
                                                              (line  75)
* save_files/2 (built-in):               Saving.              (line  59)
* save_files/2 (built-in) <1>:           ref-sls-ssl.         (line   6)
* save_files/2 (built-in, ref page):     mpg-ref-save_files.  (line   6)
* save_modules/2 (built-in):             Saving.              (line  59)
* save_modules/2 (built-in) <1>:         ref-sls-ssl.         (line   6)
* save_modules/2 (built-in, ref page):   mpg-ref-save_modules.
                                                              (line   6)
* save_predicates/2 (built-in):          Saving.              (line  59)
* save_predicates/2 (built-in) <1>:      ref-sls-ssl.         (line   6)
* save_predicates/2 (built-in, ref page): mpg-ref-save_predicates.
                                                              (line   6)
* save_program/[1,2] (built-in):         Saving.              (line  10)
* save_program/[1,2] (built-in) <1>:     ref-sls-sst.         (line   6)
* save_program/[1,2] (built-in, ref page): mpg-ref-save_program.
                                                              (line   6)
* saving:                                Saving.              (line   6)
* saving database:                       ref-sls-ove.         (line   6)
* saving PO files:                       ref-sls-ssl.         (line   6)
* saving programs, predicates for:       ref-sls-lis.         (line   8)
* saving programs, predicates for <1>:   mpg-top-eqs.         (line   6)
* scalar_product/4 (case/4 option):      Extensional Constraints.
                                                              (line 127)
* scalar_product/[4,5] (clpfd):          Arithmetic Constraints.
                                                              (line  45)
* scale (Tk widget):                     Types of Widget.     (line  45)
* scan (Tcl command):                    Commands.            (line 403)
* scanlist/[4,5,6] (lists):              lib-lists.           (line 506)
* scollbar (Tk widget):                  Types of Widget.     (line  50)
* scope of variables:                    ref-sem-pro.         (line  65)
* search (absolute_file_name/3 access):  mpg-ref-absolute_file_name.
                                                              (line 150)
* search rule:                           ref-sem-sec.         (line  98)
* search/1 (zinc option):                FlatZinc Exported Predicates.
                                                              (line 223)
* search/1 (zinc option) <1>:            MiniZinc Exported Predicates.
                                                              (line  29)
* searchable (absolute_file_name/3 access): mpg-ref-absolute_file_name.
                                                              (line 150)
* searching, for a file in a library:    ref-fdi-fsp.         (line  12)
* seconds since the Epoch:               lib-file_systems.    (line 232)
* see/1 (built-in):                      ref-iou-sfh-opn.     (line  47)
* see/1 (built-in, ref page):            mpg-ref-see.         (line   6)
* seeing/1 (built-in):                   ref-iou-sfh-cis.     (line  15)
* seeing/1 (built-in, ref page):         mpg-ref-seeing.      (line   6)
* seek/4 (built-in):                     ref-iou-raf.         (line   6)
* seek/4 (built-in, ref page):           mpg-ref-seek.        (line   6)
* seen/0 (built-in):                     ref-iou-sfh-cst.     (line  29)
* seen/0 (built-in, ref page):           mpg-ref-seen.        (line   6)
* segment/2 (lists):                     lib-lists.           (line 395)
* select/3 (lists):                      lib-lists.           (line  10)
* select/4 (lists):                      lib-lists.           (line 202)
* selectchk/3 (lists):                   lib-lists.           (line  14)
* selectchk/4 (lists):                   lib-lists.           (line 208)
* selector:                              FDBG Selectors.      (line   6)
* selector, subterm:                     Queries.             (line  64)
* selector, subterm <1>:                 Breakpoint Tests.    (line 263)
* selector, subterm (definition):        Glossary.            (line 833)
* select_max/[3,4] (lists):              lib-lists.           (line 740)
* select_min/[3,4] (lists):              lib-lists.           (line 733)
* self-modifying procedures:             ref-mdb-bas.         (line  15)
* self-modifying procedures <1>:         ref-mdb-exa.         (line  12)
* semantics:                             ref-sem.             (line  17)
* semantics (definition):                Glossary.            (line 718)
* semantics of dynamic code:             ref-mdb-bas.         (line  30)
* semantics of grammar rules:            ref-gru-tra.         (line   6)
* semantics, declarative:                ref-sem-sec.         (line   6)
* semantics, procedural:                 ref-sem-sec.         (line   6)
* semantics, procedural <1>:             ref-sem-sec.         (line  30)
* sentence:                              ref-sem-pro.         (line  20)
* sentence (definition):                 Glossary.            (line 723)
* sentences:                             ref-syn-syn.         (line  16)
* sequence, escape:                      ref-syn-syn-esc.     (line   6)
* sequence, escape (definition):         Glossary.            (line 270)
* servlet:                               PB Features.         (line  24)
* session_gc_timeout/1 (start/1 option): PB Prolog Server Interface.
                                                              (line  42)
* session_get/4 (prologbeans):           PB Prolog Server Interface.
                                                              (line 107)
* session_put/3 (prologbeans):           PB Prolog Server Interface.
                                                              (line 120)
* session_timeout/1 (start/1 option):    PB Prolog Server Interface.
                                                              (line  35)
* set (Tcl command):                     Commands.            (line  35)
* set printdepth (debugger command):     Debug Commands.      (line 353)
* set printdepth (top-level command):    Queries.             (line  53)
* set subterm (debugger command):        Debug Commands.      (line 367)
* set subterm (top-level command):       Queries.             (line  63)
* set, character:                        ref-syn-syn-tok.     (line   6)
* set, FD:                               FD Set Operations.   (line   6)
* set/1 (plunit option):                 PlUnit A Unit Test Box.
                                                              (line 143)
* seteq/2 (sets):                        lib-sets.            (line  67)
* setof/3 (built-in):                    ref-all-cse.         (line  10)
* setof/3 (built-in, ref page):          mpg-ref-setof.       (line   6)
* setproduct/3 (sets):                   lib-sets.            (line 129)
* setrand/1 (random):                    lib-random.          (line  21)
* sets, collecting solutions to a goal:  ref-all.             (line  12)
* setting a breakpoint:                  Usage.               (line 159)
* setup/1 (plunit option):               PlUnit A Unit Test Box.
                                                              (line  72)
* set_input/1 (built-in):                ref-iou-sfh-opn.     (line   6)
* set_input/1 (built-in) <1>:            ref-iou-sfh-opn.     (line  33)
* set_input/1 (built-in, ref page):      mpg-ref-set_input.   (line   6)
* set_module/1 (built-in):               ref-mod-tyi.         (line  22)
* set_module/1 (built-in, ref page):     mpg-ref-set_module.  (line   6)
* set_order/3 (sets):                    lib-sets.            (line  63)
* set_output/1 (built-in):               ref-iou-sfh-opn.     (line   6)
* set_output/1 (built-in) <1>:           ref-iou-sfh-opn.     (line  37)
* set_output/1 (built-in, ref page):     mpg-ref-set_output.  (line   6)
* set_prolog_flag/2 (built-in, ref page): mpg-ref-set_prolog_flag.
                                                              (line   6)
* set_stream_position/2 (built-in):      ref-iou-raf.         (line   6)
* set_stream_position/2 (built-in, ref page): mpg-ref-set_stream_position.
                                                              (line   6)
* shorter_list/2 (lists):                lib-lists.           (line 219)
* show/1 (debugger condition):           Breakpoint Actions.  (line  12)
* show/1 (debugger condition) <1>:       Port Tests.          (line  47)
* show/1 (debugger condition) <2>:       Action Conditions.   (line  14)
* shutdown/[0,1] (prologbeans):          PB Prolog Server Interface.
                                                              (line  55)
* shutdown_server/0 (linda_client):      lib-linda-client.    (line  34)
* SICStus Prolog IDE (SPIDER):           SPIDER.              (line   6)
* sicstus(1) (command line tool):        too-sicstus.         (line   6)
* sicstus-bindings-on (emacs command):   Usage.               (line 130)
* sicstus-bindings-print-depth (emacs command): Usage.        (line 139)
* sicstus-coverage-on (emacs command):   Usage.               (line 144)
* side-effect (definition):              Glossary.            (line 726)
* side-effects, in repeat loops:         mpg-ref-repeat.      (line  41)
* sigaction:                             Signal Handling.     (line   6)
* SIGBREAK:                              Signal Handling.     (line  18)
* SIGCHLD:                               Signal Handling.     (line  18)
* SIGCLD:                                Signal Handling.     (line  18)
* SIGINT:                                Signal Handling.     (line  18)
* sign /1, (evaluable):                  ref-ari-aex.         (line 156)
* signal:                                Signal Handling.     (line   6)
* signal handling:                       Calling Prolog Asynchronously.
                                                              (line  10)
* Signal handling, C functions for:      cpg-top-sig.         (line   6)
* SIGUSR1:                               Signal Handling.     (line  18)
* SIGUSR2:                               Signal Handling.     (line  18)
* SIGVTALRM:                             Signal Handling.     (line  18)
* SIG_DFL (C macro):                     cpg-ref-SP_signal.   (line  61)
* SIG_ERR (C macro):                     cpg-ref-SP_signal.   (line  61)
* SIG_IGN (C macro):                     cpg-ref-SP_signal.   (line  61)
* silent/0 (debugger show control):      Action Variables.    (line  19)
* simple term (definition):              Glossary.            (line 731)
* simple/1 (built-in, ref page):         mpg-ref-simple.      (line   6)
* SimpleCallSpec:                        Terminology.         (line  52)
* simple_pred_spec (argument type):      mpg-ref-aty-ety.     (line  26)
* sin /1, (evaluable):                   ref-ari-aex.         (line 199)
* singletons/1 (read_term/[2,3] option): mpg-ref-read_term.   (line  52)
* singleton_queue/2 (queues):            lib-queues.          (line  28)
* single_var_warnings (prolog flag):     ref-lod-lod.         (line  64)
* single_var_warnings (prolog flag) <1>: ref-lps-flg.         (line 315)
* single_var_warnings (prolog flag) <2>: Runtime Systems.     (line  30)
* sinh /1, (evaluable):                  ref-ari-aex.         (line 215)
* site, coverage:                        Coverage Analysis.   (line   6)
* size_bound/2 (terms):                  lib-terms.           (line 262)
* skeletal goal (definition):            Glossary.            (line 735)
* skewness/2 (statistics):               lib-statistics.      (line  57)
* skip (CHR debug command):              CHR Tracing.         (line  32)
* skip (debugger command):               Debug Commands.      (line  92)
* skip/1 (debugger mode control):        Action Variables.    (line 116)
* skip_byte/[1,2] (built-in):            ref-iou-cin-ski.     (line   9)
* skip_byte/[1,2] (built-in, ref page):  mpg-ref-skip_byte.   (line   6)
* skip_char/[1,2] (built-in):            ref-iou-cin-ski.     (line  17)
* skip_char/[1,2] (built-in, ref page):  mpg-ref-skip_char.   (line   6)
* skip_code/[1,2] (built-in):            ref-iou-cin-ski.     (line  13)
* skip_code/[1,2] (built-in, ref page):  mpg-ref-skip_code.   (line   6)
* skip_line/[0,1] (built-in):            ref-iou-cin-ski.     (line  21)
* skip_line/[0,1] (built-in, ref page):  mpg-ref-skip_line.   (line   6)
* sleep/1 (system):                      lib-system.          (line  25)
* small integer (definition):            Glossary.            (line 739)
* smallest (labeling/2 option):          Enumeration Predicates.
                                                              (line  76)
* smt/1 (clpfd):                         Arithmetic-Logical Constraints.
                                                              (line   8)
* socket address:                        lib-sockets.         (line  20)
* sockets:                               lib-sockets.         (line   6)
* socket_client_open/3 (sockets):        lib-sockets.         (line  55)
* socket_select/7 (sockets):             lib-sockets.         (line 142)
* socket_server_accept/4 (sockets):      lib-sockets.         (line 129)
* socket_server_close/1 (sockets):       lib-sockets.         (line 138)
* socket_server_open/[2,3] (sockets):    lib-sockets.         (line  88)
* soft cut:                              ref-sem-ctr-ite.     (line  48)
* solutions (zinc option value):         FlatZinc Exported Predicates.
                                                              (line 261)
* solutions (zinc option value) <1>:     MiniZinc Exported Predicates.
                                                              (line  75)
* solutions/1 (absolute_file_name/3 option): mpg-ref-absolute_file_name.
                                                              (line 206)
* solutions/1 (zinc option):             FlatZinc Exported Predicates.
                                                              (line 229)
* solutions/1 (zinc option) <1>:         MiniZinc Exported Predicates.
                                                              (line  35)
* solve/2 (clpfd):                       Enumeration Predicates.
                                                              (line 311)
* solvetime (zinc option value):         FlatZinc Exported Predicates.
                                                              (line 257)
* solvetime (zinc option value) <1>:     MiniZinc Exported Predicates.
                                                              (line  71)
* some/[2,3,4] (lists):                  lib-lists.           (line 540)
* somebag/2 (bags):                      lib-bags.            (line  70)
* somechk/[2,3,4] (lists):               lib-lists.           (line 555)
* somechkbag/2 (bags):                   lib-bags.            (line  75)
* somechk_queue/[2,3] (queues):          lib-queues.          (line 140)
* some_queue/[2,3] (queues):             lib-queues.          (line 130)
* sort/2 (built-in):                     ref-lte-cte-sor.     (line   6)
* sort/2 (built-in, ref page):           mpg-ref-sort.        (line   6)
* sorting/3 (clpfd):                     Arithmetic-Logical Constraints.
                                                              (line 215)
* source (absolute_file_name/3 file type): mpg-ref-absolute_file_name.
                                                              (line  66)
* source (load context key):             ref-lps-lco.         (line  12)
* source (Tcl command):                  Commands.            (line 841)
* source code (definition):              Glossary.            (line 745)
* source information:                    Usage.               (line  18)
* source information <1>:                ref-lps-flg.         (line 321)
* source module:                         ref-mod-som.         (line   6)
* source module <1>:                     ref-mod-mne.         (line   6)
* source module (definition):            Glossary.            (line 749)
* source/1 (fd_global/[3,4] option):     The Global Constraint Programming Interface.
                                                              (line 108)
* source_file/[1,2] (built-in):          ref-lps-apf.         (line   6)
* source_file/[1,2] (built-in, ref page): mpg-ref-source_file.
                                                              (line   6)
* source_info (prolog flag):             Usage.               (line  28)
* source_info (prolog flag) <1>:         ref-lps-flg.         (line 321)
* source_info (prolog flag) <2>:         Breakpoint Tests.    (line 228)
* source_info (prolog flag) <3>:         Debugging Runtime Systems.
                                                              (line  23)
* space reclamation:                     ref-mgc-ove-rsp.     (line   6)
* space, program:                        ref-mgc-ove.         (line  32)
* space, reclamation:                    mpg-ref-abolish.     (line  60)
* spdet(1) (command line tool):          too-spdet.           (line   6)
* spdet, the determinacy checker:        The Determinacy Checker.
                                                              (line   6)
* spec, breakpoint:                      Creating Breakpoints.
                                                              (line   6)
* spec, mode:                            Mode Spec.           (line   6)
* spec, predicate (definition):          Glossary.            (line 627)
* specific breakpoint:                   Specific and Generic Breakpoints.
                                                              (line   6)
* specification, directory:              ref-fdi-fsp.         (line  66)
* specification, file:                   ref-fdi-fsp.         (line  66)
* specification, file <1>:               ref-fdi-syn.         (line   6)
* specification, file (definition):      Glossary.            (line 294)
* specifying streams:                    ref-iou-str.         (line  22)
* specifying streams, effiency and:      ref-iou-str-not.     (line   6)
* spfz(1) (command line tool):           too-spfz.            (line   6)
* SPIDER:                                SPIDER.              (line   6)
* spld:                                  The Application Builder.
                                                              (line  14)
* spld(1) (command line tool):           too-spld.            (line   6)
* splfr:                                 The Foreign Resource Linker.
                                                              (line   6)
* splfr(1) (command line tool):          too-splfr.           (line   6)
* split (Tcl command):                   Commands.            (line 223)
* splm(1) (command line tool):           too-splm.            (line   6)
* spxref:                                Xref Introduction.   (line   6)
* spxref(1) (command line tool):         too-spxref.          (line   6)
* spy this (debugger command):           Debug Commands.      (line 262)
* spy this conditionally (debugger command): Debug Commands.  (line 269)
* spy/[1,2] (built-in):                  Plain Spypoint.      (line  29)
* spy/[1,2] (built-in) <1>:              Breakpoint Predicates.
                                                              (line  54)
* spy/[1,2] (built-in, ref page):        mpg-ref-spy.         (line   6)
* spypoint:                              Debug Intro.         (line  17)
* spypoint (definition):                 Glossary.            (line 767)
* spypoint, conditional:                 Creating Breakpoints.
                                                              (line  26)
* spypoint, plain:                       Plain Spypoint.      (line   6)
* spypoint, plain <1>:                   Creating Breakpoints.
                                                              (line  16)
* SP_AllocHook() (C type):               cpg-ref-SP_set_memalloc_hooks.
                                                              (line  36)
* SP_ALLOW_CHDIR (system property):      System Properties and Environment Variables.
                                                              (line 139)
* SP_ALLOW_DEVSYS (system property):     Customizing the Debugged Runtime System.
                                                              (line  28)
* SP_APP_DIR (system property):          System Properties and Environment Variables.
                                                              (line  72)
* SP_APP_PATH (system property):         System Properties and Environment Variables.
                                                              (line  76)
* SP_atom (C type):                      Glossary.            (line  40)
* SP_atom (C type) <1>:                  Glossary.            (line 755)
* SP_atom (C type) <2>:                  Atoms in C.          (line   6)
* SP_atom (C type) <3>:                  cpg-ref-SP_atom_from_string.
                                                              (line  16)
* SP_atom (C type) <4>:                  cpg-ref-SP_atom_length.
                                                              (line  20)
* SP_atom (C type) <5>:                  cpg-ref-SP_cons_functor.
                                                              (line  29)
* SP_atom (C type) <6>:                  cpg-ref-SP_cons_functor_array.
                                                              (line  29)
* SP_atom (C type) <7>:                  cpg-ref-SP_get_atom. (line  24)
* SP_atom (C type) <8>:                  cpg-ref-SP_get_functor.
                                                              (line  30)
* SP_atom (C type) <9>:                  cpg-ref-SP_pred.     (line  22)
* SP_atom (C type) <10>:                 cpg-ref-SP_put_atom. (line  24)
* SP_atom (C type) <11>:                 cpg-ref-SP_put_functor.
                                                              (line  29)
* SP_atom (C type) <12>:                 cpg-ref-SP_register_atom.
                                                              (line  21)
* SP_atom (C type) <13>:                 cpg-ref-SP_string_from_atom.
                                                              (line  21)
* SP_atom (C type) <14>:                 cpg-ref-SP_unregister_atom.
                                                              (line  21)
* SP_atom (definition):                  Glossary.            (line 755)
* SP_atom_from_string() (C function):    Atoms in C.          (line   6)
* SP_atom_from_string() (C function) <1>: cpg-ref-SP_atom_from_string.
                                                              (line   6)
* SP_atom_length() (C function):         Atoms in C.          (line  23)
* SP_atom_length() (C function) <1>:     cpg-ref-SP_atom_length.
                                                              (line   6)
* SP_ATTACH_SPIDER (system property):    Customizing the Debugged Runtime System.
                                                              (line  18)
* SP_calloc() (C function):              OS Memory Management.
                                                              (line  17)
* SP_calloc() (C function) <1>:          cpg-ref-SP_calloc.   (line   6)
* SP_close_query() (C function):         cpg-ref-SP_close_query.
                                                              (line   6)
* SP_compare() (C function):             Unifying and Comparing Terms.
                                                              (line  11)
* SP_compare() (C function) <1>:         cpg-ref-SP_compare.  (line   6)
* SP_cons_functor() (C function):        Creating Prolog Terms.
                                                              (line  38)
* SP_cons_functor() (C function) <1>:    cpg-ref-SP_cons_functor.
                                                              (line   6)
* SP_cons_functor_array() (C function):  cpg-ref-SP_cons_functor_array.
                                                              (line   6)
* SP_cons_list() (C function):           Creating Prolog Terms.
                                                              (line  40)
* SP_cons_list() (C function) <1>:       cpg-ref-SP_cons_list.
                                                              (line   6)
* SP_create_stream() (C function):       cpg-ref-SP_create_stream.
                                                              (line   6)
* SP_curin (C stream):                   Prolog Streams.      (line  62)
* SP_curout (C stream):                  Prolog Streams.      (line  66)
* SP_cut_query() (C function):           Finding Multiple Solutions of a Call.
                                                              (line  29)
* SP_cut_query() (C function) <1>:       cpg-ref-SP_cut_query.
                                                              (line   6)
* SP_define_c_predicate() (C function):  cpg-ref-SP_define_c_predicate.
                                                              (line   6)
* SP_DeinitAllocHook() (C type):         cpg-ref-SP_set_memalloc_hooks.
                                                              (line  36)
* SP_deinitialize() (C function):        Initializing the Prolog Engine.
                                                              (line  17)
* SP_deinitialize() (C function) <1>:    cpg-ref-SP_deinitialize.
                                                              (line   6)
* SP_DEVSYS_NO_TRACE (system property):  Customizing the Debugged Runtime System.
                                                              (line  24)
* SP_errno (C macro):                    CPL Notes.           (line  38)
* SP_errno (C macro) <1>:                cpg-rve.             (line   6)
* SP_ERROR (C macro):                    CPL Notes.           (line  30)
* SP_ERROR (C macro) <1>:                cpg-rve.             (line   6)
* SP_error_message() (C function):       CPL Notes.           (line  38)
* SP_error_message() (C function) <1>:   cpg-rve.             (line   6)
* SP_error_message() (C function) <2>:   cpg-ref-SP_error_message.
                                                              (line   6)
* SP_event() (C function):               Calling Prolog Asynchronously.
                                                              (line  35)
* SP_event() (C function) <1>:           cpg-ref-SP_event.    (line   6)
* SP_exception_term() (C function):      Exception Handling in C.
                                                              (line  12)
* SP_exception_term() (C function) <1>:  cpg-ref-SP_exception_term.
                                                              (line   6)
* SP_expand_file_name() (C function):    cpg-ref-SP_expand_file_name.
                                                              (line   6)
* SP_fail() (C function):                Exception Handling in C.
                                                              (line  22)
* SP_fail() (C function) <1>:            cpg-ref-SP_fail.     (line   6)
* SP_FAILURE (C macro):                  CPL Notes.           (line  30)
* SP_FAILURE (C macro) <1>:              cpg-rve.             (line   6)
* SP_fclose() (C function):              Prolog Streams.      (line  42)
* SP_fclose() (C function) <1>:          cpg-ref-SP_fclose.   (line   6)
* SP_flush_output() (C function):        Prolog Streams.      (line  40)
* SP_flush_output() (C function) <1>:    cpg-ref-SP_flush_output.
                                                              (line   6)
* SP_fopen() (C function):               cpg-ref-SP_fopen.    (line   6)
* SP_foreign_stash() (C macro):          OS Threads.          (line  22)
* SP_foreign_stash() (C macro) <1>:      cpg-ref-SP_foreign_stash.
                                                              (line   6)
* SP_fprintf() (C function):             Prolog Streams.      (line  38)
* SP_fprintf() (C function) <1>:         cpg-ref-SP_fprintf.  (line   6)
* SP_free() (C function):                OS Memory Management.
                                                              (line  22)
* SP_free() (C function) <1>:            cpg-ref-SP_free.     (line   6)
* SP_FreeHook() (C type):                cpg-ref-SP_set_memalloc_hooks.
                                                              (line  36)
* SP_getenv() (C function):              cpg-ref-SP_getenv.   (line   6)
* SP_get_address() (C function):         Accessing Prolog Terms.
                                                              (line  20)
* SP_get_address() (C function) <1>:     cpg-ref-SP_get_address.
                                                              (line   6)
* SP_get_arg() (C function):             Accessing Prolog Terms.
                                                              (line  36)
* SP_get_arg() (C function) <1>:         cpg-ref-SP_get_arg.  (line   6)
* SP_get_atom() (C function):            Accessing Prolog Terms.
                                                              (line  16)
* SP_get_atom() (C function) <1>:        cpg-ref-SP_get_atom. (line   6)
* SP_get_byte() (C function):            cpg-ref-SP_get_byte. (line   6)
* SP_get_byte() (C macro):               Prolog Streams.      (line  22)
* SP_get_code() (C function):            cpg-ref-SP_get_code. (line   6)
* SP_get_code() (C macro):               Prolog Streams.      (line  24)
* SP_get_current_dir() (C function):     OS File System.      (line  14)
* SP_get_current_dir() (C function) <1>: cpg-ref-SP_get_current_dir.
                                                              (line   6)
* SP_get_dispatch() (C function):        cpg-ref-SP_get_dispatch.
                                                              (line   6)
* SP_get_float() (C function):           Accessing Prolog Terms.
                                                              (line  14)
* SP_get_float() (C function) <1>:       cpg-ref-SP_get_float.
                                                              (line   6)
* SP_get_functor() (C function):         Accessing Prolog Terms.
                                                              (line  32)
* SP_get_functor() (C function) <1>:     cpg-ref-SP_get_functor.
                                                              (line   6)
* SP_get_integer() (C function):         Accessing Prolog Terms.
                                                              (line  12)
* SP_get_integer() (C function) <1>:     cpg-ref-SP_get_integer.
                                                              (line   6)
* SP_get_integer_bytes() (C function):   Accessing Prolog Terms.
                                                              (line  30)
* SP_get_integer_bytes() (C function) <1>: cpg-ref-SP_get_integer_bytes.
                                                              (line   6)
* SP_get_list() (C function):            Accessing Prolog Terms.
                                                              (line  34)
* SP_get_list() (C function) <1>:        cpg-ref-SP_get_list. (line   6)
* SP_get_list_codes() (C function):      Accessing Prolog Terms.
                                                              (line  22)
* SP_get_list_codes() (C function) <1>:  cpg-ref-SP_get_list_codes.
                                                              (line   6)
* SP_get_list_n_bytes() (C function):    Accessing Prolog Terms.
                                                              (line  26)
* SP_get_list_n_bytes() (C function) <1>: cpg-ref-SP_get_list_n_bytes.
                                                              (line   6)
* SP_get_list_n_codes() (C function):    Accessing Prolog Terms.
                                                              (line  24)
* SP_get_list_n_codes() (C function) <1>: cpg-ref-SP_get_list_n_codes.
                                                              (line   6)
* SP_get_number_codes() (C function):    Accessing Prolog Terms.
                                                              (line  28)
* SP_get_number_codes() (C function) <1>: cpg-ref-SP_get_number_codes.
                                                              (line   6)
* SP_get_stream_counts() (C function):   cpg-ref-SP_get_stream_counts.
                                                              (line   6)
* SP_get_stream_user_data() (C function): cpg-ref-SP_get_stream_user_data.
                                                              (line   6)
* SP_get_string() (C function):          Accessing Prolog Terms.
                                                              (line  18)
* SP_get_string() (C function) <1>:      cpg-ref-SP_get_string.
                                                              (line   6)
* SP_InitAllocHook() (C type):           cpg-ref-SP_set_memalloc_hooks.
                                                              (line  36)
* SP_initialize() (C function):          Initializing the Prolog Engine.
                                                              (line  10)
* SP_initialize() (C macro):             cpg-ref-SP_initialize.
                                                              (line   6)
* SP_integer (C type):                   Glossary.            (line 759)
* SP_integer (definition):               Glossary.            (line 759)
* SP_is_atom() (C function):             Testing Prolog Terms.
                                                              (line  19)
* SP_is_atom() (C function) <1>:         cpg-ref-SP_is_atom.  (line   6)
* SP_is_atomic() (C function):           Testing Prolog Terms.
                                                              (line  25)
* SP_is_atomic() (C function) <1>:       cpg-ref-SP_is_atomic.
                                                              (line   6)
* SP_is_compound() (C function):         Testing Prolog Terms.
                                                              (line  21)
* SP_is_compound() (C function) <1>:     cpg-ref-SP_is_compound.
                                                              (line   6)
* SP_is_float() (C function):            Testing Prolog Terms.
                                                              (line  17)
* SP_is_float() (C function) <1>:        cpg-ref-SP_is_float. (line   6)
* SP_is_integer() (C function):          Testing Prolog Terms.
                                                              (line  15)
* SP_is_integer() (C function) <1>:      cpg-ref-SP_is_integer.
                                                              (line   6)
* SP_is_list() (C function):             Testing Prolog Terms.
                                                              (line  23)
* SP_is_list() (C function) <1>:         cpg-ref-SP_is_list.  (line   6)
* SP_is_number() (C function):           Testing Prolog Terms.
                                                              (line  27)
* SP_is_number() (C function) <1>:       cpg-ref-SP_is_number.
                                                              (line   6)
* SP_is_variable() (C function):         Testing Prolog Terms.
                                                              (line  13)
* SP_is_variable() (C function) <1>:     cpg-ref-SP_is_variable.
                                                              (line   6)
* SP_JIT (system property):              System Properties and Environment Variables.
                                                              (line 232)
* SP_JIT_CLAUSE_LIMIT (system property): System Properties and Environment Variables.
                                                              (line 265)
* SP_JIT_COUNTER_LIMIT (system property): System Properties and Environment Variables.
                                                              (line 255)
* SP_LIBRARY_DIR (system property):      System Properties and Environment Variables.
                                                              (line  91)
* SP_LICENSE_CODE (system property):     Locating the License Information.
                                                              (line  24)
* SP_LICENSE_CODE (system property) <1>: Locating the License Information.
                                                              (line  40)
* SP_LICENSE_CODE (system property) <2>: Customizing the Debugged Runtime System.
                                                              (line  36)
* SP_LICENSE_EXPIRATION (system property): Locating the License Information.
                                                              (line  24)
* SP_LICENSE_EXPIRATION (system property) <1>: Locating the License Information.
                                                              (line  43)
* SP_LICENSE_EXPIRATION (system property) <2>: Customizing the Debugged Runtime System.
                                                              (line  37)
* SP_LICENSE_FILE (system property):     Locating the License Information.
                                                              (line  24)
* SP_LICENSE_FILE (system property) <1>: Customizing the Debugged Runtime System.
                                                              (line  34)
* SP_LICENSE_SITE (system property):     Locating the License Information.
                                                              (line  24)
* SP_LICENSE_SITE (system property) <1>: Locating the License Information.
                                                              (line  38)
* SP_LICENSE_SITE (system property) <2>: Customizing the Debugged Runtime System.
                                                              (line  35)
* SP_load() (C function):                Loading Prolog Code. (line   7)
* SP_load() (C function) <1>:            cpg-ref-SP_load.     (line   6)
* SP_load_sicstus_run_time() (C function): cpg-ref-SP_load_sicstus_run_time.
                                                              (line   6)
* SP_malloc() (C function):              OS Memory Management.
                                                              (line  15)
* SP_malloc() (C function) <1>:          cpg-ref-SP_malloc.   (line   6)
* SP_MUTEX_INITIALIZER (C macro):        OS Threads.          (line  11)
* SP_mutex_lock() (C function):          OS Threads.          (line  12)
* SP_mutex_lock() (C function) <1>:      cpg-ref-SP_mutex_lock.
                                                              (line   6)
* SP_mutex_unlock() (C function):        OS Threads.          (line  11)
* SP_mutex_unlock() (C function) <1>:    OS Threads.          (line  14)
* SP_mutex_unlock() (C function) <2>:    cpg-ref-SP_mutex_unlock.
                                                              (line   6)
* SP_new_term_ref() (C function):        Creating and Manipulating SP_term_refs.
                                                              (line  28)
* SP_new_term_ref() (C function) <1>:    cpg-ref-SP_new_term_ref.
                                                              (line   6)
* SP_next_solution() (C function):       Finding Multiple Solutions of a Call.
                                                              (line  23)
* SP_next_solution() (C function) <1>:   cpg-ref-SP_next_solution.
                                                              (line   6)
* SP_next_stream() (C function):         cpg-ref-SP_next_stream.
                                                              (line   6)
* SP_on_fault() (C macro):               Exception Handling in C.
                                                              (line  24)
* SP_open_query() (C function):          Finding Multiple Solutions of a Call.
                                                              (line  19)
* SP_open_query() (C function) <1>:      cpg-ref-SP_open_query.
                                                              (line   6)
* SP_PATH (system property):             System Properties and Environment Variables.
                                                              (line 127)
* SP_PATH (system property) <1>:         CPL Notes.           (line   7)
* SP_pred() (C function):                Calling Prolog from C.
                                                              (line  15)
* SP_pred() (C function) <1>:            cpg-ref-SP_pred.     (line   6)
* SP_predicate() (C function):           Calling Prolog from C.
                                                              (line   9)
* SP_predicate() (C function) <1>:       cpg-ref-SP_predicate.
                                                              (line   6)
* SP_printf() (C function):              Prolog Streams.      (line  37)
* SP_printf() (C function) <1>:          cpg-ref-SP_printf.   (line   6)
* SP_put_address() (C function):         Creating Prolog Terms.
                                                              (line  22)
* SP_put_address() (C function) <1>:     cpg-ref-SP_put_address.
                                                              (line   6)
* SP_put_atom() (C function):            Creating Prolog Terms.
                                                              (line  18)
* SP_put_atom() (C function) <1>:        cpg-ref-SP_put_atom. (line   6)
* SP_put_byte() (C function):            cpg-ref-SP_put_byte. (line   6)
* SP_put_byte() (C macro):               Prolog Streams.      (line  26)
* SP_put_bytes() (C function):           Prolog Streams.      (line  30)
* SP_put_bytes() (C function) <1>:       cpg-ref-SP_put_bytes.
                                                              (line   6)
* SP_put_code() (C function):            cpg-ref-SP_put_code. (line   6)
* SP_put_code() (C macro):               Prolog Streams.      (line  28)
* SP_put_codes() (C function):           Prolog Streams.      (line  32)
* SP_put_codes() (C function) <1>:       cpg-ref-SP_put_codes.
                                                              (line   6)
* SP_put_encoded_string() (C function):  Prolog Streams.      (line  34)
* SP_put_encoded_string() (C function) <1>: cpg-ref-SP_put_encoded_string.
                                                              (line   6)
* SP_put_float() (C function):           Creating Prolog Terms.
                                                              (line  16)
* SP_put_float() (C function) <1>:       cpg-ref-SP_put_float.
                                                              (line   6)
* SP_put_functor() (C function):         Creating Prolog Terms.
                                                              (line  34)
* SP_put_functor() (C function) <1>:     cpg-ref-SP_put_functor.
                                                              (line   6)
* SP_put_integer() (C function):         Creating Prolog Terms.
                                                              (line  14)
* SP_put_integer() (C function) <1>:     cpg-ref-SP_put_integer.
                                                              (line   6)
* SP_put_integer_bytes() (C function):   Creating Prolog Terms.
                                                              (line  30)
* SP_put_integer_bytes() (C function) <1>: cpg-ref-SP_put_integer_bytes.
                                                              (line   6)
* SP_put_list() (C function):            Creating Prolog Terms.
                                                              (line  36)
* SP_put_list() (C function) <1>:        cpg-ref-SP_put_list. (line   6)
* SP_put_list_codes() (C function):      Creating Prolog Terms.
                                                              (line  24)
* SP_put_list_codes() (C function) <1>:  cpg-ref-SP_put_list_codes.
                                                              (line   6)
* SP_put_list_n_bytes() (C function):    Creating Prolog Terms.
                                                              (line  28)
* SP_put_list_n_bytes() (C function) <1>: cpg-ref-SP_put_list_n_bytes.
                                                              (line   6)
* SP_put_list_n_codes() (C function):    Creating Prolog Terms.
                                                              (line  26)
* SP_put_list_n_codes() (C function) <1>: cpg-ref-SP_put_list_n_codes.
                                                              (line   6)
* SP_put_number_codes() (C function):    Creating Prolog Terms.
                                                              (line  32)
* SP_put_number_codes() (C function) <1>: cpg-ref-SP_put_number_codes.
                                                              (line   6)
* SP_put_string() (C function):          Creating Prolog Terms.
                                                              (line  20)
* SP_put_string() (C function) <1>:      cpg-ref-SP_put_string.
                                                              (line   6)
* SP_put_term() (C function):            Creating and Manipulating SP_term_refs.
                                                              (line  30)
* SP_put_term() (C function) <1>:        cpg-ref-SP_put_term. (line   6)
* SP_put_variable() (C function):        Creating Prolog Terms.
                                                              (line  12)
* SP_put_variable() (C function) <1>:    cpg-ref-SP_put_variable.
                                                              (line   6)
* SP_qid (C type):                       Finding Multiple Solutions of a Call.
                                                              (line  19)
* SP_qid (C type) <1>:                   cpg-ref-SP_close_query.
                                                              (line  20)
* SP_qid (C type) <2>:                   cpg-ref-SP_cut_query.
                                                              (line  20)
* SP_qid (C type) <3>:                   cpg-ref-SP_next_solution.
                                                              (line  20)
* SP_qid (C type) <4>:                   cpg-ref-SP_open_query.
                                                              (line  19)
* SP_query() (C function):               Finding One Solution of a Call.
                                                              (line   6)
* SP_query() (C function) <1>:           cpg-ref-SP_query.    (line   6)
* SP_query_cut_fail() (C function):      Finding One Solution of a Call.
                                                              (line  11)
* SP_query_cut_fail() (C function) <1>:  cpg-ref-SP_query_cut_fail.
                                                              (line   6)
* SP_raise_exception() (C function):     Exception Handling in C.
                                                              (line  18)
* SP_raise_exception() (C function) <1>: cpg-ref-SP_raise_exception.
                                                              (line   6)
* SP_raise_fault() (C function):         Exception Handling in C.
                                                              (line  30)
* SP_read_from_string() (C function):    Creating Prolog Terms.
                                                              (line  42)
* SP_read_from_string() (C function) <1>: cpg-ref-SP_read_from_string.
                                                              (line   6)
* SP_realloc() (C function):             OS Memory Management.
                                                              (line  20)
* SP_realloc() (C function) <1>:         cpg-ref-SP_realloc.  (line   6)
* SP_register_atom() (C function):       Atoms in C.          (line  35)
* SP_register_atom() (C function) <1>:   cpg-ref-SP_register_atom.
                                                              (line   6)
* SP_restore() (C function):             Loading Prolog Code. (line  11)
* SP_restore() (C function) <1>:         cpg-ref-SP_restore.  (line   6)
* SP_RT_DIR (system property):           System Properties and Environment Variables.
                                                              (line  80)
* SP_RT_PATH (system property):          System Properties and Environment Variables.
                                                              (line  86)
* SP_set_argv() (C function):            cpg-ref-SP_set_argv. (line   6)
* SP_set_current_dir() (C function):     OS File System.      (line  12)
* SP_set_current_dir() (C function) <1>: cpg-ref-SP_set_current_dir.
                                                              (line   6)
* SP_set_memalloc_hooks() (C function):  cpg-ref-SP_set_memalloc_hooks.
                                                              (line   6)
* SP_set_user_stream_hook() (C function): Hookable Standard Streams.
                                                              (line   6)
* SP_set_user_stream_hook() (C function) <1>: cpg-ref-SP_set_user_stream_hook.
                                                              (line   6)
* SP_set_user_stream_post_hook() (C function): Hookable Standard Streams.
                                                              (line   6)
* SP_set_user_stream_post_hook() (C function) <1>: cpg-ref-SP_set_user_stream_post_hook.
                                                              (line   6)
* SP_signal() (C function):              Signal Handling.     (line   9)
* SP_signal() (C function) <1>:          cpg-ref-SP_signal.   (line   6)
* SP_SIG_DFL (C macro):                  cpg-ref-SP_signal.   (line  61)
* SP_SIG_ERR (C macro):                  cpg-ref-SP_signal.   (line  61)
* SP_SIG_IGN (C macro):                  cpg-ref-SP_signal.   (line  61)
* SP_SPTI_PATH (system property):        System Properties and Environment Variables.
                                                              (line 270)
* SP_STARTUP_DIR (system property):      System Properties and Environment Variables.
                                                              (line 131)
* SP_stderr (C stream):                  Prolog Streams.      (line  57)
* SP_stdin (C stream):                   Prolog Streams.      (line  47)
* SP_stdout (C stream):                  Prolog Streams.      (line  52)
* SP_strdup() (C function):              OS Memory Management.
                                                              (line  24)
* SP_strdup() (C function) <1>:          cpg-ref-SP_strdup.   (line   6)
* SP_stream (C type):                    Prolog Streams.      (line  16)
* SP_STREAMHOOK_STDERR (stream hook):    Writing User-stream Hooks.
                                                              (line  25)
* SP_STREAMHOOK_STDIN (stream hook):     Writing User-stream Hooks.
                                                              (line  21)
* SP_STREAMHOOK_STDOUT (stream hook):    Writing User-stream Hooks.
                                                              (line  23)
* SP_string_from_atom() (C function):    Atoms in C.          (line  20)
* SP_string_from_atom() (C function) <1>: cpg-ref-SP_string_from_atom.
                                                              (line   6)
* SP_SUCCESS (C macro):                  CPL Notes.           (line  30)
* SP_SUCCESS (C macro) <1>:              cpg-rve.             (line   6)
* SP_TEMP_DIR (system property):         System Properties and Environment Variables.
                                                              (line  96)
* SP_term_ref:                           Mixing C and Prolog. (line  16)
* SP_term_ref (C type):                  Mixing C and Prolog. (line  16)
* SP_term_ref (C type) <1>:              Creating and Manipulating SP_term_refs.
                                                              (line   6)
* SP_term_ref (definition):              Glossary.            (line 763)
* SP_term_type() (C function):           Testing Prolog Terms.
                                                              (line  11)
* SP_term_type() (C function) <1>:       cpg-ref-SP_term_type.
                                                              (line   6)
* SP_TYPE_ATOM (C macro):                cpg-ref-SP_term_type.
                                                              (line  37)
* SP_TYPE_COMPOUND (C macro):            cpg-ref-SP_term_type.
                                                              (line  40)
* SP_TYPE_ERROR (C macro):               cpg-ref-SP_term_type.
                                                              (line  43)
* SP_TYPE_FLOAT (C macro):               cpg-ref-SP_term_type.
                                                              (line  34)
* SP_TYPE_INTEGER (C macro):             cpg-ref-SP_term_type.
                                                              (line  31)
* SP_TYPE_VARIABLE (C macro):            cpg-ref-SP_term_type.
                                                              (line  28)
* SP_ULIMIT_DATA_SEGMENT_SIZE (system property): System Properties and Environment Variables.
                                                              (line 218)
* SP_unget_byte() (C function):          cpg-ref-SP_unget_byte.
                                                              (line   6)
* SP_unget_code() (C function):          cpg-ref-SP_unget_code.
                                                              (line   6)
* SP_unify() (C function):               Unifying and Comparing Terms.
                                                              (line   9)
* SP_unify() (C function) <1>:           cpg-ref-SP_unify.    (line   6)
* SP_unregister_atom() (C function):     Atoms in C.          (line  35)
* SP_unregister_atom() (C function) <1>: cpg-ref-SP_unregister_atom.
                                                              (line   6)
* SP_USE_DEVSYS (system property):       Customizing the Debugged Runtime System.
                                                              (line  15)
* SP_USE_MALLOC (system property):       System Properties and Environment Variables.
                                                              (line 224)
* SP_WHEN_EXIT (foreign resource context): Init and Deinit Functions.
                                                              (line  51)
* SP_WHEN_EXPLICIT (foreign resource context): Init and Deinit Functions.
                                                              (line  40)
* SP_WHEN_EXPLICIT (foreign resource context) <1>: Init and Deinit Functions.
                                                              (line  47)
* SP_WHEN_RESTORE (foreign resource context): Init and Deinit Functions.
                                                              (line  42)
* sqrt /1, square root (evaluable):      ref-ari-aex.         (line 270)
* ss_choice (statistics key):            ref-mgc-ove-sta.     (line 208)
* ss_global (statistics key):            ref-mgc-ove-sta.     (line 202)
* ss_local (statistics key):             ref-mgc-ove-sta.     (line 205)
* ss_time (statistics key):              ref-mgc-ove-sta.     (line 211)
* stack, choice:                         ref-mgc-ove.         (line  20)
* stack, global:                         ref-mgc-ove.         (line  24)
* stack, local:                          ref-mgc-ove.         (line  15)
* stack, trail:                          ref-mgc-ove.         (line  28)
* stack_shifts (statistics key):         ref-mgc-ove-sta.     (line 143)
* stand-alone executable:                Stand-Alone Executables.
                                                              (line   6)
* stand-alone executable (definition):   Glossary.            (line 778)
* standard streams:                      ref-iou-str.         (line  22)
* standard, order on terms:              ref-lte-cte-sot.     (line   6)
* start/[0,1] (prologbeans):             PB Prolog Server Interface.
                                                              (line  15)
* startServer on SICStus:                Java Threads.        (line  35)
* state, program:                        Saving.              (line   6)
* state/2 (automaton/9 option):          Automata Constraints.
                                                              (line 124)
* static predicate (definition):         Glossary.            (line 786)
* static procedures:                     ref-mdb-dsp.         (line   6)
* static resource:                       Foreign Resources.   (line  33)
* statistics, displaying:                ref-mgc-ove-sta.     (line   6)
* statistics, memory:                    ref-mgc-ove-sta.     (line   6)
* statistics/1 (zinc option):            FlatZinc Exported Predicates.
                                                              (line 246)
* statistics/1 (zinc option) <1>:        MiniZinc Exported Predicates.
                                                              (line  61)
* statistics/[0,2] (built-in):           ref-mgc-ove-sta.     (line   6)
* statistics/[0,2] (built-in) <1>:       ref-mgc-gcp.         (line   6)
* statistics/[0,2] (built-in, ref page): mpg-ref-statistics.  (line   6)
* steadfast predicate (definition):      Glossary.            (line 790)
* step (labeling/2 option):              Enumeration Predicates.
                                                              (line 126)
* stopServer on SICStus:                 Java Threads.        (line  41)
* store, consistent:                     CLPFD Interface.     (line  53)
* store, contradictory:                  CLPFD Interface.     (line  53)
* store_slot/2 (objects):                obj-exp-store_slot.  (line   6)
* stream (definition):                   Glossary.            (line 795)
* stream (load context key):             ref-lps-lco.         (line  30)
* stream alias:                          ref-iou-sfh-sob.     (line  36)
* stream alias (definition):             Glossary.            (line 798)
* stream errors:                         ref-iou-sfh-est.     (line   9)
* stream exceptions:                     ref-iou-sfh-est.     (line   9)
* stream object:                         ref-iou-sfh-sob.     (line   6)
* stream object (definition):            Glossary.            (line 806)
* stream position:                       ref-iou-sos.         (line  10)
* stream position (definition):          Glossary.            (line 809)
* stream position information for terminal I/O: ref-iou-sos-spt.
                                                              (line   6)
* stream position object:                ref-iou-raf.         (line  20)
* stream property:                       mpg-ref-stream_property.
                                                              (line  24)
* stream property (definition):          Glossary.            (line 818)
* stream, closing:                       ref-iou-sfh-cst.     (line   6)
* stream, current:                       ref-iou-sfh-bos.     (line   6)
* stream, end of:                        mpg-ref-at_end_of_stream.
                                                              (line  14)
* stream, position objects:              mpg-ref-set_stream_position.
                                                              (line  26)
* stream, position objects <1>:          mpg-ref-stream_position.
                                                              (line  26)
* streams:                               ref-iou-sfh.         (line  19)
* streams, current input:                ref-iou-sfh-opn.     (line  33)
* streams, current input <1>:            ref-iou-sfh-cis.     (line   9)
* streams, current input <2>:            ref-iou-sfh-cos.     (line   8)
* streams, current input and output:     ref-iou-bas.         (line   6)
* streams, current output:               ref-iou-sfh-opn.     (line  33)
* streams, current output <1>:           ref-iou-sfh-cis.     (line   9)
* streams, current output <2>:           ref-iou-sfh-cos.     (line   8)
* streams, null:                         ref-iou-sfh-opn.     (line  80)
* streams, opening:                      ref-iou-sfh-opn.     (line   6)
* streams, random access to:             ref-iou-raf.         (line   6)
* streams, specifying:                   ref-iou-str.         (line  22)
* streams, standard:                     ref-iou-str.         (line  22)
* stream_code/2 (built-in):              ref-iou-sfh-sob.     (line  37)
* stream_code/2 (built-in) <1>:          Prolog Streams.      (line  11)
* stream_code/2 (built-in, ref page):    mpg-ref-stream_code. (line   6)
* stream_object (argument type):         mpg-ref-aty-ety.     (line  12)
* stream_position/2 (built-in):          ref-iou-raf.         (line   6)
* stream_position/2 (built-in, ref page): mpg-ref-stream_position.
                                                              (line   6)
* stream_position_data/3 (built-in, ref page): mpg-ref-stream_position_data.
                                                              (line   6)
* stream_property/2 (built-in):          ref-iou-sfh-bos.     (line  15)
* stream_property/2 (built-in, ref page): mpg-ref-stream_property.
                                                              (line   6)
* stretchmaxlen/2 (automaton/9 option):  Automata Constraints.
                                                              (line  93)
* stretchminlen/2 (automaton/9 option):  Automata Constraints.
                                                              (line  99)
* stretchocc/2 (automaton/9 option):     Automata Constraints.
                                                              (line  83)
* stretchoccmod/3 (automaton/9 option):  Automata Constraints.
                                                              (line  88)
* string (definition):                   Glossary.            (line 822)
* string (definition) <1>:               ref-syn-cpt-sli.     (line   6)
* string first (Tcl command):            Commands.            (line 517)
* string index (Tcl command):            Commands.            (line 496)
* string last (Tcl command):             Commands.            (line 526)
* string length (Tcl command):           Commands.            (line 535)
* string match (Tcl command):            Commands.            (line 452)
* string match (Tcl command) <1>:        Commands.            (line 458)
* string range (Tcl command):            Commands.            (line 504)
* string string (Tcl command):           Commands.            (line 560)
* string tolower (Tcl command):          Commands.            (line 547)
* string toupper (Tcl command):          Commands.            (line 541)
* string trim (Tcl command):             Commands.            (line 554)
* string trimright (Tcl command):        Commands.            (line 568)
* string, encoded:                       CPL Notes.           (line  44)
* string, encoded (definition):          Glossary.            (line 266)
* strings, lists of character codes:     ref-syn-cpt-sli.     (line   6)
* strings, lists of character codes <1>: ref-syn-cpt-sli.     (line   6)
* structs (library package):             lib-structs.         (line  19)
* structure, control:                    ref-sem-ctr.         (line   6)
* structure, control (definition):       Glossary.            (line 189)
* sublist/5 (lists):                     lib-lists.           (line 343)
* subseq/3 (lists):                      lib-lists.           (line 228)
* subseq0/2 (lists):                     lib-lists.           (line 238)
* subseq1/2 (lists):                     lib-lists.           (line 249)
* subset/2 (sets):                       lib-sets.            (line  49)
* subsumes/2 (terms):                    lib-terms.           (line  19)
* subsumeschk/2 (terms):                 lib-terms.           (line  11)
* subsumes_term/2 (built-in):            ref-lte-met-usu.     (line  40)
* subsumes_term/2 (built-in, ref page):  mpg-ref-subsumes_term.
                                                              (line   6)
* subterm selector:                      Queries.             (line  64)
* subterm selector <1>:                  Breakpoint Tests.    (line 263)
* subterm selector (definition):         Glossary.            (line 833)
* subtract/3 (sets):                     lib-sets.            (line 110)
* sub_atom/5 (built-in):                 ref-lte-atm.         (line  16)
* sub_atom/5 (built-in, ref page):       mpg-ref-sub_atom.    (line   6)
* sub_term/2 (terms):                    lib-terms.           (line 245)
* success (labeling/2 time_out/2 option value): Enumeration Predicates.
                                                              (line 261)
* suffix/2 (lists):                      lib-lists.           (line 383)
* suffix_length/3 (lists):               lib-lists.           (line 306)
* sum/3 (clpfd):                         Arithmetic Constraints.
                                                              (line  37)
* sumlist/2 (lists):                     lib-lists.           (line 254)
* sup, plus infinity:                    CLPFD Interface.     (line  22)
* sup/[2,4] (clpqr):                     CLPQR Solver Predicates.
                                                              (line  96)
* suppress (redefine_warnings flag value): ref-lps-flg.       (line 312)
* SU_initialize() (C function):          cpg-ref-SU_initialize.
                                                              (line   6)
* SU_initialize() (C function) <1>:      too-spld.            (line 287)
* switch (Tcl command):                  Commands.            (line 316)
* symdiff/3 (sets):                      lib-sets.            (line 123)
* symmetric_closure/2 (ugraphs):         lib-ugraphs.         (line 102)
* symmetric_closure/2 (wgraphs):         lib-wgraphs.         (line  99)
* synchronization:                       lib-linda.           (line   6)
* synchronization/1 (disjoint2/2 option): Placement Constraints.
                                                              (line  94)
* synopsis, reference page field:        mpg-ref-ove.         (line  13)
* syntactic rewriting:                   ref-fdi-syn.         (line  11)
* syntax (definition):                   Glossary.            (line 840)
* syntax error:                          Syntax Errors.       (line   6)
* syntax errors:                         ref-ere-err-syn.     (line   6)
* syntax restrictions on operators:      ref-syn-ops-res.     (line   6)
* syntax, formal:                        ref-syn-syn.         (line  16)
* syntax, of atoms:                      ref-syn-trm-ato.     (line   6)
* syntax, of compound terms:             ref-syn-cpt.         (line  11)
* syntax, of floats:                     ref-syn-trm-flo.     (line   6)
* syntax, of integers:                   ref-syn-trm-int.     (line   6)
* syntax, of lists:                      ref-syn-cpt-lis.     (line   6)
* syntax, of sentences as terms:         ref-syn-syn-sen.     (line   6)
* syntax, of terms as tokens:            ref-syn-syn-trm.     (line   6)
* syntax, of tokens as character strings: ref-syn-syn-tok.    (line   6)
* syntax, of variables:                  ref-syn-trm-var.     (line   6)
* syntax, rule notation:                 ref-syn-syn-not.     (line   6)
* syntax_error/[1,5] (error class):      ref-ere-err.         (line 152)
* syntax_errors (prolog flag):           Syntax Errors.       (line  32)
* syntax_errors (prolog flag) <1>:       ref-lps-flg.         (line 335)
* syntax_errors (prolog flag) <2>:       ref-ere-err-syn.     (line  29)
* syntax_errors (prolog flag) <3>:       mpg-ref-read.        (line  47)
* syntax_errors (prolog flag) <4>:       mpg-ref-read_term.   (line  38)
* syntax_errors/1 (read_term/[2,3] option): ref-ere-err-syn.  (line  29)
* syntax_errors/1 (read_term/[2,3] option) <1>: mpg-ref-read_term.
                                                              (line  36)
* system errors:                         ref-ere-err-sys.     (line   6)
* system properties:                     System Properties and Environment Variables.
                                                              (line   6)
* system property (definition):          Glossary.            (line 844)
* system, development:                   Development and Runtime Systems.
                                                              (line   6)
* system, development (definition):      Glossary.            (line 241)
* system, extended runtime (definition): Glossary.            (line 277)
* system, runtime:                       Development and Runtime Systems.
                                                              (line   6)
* system, runtime <1>:                   Stand-Alone Executables.
                                                              (line   6)
* system, runtime (definition):          Glossary.            (line 708)
* system_error/[0,1] (error class):      ref-ere-err.         (line 181)
* system_type (prolog flag):             ref-lps-flg.         (line 350)
* table/[2,3] (clpfd):                   Extensional Constraints.
                                                              (line  34)
* tables, data:                          Data Tables.         (line   6)
* tail/2 (lists):                        lib-lists.           (line 366)
* tan /1, (evaluable):                   ref-ari-aex.         (line 207)
* tanh /1, (evaluable):                  ref-ari-aex.         (line 223)
* task_intervals/1 (cumulatives/3 option): Scheduling Constraints.
                                                              (line 112)
* task_intervals/1 (geost/[2,3,4] option): Placement Constraints.
                                                              (line 250)
* taut/2 (clpb):                         CLPB Interface.      (line  21)
* tcl_delete/1 (tcltk):                  Basic Functions.     (line  67)
* tcl_delete/1 (tcltk) <1>:              Predicates for Prolog to Interact with Tcl Interpreters.
                                                              (line  10)
* tcl_eval/3 (tcltk):                    Evaluation Functions.
                                                              (line 118)
* tcl_eval/3 (tcltk) <1>:                Predicates for Prolog to Interact with Tcl Interpreters.
                                                              (line  14)
* tcl_event/3 (tcltk):                   Event Functions.     (line   9)
* tcl_event/3 (tcltk) <1>:               Predicates for Prolog to Interact with Tcl Interpreters.
                                                              (line  19)
* tcl_new/1 (tcltk):                     Basic Functions.     (line  10)
* tcl_new/1 (tcltk) <1>:                 Predicates for Prolog to Interact with Tcl Interpreters.
                                                              (line   6)
* tell/1 (built-in):                     ref-iou-sfh-opn.     (line  60)
* tell/1 (built-in, ref page):           mpg-ref-tell.        (line   6)
* telling/1 (built-in):                  ref-iou-sfh-cos.     (line  15)
* telling/1 (built-in, ref page):        mpg-ref-telling.     (line   6)
* term (argument type):                  mpg-ref-aty-ety.     (line  13)
* term (definition):                     Glossary.            (line 854)
* term comparison, predicates for:       ref-lte-sum.         (line  46)
* term comparison, predicates for <1>:   mpg-top-tcm.         (line   6)
* term conversions:                      Support Functions.   (line   6)
* term handling, predicates for:         ref-lte-sum.         (line  69)
* term handling, predicates for <1>:     mpg-top-tha.         (line   6)
* term I/O, predicates for:              ref-iou-sum.         (line 158)
* term I/O, predicates for <1>:          mpg-top-tio.         (line   6)
* term input:                            ref-iou-tin.         (line  11)
* term names:                            FDBG Names of Terms. (line   6)
* term names <1>:                        FDBG Naming Terms.   (line   6)
* term output:                           ref-iou-tou.         (line  15)
* term reference:                        Mixing C and Prolog. (line  16)
* term, atomic (definition):             Glossary.            (line  51)
* term, callable (definition):           Glossary.            (line 103)
* term, compound (definition):           Glossary.            (line 161)
* term, cyclic:                          mpg-ref-read_term.   (line  58)
* term, cyclic <1>:                      mpg-ref-write_term.  (line  81)
* term, error:                           ref-ere-rex.         (line   6)
* term, exception:                       ref-ere-rex.         (line   6)
* term, exception <1>:                   Exception Handling in C.
                                                              (line   6)
* term, indexed:                         The DB-Spec Informal Description.
                                                              (line  15)
* term, layout:                          mpg-ref-read_term.   (line  78)
* term, layout (definition):             Glossary.            (line 443)
* term, mutable:                         ref-lte-mut.         (line  21)
* term, mutable (definition):            Glossary.            (line 546)
* term, simple (definition):             Glossary.            (line 731)
* term/1 (input method):                 Default Input Methods.
                                                              (line  15)
* terminal I/O, stream position information for: ref-iou-sos-spt.
                                                              (line   6)
* terminating a backtracking loop:       Terminating a Backtracking Loop.
                                                              (line  14)
* Terms in C, C functions for:           cpg-top-tic.         (line   6)
* terms, arguments of:                   ref-lte-act.         (line  12)
* terms, as sentences:                   ref-syn-syn.         (line  16)
* terms, comparison of:                  ref-lte-cte.         (line  12)
* terms, compound:                       ref-syn-cpt.         (line  11)
* terms, cyclic:                         ref-sem-occ.         (line   6)
* terms, input and output of:            ref-iou-bas.         (line  14)
* terms, ordering on:                    ref-lte-cte-sot.     (line   6)
* terms, predicates for looking at:      ref-lte.             (line  19)
* term_depth/2 (terms):                  lib-terms.           (line 268)
* term_expansion/6 (hook, ref page):     mpg-ref-term_expansion.
                                                              (line   6)
* term_expansion/6 (user, hook):         ref-lod-exp.         (line  12)
* term_hash/[2,3,4] (terms):             lib-terms.           (line  40)
* term_order/3 (terms):                  lib-terms.           (line 200)
* term_position (load context key):      ref-lps-lco.         (line  34)
* term_size/2 (terms):                   lib-terms.           (line 285)
* term_subsumer/3 (terms):               lib-terms.           (line  35)
* term_variables/2 (built-in):           ref-lte-act.         (line  22)
* term_variables/2 (built-in, ref page): mpg-ref-term_variables.
                                                              (line   6)
* term_variables/3 (aggregate):          lib-aggregate.       (line 163)
* term_variables_bag/2 (terms):          lib-terms.           (line 186)
* term_variables_set/2 (terms):          lib-terms.           (line 178)
* terse (gc_trace flag value):           ref-lps-flg.         (line 177)
* test condition, breakpoint:            Goal Tests.          (line   6)
* test, breakpoint:                      Creating Breakpoints.
                                                              (line  39)
* test/[1,2] (plunit declaration):       PlUnit A Unit Test Box.
                                                              (line  18)
* test_sub_bag/2 (bags):                 lib-bags.            (line 170)
* text (absolute_file_name/3 file type): mpg-ref-absolute_file_name.
                                                              (line  62)
* text (Tk widget):                      Types of Widget.     (line  54)
* thread, main:                          Calling Prolog Asynchronously.
                                                              (line  10)
* threads:                               OS Threads.          (line  11)
* threads, calling Prolog from:          Calling Prolog Asynchronously.
                                                              (line  10)
* throw/1 (built-in):                    ref-ere-rex.         (line   6)
* throw/1 (built-in, ref page):          mpg-ref-throw.       (line   6)
* throws/1 (plunit option):              PlUnit A Unit Test Box.
                                                              (line 161)
* timeout/1 (zinc option):               FlatZinc Exported Predicates.
                                                              (line 274)
* timeout/1 (zinc option) <1>:           MiniZinc Exported Predicates.
                                                              (line  89)
* timestamp:                             lib-file_systems.    (line 232)
* time_out (labeling/2 time_out/2 option value): Enumeration Predicates.
                                                              (line 269)
* time_out/2 (labeling/2 option):        Enumeration Predicates.
                                                              (line 247)
* time_out/3 (timeout):                  lib-timeout.         (line  17)
* title (prolog flag):                   ref-lps-flg.         (line 354)
* tk_all_events (tk_do_one_event/1 option): Servicing Tk Events.
                                                              (line  76)
* tk_destroy_window/1 (tcltk):           Housekeeping.        (line  19)
* tk_destroy_window/1 (tcltk) <1>:       Predicates for Prolog to Interact with Tcl Interpreters with Tk Extensions.
                                                              (line  74)
* tk_dont_wait (tk_do_one_event/1 option): Servicing Tk Events.
                                                              (line  61)
* tk_do_one_event/[0,1] (tcltk):         Servicing Tk Events. (line  51)
* tk_do_one_event/[0,1] (tcltk) <1>:     Predicates for Prolog to Interact with Tcl Interpreters with Tk Extensions.
                                                              (line  29)
* tk_file_events (tk_do_one_event/1 option): Servicing Tk Events.
                                                              (line  67)
* tk_idle_events (tk_do_one_event/1 option): Servicing Tk Events.
                                                              (line  73)
* tk_main_loop/0 (tcltk):                Passing Control to Tk.
                                                              (line  10)
* tk_main_loop/0 (tcltk) <1>:            Predicates for Prolog to Interact with Tcl Interpreters with Tk Extensions.
                                                              (line  66)
* tk_main_window/2 (tcltk):              Housekeeping.        (line  12)
* tk_main_window/2 (tcltk) <1>:          Predicates for Prolog to Interact with Tcl Interpreters with Tk Extensions.
                                                              (line  70)
* tk_make_window_exist/1 (tcltk):        Housekeeping.        (line  26)
* tk_make_window_exist/1 (tcltk) <1>:    Predicates for Prolog to Interact with Tcl Interpreters with Tk Extensions.
                                                              (line  77)
* tk_new/2 (tcltk):                      Basic Functions.     (line  20)
* tk_new/2 (tcltk) <1>:                  Predicates for Prolog to Interact with Tcl Interpreters with Tk Extensions.
                                                              (line   6)
* tk_next_event/[2,3] (tcltk):           Event Functions.     (line  35)
* tk_next_event/[2,3] (tcltk) <1>:       Servicing Tk Events. (line 108)
* tk_next_event/[2,3] (tcltk) <2>:       Predicates for Prolog to Interact with Tcl Interpreters with Tk Extensions.
                                                              (line  59)
* tk_num_main_windows/1 (tcltk):         Housekeeping.        (line  38)
* tk_num_main_windows/1 (tcltk) <1>:     Predicates for Prolog to Interact with Tcl Interpreters with Tk Extensions.
                                                              (line  80)
* tk_timer_events (tk_do_one_event/1 option): Servicing Tk Events.
                                                              (line  70)
* tk_window_events (tk_do_one_event/1 option): Servicing Tk Events.
                                                              (line  64)
* tokens:                                ref-syn-syn.         (line  15)
* told/0 (built-in):                     ref-iou-sfh-cst.     (line  26)
* told/0 (built-in, ref page):           mpg-ref-told.        (line   6)
* top-level:                             Start.               (line  44)
* toplevel (Tk widget):                  Types of Widget.     (line  58)
* toplevel_print_options (prolog flag):  Queries.             (line  61)
* toplevel_print_options (prolog flag) <1>: ref-lps-flg.      (line 359)
* toplevel_print_options (prolog flag) <2>: Message Phases.   (line  31)
* toplevel_print_options (prolog flag) <3>: mpg-ref-portray.  (line  52)
* toplevel_print_options (prolog flag) <4>: mpg-ref-write_term.
                                                              (line 122)
* toplevel_show_store (CHR flag):        CHR Debugging Predicates.
                                                              (line  37)
* top_level_events/0 (tk_new/2 option):  Basic Functions.     (line  33)
* top_sort/2 (ugraphs):                  lib-ugraphs.         (line 116)
* top_sort/2 (wgraphs):                  lib-wgraphs.         (line 105)
* total_runtime (statistics key):        ref-mgc-ove-sta.     (line  92)
* trace (debugging flag value):          ref-lps-flg.         (line  67)
* trace (debugging flag value) <1>:      mpg-ref-debugging.   (line  25)
* trace (definition):                    Glossary.            (line 858)
* trace (unknown flag value):            ref-lps-flg.         (line 379)
* trace (unknown flag value) <1>:        ref-ere-hex-hup.     (line  29)
* trace/0 (built-in):                    Basic Debug.         (line  31)
* trace/0 (built-in, ref page):          mpg-ref-trace.       (line   6)
* trace/0 (debugger mode control):       Action Variables.    (line 120)
* trail (statistics key):                ref-mgc-ove-sta.     (line 116)
* trail stack:                           ref-mgc-ove.         (line  28)
* TRAILSTKSIZE (system property):        System Properties and Environment Variables.
                                                              (line 162)
* trail_free (statistics key):           ref-mgc-ove-sta.     (line 184)
* trail_used (statistics key):           ref-mgc-ove-sta.     (line 181)
* transitive_closure/2 (ugraphs):        lib-ugraphs.         (line  90)
* transitive_closure/2 (wgraphs):        lib-wgraphs.         (line  94)
* transitive_reduction/2 (ugraphs):      lib-ugraphs.         (line  93)
* transpose/2 (lists):                   lib-lists.           (line 264)
* transpose_ugraph/2 (ugraphs):          lib-ugraphs.         (line  71)
* transpose_wgraph/2 (wgraphs):          lib-wgraphs.         (line  89)
* tree, binary:                          lib-assoc.           (line   6)
* tree, binary <1>:                      lib-avl.             (line   6)
* tree/1 (abolish/2 option):             mpg-ref-abolish.     (line  36)
* tree_size/2 (trees):                   lib-trees.           (line  45)
* tree_to_list/2 (trees):                lib-trees.           (line  49)
* trimcore/0 (built-in):                 ref-mgc-ove-rsp.     (line   6)
* trimcore/0 (built-in, ref page):       mpg-ref-trimcore.    (line   6)
* true/0 (built-in, ref page):           mpg-ref-true.        (line   6)
* true/0 (debugger condition):           Other Tests.         (line  33)
* true/0 (plunit option):                PlUnit A Unit Test Box.
                                                              (line 110)
* true/1 (debugger condition):           Breakpoint Tests.    (line  35)
* true/1 (debugger condition) <1>:       Other Tests.         (line  19)
* true/1 (plunit option):                PlUnit A Unit Test Box.
                                                              (line 110)
* truncate /1, (evaluable):              ref-ari-aex.         (line 187)
* try (CHR port):                        CHR Ports.           (line  37)
* type errors:                           ref-ere-err-typ.     (line   6)
* type of operators:                     ref-syn-ops-ove.     (line  38)
* type tests, C functions for:           cpg-top-typ.         (line   6)
* type tests, predicates for:            ref-lte-met-typ.     (line   6)
* type tests, predicates for <1>:        ref-lte-met-typ.     (line  10)
* type tests, predicates for <2>:        ref-lte-sum.         (line   6)
* type tests, predicates for <3>:        mpg-top-typ.         (line   6)
* type-in module:                        ref-lps-flg.         (line 368)
* type-in module <1>:                    ref-mod-som.         (line   6)
* type-in module (definition):           Glossary.            (line 862)
* type-in module, changing:              ref-mod-tyi.         (line   6)
* type/1 (open/4 option):                mpg-ref-open.        (line  48)
* type/1 (stream property):              mpg-ref-stream_property.
                                                              (line  72)
* typein_module (prolog flag):           ref-lps-flg.         (line 366)
* type_definition/[2,3] (structs):       str-etr.             (line  11)
* type_error/[2,4] (error class):        ref-ere-err.         (line 127)
* ugraph_to_wgraph/2 (wgraphs):          lib-wgraphs.         (line  50)
* ugraph_to_wgraph/3 (wgraphs):          lib-wgraphs.         (line  64)
* unbiased_standard_deviation/2 (statistics): lib-statistics. (line  96)
* unbiased_variance/2 (statistics):      lib-statistics.      (line  79)
* unblock/0 (debugger port value):       Port Tests.          (line  13)
* unblocked goal (definition):           Glossary.            (line 865)
* unbound (definition):                  Glossary.            (line 868)
* UNC path:                              ref-fdi-syn.         (line  69)
* undefined predicate:                   Undefined Predicates.
                                                              (line   6)
* undefined predicate <1>:               ref-lps-flg.         (line 371)
* undefined predicate <2>:               mpg-ref-unknown_predicate_handler.
                                                              (line  15)
* undefine_method/3 (objects):           obj-exp-undefine_method.
                                                              (line   6)
* unification:                           ref-sem-sec.         (line  41)
* unification <1>:                       ref-sem-sec.         (line  98)
* unification (definition):              Glossary.            (line 871)
* unification, explicit:                 ref-lte-met-usu.     (line  10)
* unifier, most general:                 ref-sem-sec.         (line  98)
* unify (debugger command):              Debug Commands.      (line 341)
* unify_with_occurs_check/2 (built-in):  ref-lte-met-usu.     (line  20)
* unify_with_occurs_check/2 (built-in, ref page): mpg-ref-unify_with_occurs_check.
                                                              (line   6)
* uninherit/1 (objects):                 obj-exp-uninherit.   (line   6)
* uninstantiation errors:                ref-ere-err-uns.     (line   6)
* uninstantiation_error/[1,3] (error class): ref-ere-err.     (line 122)
* union/[2,3,4] (sets):                  lib-sets.            (line 157)
* unit clause:                           ref-sem-pro.         (line  28)
* unit clause (definition):              Glossary.            (line 891)
* unknown (prolog flag):                 Undefined Predicates.
                                                              (line  19)
* unknown (prolog flag) <1>:             ref-lps-flg.         (line 371)
* unknown (prolog flag) <2>:             ref-ere-hex-hup.     (line  28)
* unknown (prolog flag) <3>:             mpg-ref-unknown.     (line  27)
* unknown (prolog flag) <4>:             mpg-ref-unknown_predicate_handler.
                                                              (line  43)
* unknown procedures, catching:          ref-mdb-dsp.         (line  63)
* unknown/2 (built-in):                  Undefined Predicates.
                                                              (line  21)
* unknown/2 (built-in) <1>:              ref-ere-hex-hup.     (line  46)
* unknown/2 (built-in, ref page):        mpg-ref-unknown.     (line   6)
* unknown_predicate_handler/3 (hook, ref page): mpg-ref-unknown_predicate_handler.
                                                              (line   6)
* unknown_predicate_handler/3 (user, hook): Undefined Predicates.
                                                              (line   6)
* unknown_predicate_handler/3 (user, hook) <1>: ref-ere-hex-hup.
                                                              (line   6)
* unleash/0 (debugger condition):        Condition Macros.    (line  10)
* unload_foreign_resource/1 (built-in):  Interface Predicates.
                                                              (line  24)
* unload_foreign_resource/1 (built-in, ref page): mpg-ref-unload_foreign_resource.
                                                              (line   6)
* unreachable code:                      Xref Introduction.   (line   6)
* unregister_event_listener/1 (prologbeans): PB Prolog Server Interface.
                                                              (line 169)
* unregister_query/1 (prologbeans):      PB Prolog Server Interface.
                                                              (line 105)
* unset (Tcl command):                   Commands.            (line  45)
* up (labeling/2 option):                Enumeration Predicates.
                                                              (line 174)
* update_mutable/2 (built-in):           ref-lte-mut.         (line  43)
* update_mutable/2 (built-in, ref page): mpg-ref-update_mutable.
                                                              (line   6)
* uplevel (Tcl command):                 Commands.            (line 767)
* upvar (Tcl command):                   Commands.            (line 739)
* use of full-stop:                      ref-iou-tin-trm.     (line  23)
* use of full-stop <1>:                  ref-iou-tou-cha.     (line   6)
* user:                                  Inserting Clauses.   (line   6)
* user (--main option value):            too-spld.            (line  83)
* user:breakpoint_expansion/2 (hook):    Hooks Related to Breakpoints.
                                                              (line   8)
* user:breakpoint_expansion/2 (hook) <1>: Condition Macros.   (line  22)
* user:debugger_command_hook/2 (hook):   Hooks Related to Breakpoints.
                                                              (line  73)
* user:debugger_command_hook/2 (hook) <1>: Breakpoint Predicates.
                                                              (line 117)
* user:error_exception/1 (hook):         ref-ere-hex.         (line  24)
* user:error_exception/1 (hook) <1>:     Exceptions Debug.    (line  16)
* user:file_search_path/2 (hook):        ref-fdi-fsp-def.     (line   6)
* user:generate_message_hook/3 (hook):   Message Handling Predicates.
                                                              (line  19)
* user:message_hook/3 (hook):            Message Handling Predicates.
                                                              (line  30)
* user:portray/1 (hook):                 ref-iou-tou-por.     (line   6)
* user:portray/1 (hook) <1>:             CLPQR Fragments and Bits.
                                                              (line  12)
* user:portray_message/2 (hook):         Message Handling Predicates.
                                                              (line  14)
* user:query_class_hook/5 (hook):        Query Handling Predicates.
                                                              (line  23)
* user:query_hook/6 (hook):              Query Handling Predicates.
                                                              (line  16)
* user:query_input_hook/3 (hook):        Query Handling Predicates.
                                                              (line  39)
* user:query_map_hook/4 (hook):          Query Handling Predicates.
                                                              (line  51)
* user:runtime_entry/1 (hook):           too-spld.            (line  74)
* user:term_expansion/6 (hook):          ref-lod-exp.         (line  12)
* user:unknown_predicate_handler/3 (hook): Undefined Predicates.
                                                              (line   6)
* user:unknown_predicate_handler/3 (hook) <1>: ref-ere-hex-hup.
                                                              (line   6)
* username/1 (odbc_db_open/4 option):    ODBC Predicates.     (line  20)
* user_close() (C function):             cpg-ref-user_close.  (line   6)
* user_error (prolog flag):              ref-iou-sfh-sob.     (line  31)
* user_error (prolog flag) <1>:          ref-lps-flg.         (line 405)
* user_error (prolog flag) <2>:          Prolog Streams.      (line  59)
* user_error (stream alias):             ref-iou-sfh-sob.     (line  31)
* user_flush_output() (C function):      cpg-ref-user_flush_output.
                                                              (line   6)
* user_input (prolog flag):              ref-iou-sfh-sob.     (line  21)
* user_input (prolog flag) <1>:          ref-lps-flg.         (line 395)
* user_input (prolog flag) <2>:          Prolog Streams.      (line  49)
* user_input (stream alias):             ref-iou-sfh-sob.     (line  21)
* user_main() (C function):              User-defined Main Programs.
                                                              (line  10)
* user_output (prolog flag):             ref-iou-sfh-sob.     (line  26)
* user_output (prolog flag) <1>:         ref-lps-flg.         (line 400)
* user_output (prolog flag) <2>:         Prolog Streams.      (line  54)
* user_output (stream alias):            ref-iou-sfh-sob.     (line  26)
* user_read() (C function):              cpg-ref-user_read.   (line   6)
* user_write() (C function):             cpg-ref-user_write.  (line   6)
* use_module/[1,2,3] (built-in):         ref-mod-lod.         (line  27)
* use_module/[1,2,3] (built-in, ref page): mpg-ref-use_module.
                                                              (line   6)
* UTC:                                   lib-file_systems.    (line 232)
* UTF-8 encoding:                        CPL Notes.           (line  44)
* val (all_different/2 on/1 value):      Arithmetic-Logical Constraints.
                                                              (line 160)
* val (all_distinct/2 on/1 value):       Arithmetic-Logical Constraints.
                                                              (line 160)
* val (global_cardinality/3 on/1 value): Arithmetic-Logical Constraints.
                                                              (line  87)
* val/1 (fd_global/[3,4] option):        The Global Constraint Programming Interface.
                                                              (line 103)
* value (all_different/2 consistency/1 value): Arithmetic-Logical Constraints.
                                                              (line 142)
* value (all_distinct/2 consistency/1 value): Arithmetic-Logical Constraints.
                                                              (line 142)
* value (global_cardinality/3 consistency/1 value): Arithmetic-Logical Constraints.
                                                              (line  75)
* value (scalar_product/5 consistency/1 value): Arithmetic Constraints.
                                                              (line  70)
* value/1 (labeling/2 option):           Enumeration Predicates.
                                                              (line 150)
* valueprec/3 (automaton/9 option):      Automata Constraints.
                                                              (line  74)
* var or Type (argument type):           mpg-ref-aty-ety.     (line  15)
* var/1 (built-in, ref page):            mpg-ref-var.         (line   6)
* variable:                              Terminology.         (line  61)
* variable (definition):                 Glossary.            (line 894)
* variable, anonymous:                   ref-syn-trm-var.     (line   6)
* variable, anonymous (definition):      Glossary.            (line  28)
* variable, domain:                      CLPFD Interface.     (line  16)
* variable/1 (labeling/2 option):        Enumeration Predicates.
                                                              (line 109)
* variables, attributed:                 lib-atts.            (line   6)
* variables, list of:                    FDBG Legend.         (line   6)
* variables, scope of:                   ref-sem-pro.         (line  65)
* variables, syntax of:                  ref-syn-trm-var.     (line   6)
* variables, writing:                    ref-iou-tou-cha.     (line  18)
* variables/1 (read_term/[2,3] option):  mpg-ref-read_term.   (line  41)
* variables/1 (zinc option):             FlatZinc Exported Predicates.
                                                              (line 339)
* variables/1 (zinc option) <1>:         MiniZinc Exported Predicates.
                                                              (line  96)
* variable_names/1 (read_term/[2,3] option): mpg-ref-read_term.
                                                              (line  45)
* variable_names/1 (write_term/[2,3] option): mpg-ref-write_term.
                                                              (line  52)
* variant/2 (terms):                     lib-terms.           (line  31)
* varnumbers/[2,3] (varnumbers):         lib-varnumbers.      (line  44)
* verbose (gc_trace flag value):         ref-lps-flg.         (line 174)
* verify_attributes/3 (Module):          lib-atts.            (line  69)
* version (prolog flag):                 ref-lps-flg.         (line 410)
* version_data (prolog flag):            ref-lps-flg.         (line 417)
* vertices/2 (ugraphs):                  lib-ugraphs.         (line  35)
* vertices/2 (wgraphs):                  lib-wgraphs.         (line  34)
* vertices_edges_to_ugraph/3 (ugraphs):  lib-ugraphs.         (line  28)
* vertices_edges_to_wgraph/3 (wgraphs):  lib-wgraphs.         (line  69)
* view/0 (gauge):                        lib-gauge.           (line  16)
* visavis/1 (geost/[2,3,4] option):      Placement Constraints.
                                                              (line 239)
* visavis_floating/1 (geost/[2,3,4] option): Placement Constraints.
                                                              (line 232)
* visavis_init/1 (geost/[2,3,4] option): Placement Constraints.
                                                              (line 227)
* visibility rules for modules:          ref-mod-vis.         (line   6)
* visualizer:                            FDBG Visualizers.    (line   6)
* volatile (definition):                 Glossary.            (line 911)
* volatile (predicate property):         mpg-ref-predicate_property.
                                                              (line  40)
* volatile declaration:                  Volatile Declarations.
                                                              (line   6)
* volatile/0 (predicate property):       ref-lps-app.         (line  26)
* volatile/1 (built-in, ref page):       mpg-ref-volatile.    (line   6)
* volatile/1 (declaration):              Volatile Declarations.
                                                              (line   6)
* wake (CHR port):                       CHR Ports.           (line  26)
* walltime (statistics key):             ref-mgc-ove-sta.     (line  99)
* WAM:                                   Intro.               (line  19)
* warning (unknown flag value):          ref-lps-flg.         (line 388)
* warning (unknown flag value) <1>:      ref-ere-hex-hup.     (line  38)
* weighted_mean/3 (statistics):          lib-statistics.      (line  42)
* weighted_standard_deviation/3 (statistics): lib-statistics. (line 102)
* weighted_variance/3 (statistics):      lib-statistics.      (line  84)
* wgraph_to_ugraph/2 (wgraphs):          lib-wgraphs.         (line  37)
* when/1 (load_files/2 option):          mpg-ref-load_files.  (line  40)
* when/2 (built-in, ref page):           mpg-ref-when.        (line   6)
* while (Tcl command):                   Commands.            (line 253)
* windowed executable (definition):      Glossary.            (line 915)
* with_output_to_codes/[2,3,4] (codesio): lib-codesio.        (line  53)
* wordocc/2 (automaton/9 option):        Automata Constraints.
                                                              (line 105)
* wordoccmod/3 (automaton/9 option):     Automata Constraints.
                                                              (line 109)
* wordprefix/2 (automaton/9 option):     Automata Constraints.
                                                              (line 114)
* wordsuffix/2 (automaton/9 option):     Automata Constraints.
                                                              (line 119)
* wrap/2 (disjoint1/2 option):           Placement Constraints.
                                                              (line  23)
* wrap/4 (disjoint2/2 option):           Placement Constraints.
                                                              (line  64)
* write (absolute_file_name/3 access):   mpg-ref-absolute_file_name.
                                                              (line 135)
* write (debugger command):              Debug Commands.      (line 188)
* write (open/[3,4] mode):               mpg-ref-open.        (line  32)
* write predicates:                      ref-iou-tou-wrt.     (line   6)
* write predicates, distinctions among:  ref-iou-tou-dis.     (line   6)
* write/0 (debugger show control):       Action Variables.    (line  23)
* write/[1,2] (built-in):                ref-iou-tou-wrt.     (line   6)
* write/[1,2] (built-in, ref page):      mpg-ref-write.       (line   6)
* writeq/[1,2] (built-in):               ref-iou-tou-wrt.     (line   6)
* writeq/[1,2] (built-in, ref page):     mpg-ref-writeq.      (line   6)
* write_canonical/[1,2] (built-in):      ref-iou-tou-wrt.     (line   6)
* write_canonical/[1,2] (built-in, ref page): mpg-ref-write_canonical.
                                                              (line   6)
* write_record/[1,2] (csv):              lib-csv.             (line 119)
* write_records/[1,2] (csv):             lib-csv.             (line 124)
* write_record_to_codes/2 (csv):         lib-csv.             (line 128)
* write_term/1 (debugger show control):  Action Variables.    (line  25)
* write_term/[2,3] (built-in):           ref-iou-tou-wrt.     (line   6)
* write_term/[2,3] (built-in, ref page): mpg-ref-write_term.  (line   6)
* write_term_to_codes/[3,4] (codesio):   lib-codesio.         (line  28)
* write_to_codes/[2,3] (codesio):        lib-codesio.         (line  21)
* writing variables:                     ref-iou-tou-cha.     (line  18)
* X, identity for numbers:               ref-ari-aex.         (line 305)
* XEmacs:                                Emacs Interface.     (line   6)
* xml_parse/[2,3] (xml):                 lib-xml.             (line  69)
* xml_pp/1 (xml):                        lib-xml.             (line  98)
* xml_subterm/2 (xml):                   lib-xml.             (line  92)
* xor /2, bitwise exclusive or (evaluable): ref-ari-aex.      (line 118)
* zero-quote notation for character conversion: ref-syn-trm-int.
                                                              (line  20)
* zip (debugger command):                Debug Commands.      (line  75)
* zip (debugging flag value):            ref-lps-flg.         (line  73)
* zip (debugging flag value) <1>:        mpg-ref-debugging.   (line  32)
* zip (definition):                      Glossary.            (line 919)
* zip/0 (built-in):                      Basic Debug.         (line  25)
* zip/0 (built-in, ref page):            mpg-ref-zip.         (line   6)
* zip/0 (debugger mode control):         Action Variables.    (line 124)

